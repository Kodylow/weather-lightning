{"version":3,"file":"index.module.js","sources":["../src/utils/storage.ts","../src/l402/index.ts","../src/l402/parse.js","../src/podcasting2/boostagrams.ts","../src/utils/keysend.ts","../src/utils/lnurl.ts","../src/invoice.ts","../src/utils/invoice.ts","../src/utils/nostr.ts","../src/lightning-address.ts","../src/utils/fiat.ts"],"sourcesContent":["export class MemoryStorage {\n  storage;\n\n  constructor(initial?: any) {\n    this.storage = initial || {};\n  }\n\n  getItem(key) {\n    return this.storage[key];\n  }\n\n  setItem(key, value) {\n    this.storage[key] = value;\n  }\n}\n\nexport class NoStorage {\n  constructor(initial?: any) {\n  }\n\n  getItem(key) {\n    return null;\n  }\n\n  setItem(key, value) {\n  }\n}\n\nexport default MemoryStorage;\n","import MemoryStorage from \"../utils/storage\";\nimport { WebLNProvider } from '@webbtc/webln-types';\nimport { parseL402 } from \"./parse\";\n\nexport * as storage from \"../utils/storage\";\nconst memoryStorage = new MemoryStorage();\n\nconst HEADER_KEY = \"L402\"; // we have to update this to L402 at some point\n\nexport const fetchWithL402 = async (url: string, fetchArgs: Record<string, any>, options: Record<string, any>) => {\n  if (!options) {\n    options = {};\n  }\n  const headerKey = options.headerKey || HEADER_KEY;\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!webln) {\n    throw new Error(\"WebLN is missing\");\n  }\n  let store = options.store || memoryStorage;\n  if (!fetchArgs) {\n    fetchArgs = {};\n  }\n  fetchArgs.cache = 'no-store';\n  fetchArgs.mode = 'cors';\n  if (!fetchArgs.headers) {\n    fetchArgs.headers = {};\n  }\n  const cachedL402Data = store.getItem(url);\n  if (cachedL402Data) {\n    const data = JSON.parse(cachedL402Data);\n    fetchArgs.headers[\"Authorization\"] = `${headerKey} ${data.token}:${data.preimage}`;\n    return await fetch(url, fetchArgs)\n  }\n\n  fetchArgs.headers[\"Accept-Authenticate\"] = headerKey;\n  const initResp = await fetch(url, fetchArgs);\n  const header = initResp.headers.get('www-authenticate');\n  if (!header) {\n    return initResp\n  }\n\n  const details = parseL402(header);\n  const token = details.token || details.macaroon;\n  const inv = details.invoice;\n\n  await webln.enable();\n  const invResp = await webln.sendPayment(inv);\n\n  store.setItem(url, JSON.stringify({\n    'token': token,\n    'preimage': invResp.preimage\n  }));\n\n  fetchArgs.headers[\"Authorization\"] = `${headerKey} ${token}:${invResp.preimage}`;\n  return await fetch(url, fetchArgs);\n}\n\nexport default fetchWithL402;\n","export const parseL402 = (string) => {\n  string = string.replace('L402', '');\n  string = string.replace('LSAT', '');\n  // Split the string into key-value pairs\n  const pairs = string.split(',');\n\n  // Split each pair into key and value\n  const keyValuePairArray = pairs.map(pair => {\n    const [key, valuePotentiallyQuoted] = pair.split('=').map(e => e.trim());\n    const valueMatch = valuePotentiallyQuoted.match(/\"?([^\"]*)\"?/);\n    const value = valueMatch[1]\n    return [key, value];\n  });\n\n  return Object.fromEntries(keyValuePairArray);\n}\n","import { WebLNProvider } from \"@webbtc/webln-types\";\n\ntype BoostOptions = {\n  webln?: unknown;\n}\n\ntype BoostArguments = {\n  destination: string\n  customKey?: string;\n  customValue?: string;\n  amount?: number;\n  boost: Boost;\n}\n\ntype WeblnBoostParams = {\n  destination: string;\n  amount: number;\n  customRecords: Record<string, string>;\n}\n\nexport type Boost = {\n  action: string;\n  value_msat: number;\n  value_msat_total: number;\n  app_name: string;\n  app_version: string;\n  feedId: string;\n  podcast: string;\n  episode: string;\n  ts: number;\n  name: string;\n  sender_name: string;\n}\n\nexport const boost = async (args: BoostArguments, options?: BoostOptions) => {\n  let { boost, amount } = args;\n  if (!options) {\n    options = {};\n  }\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!amount) {\n    amount = Math.floor(boost.value_msat / 1000);\n  }\n\n  let weblnParams: WeblnBoostParams = {\n    destination: args.destination,\n    amount: amount,\n    customRecords: {\n      '7629169': JSON.stringify(boost)\n    }\n  };\n  if (args.customKey && args.customValue) {\n    weblnParams.customRecords[args.customKey] = args.customValue;\n  }\n  await webln.enable();\n  const response = await webln.keysend(weblnParams);\n  return response;\n}\n\nexport default boost;\n","import type { KeysendResponse } from '../types'\n\nconst TAG_KEYSEND = 'keysend'\n\nexport const parseKeysendResponse = (\n  data: Record<string, any>\n): KeysendResponse => {\n  if (data.tag !== TAG_KEYSEND) throw new Error('Invalid keysend params')\n  if (data.status !== \"OK\") throw new Error('Keysend status not OK')\n\n  if (!('customKey' in data.customData[0]) || data.customData[0]['customKey'] != '696969')\n    throw new Error('Unable to find customKey');\n\n  if (!('customValue' in data.customData[0]) || !data.customData[0]['customValue'])\n    throw new Error('Unable to find customValue');\n\n  if (!data.pubkey)\n    throw new Error('Pubkey does not exist');\n\n  const destination =  data.pubkey;\n  const customKey = data.customData[0]['customKey'];\n  const customValue = data.customData[0]['customValue'];\n  \n  return {\n    destination,\n    customKey,\n    customValue\n  }\n}","import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\n\nimport type { LUD18ServicePayerData, LnUrlPayResponse } from '../types'\n\nconst URL_REGEX = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/;\n\nexport const isUrl = (url: string | null): url is string => {\n  if (!url) return false\n  return URL_REGEX.test(url)\n}\n\nexport const isValidAmount = ({\n  amount,\n  min,\n  max,\n}: {\n  amount: number\n  min: number\n  max: number\n}): boolean => {\n  const isValid = amount > 0 && amount >= min && amount <= max\n  const isFixed = min === max\n  return isValid && isFixed ? amount === min : isValid\n}\n\nconst TAG_PAY_REQUEST = 'payRequest'\n\n// From: https://github.com/dolcalmi/lnurl-pay/blob/main/src/request-pay-service-params.ts\nexport const parseLnUrlPayResponse = (\n  data: Record<string, any>\n): LnUrlPayResponse => {\n  if (data.tag !== TAG_PAY_REQUEST) throw new Error('Invalid pay service params')\n\n  const callback = (data.callback + '').trim();\n  if (!isUrl(callback)) throw new Error('Callback must be a valid url')\n\n  const min = Math.ceil(Number(data.minSendable || 0))\n  const max = Math.floor(Number(data.maxSendable))\n  if (!(min && max) || min > max) throw new Error('Invalid pay service params')\n\n  let metadata: Array<Array<string>>\n  let metadataHash: string\n  try {\n    metadata = JSON.parse(data.metadata + '')\n    metadataHash = sha256(data.metadata + '').toString(Hex)\n  } catch {\n    metadata = []\n    metadataHash = sha256('[]').toString(Hex)\n  }\n\n  let image = ''\n  let description = ''\n  let identifier = ''\n  for (let i = 0; i < metadata.length; i++) {\n    const [k, v] = metadata[i]\n    switch (k) {\n      case 'text/plain':\n        description = v\n        break\n      case 'text/identifier':\n        identifier = v\n        break\n      case 'image/png;base64':\n      case 'image/jpeg;base64':\n        image = 'data:' + k + ',' + v\n        break\n    }\n  }\n  let payerData = data.payerData as LUD18ServicePayerData | undefined;\n\n  let domain\n  try {\n    domain = new URL(callback).hostname\n  } catch {\n    // fail silently and let domain remain undefined if callback is not a valid URL\n  }\n\n  return {\n    callback,\n    fixed: min === max,\n    min,\n    max,\n    domain,\n    metadata,\n    metadataHash,\n    identifier,\n    description,\n    image,\n    payerData,\n    commentAllowed: Number(data.commentAllowed) || 0,\n    rawData: data,\n    allowsNostr: data.allowsNostr || false,\n  }\n}\n","import { getHashFromInvoice } from \"./utils/invoice\";\nimport Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { InvoiceArgs } from './types';\n\nexport default class Invoice {\n  paymentRequest: string;\n  paymentHash: string;\n  preimage: string | null;\n  verify: string | null;\n\n  constructor(args: InvoiceArgs) {\n    this.paymentRequest = args.pr;\n    this.paymentHash = getHashFromInvoice(this.paymentRequest) as string;\n    this.verify = args.verify ?? null;\n    this.preimage = args.preimage ?? null;\n  }\n\n  async isPaid(): Promise<boolean> {\n    if (this.preimage)\n      return this.validatePreimage(this.preimage);\n    else if (this.verify) {\n      return await this.verifyPayment();\n    } else {\n      throw new Error('Could not verify payment');\n    }\n  }\n\n  validatePreimage(preimage: string): boolean {\n    if (!preimage || !this.paymentHash) return false\n  \n    try {\n      const preimageHash = sha256(Hex.parse(preimage)).toString(Hex)\n      return this.paymentHash === preimageHash\n    } catch {\n      return false\n    }\n  }\n\n  async verifyPayment(): Promise<boolean> {\n    if (!this.verify) throw new Error('LNURL verify not available');\n    const result = await fetch(this.verify);\n    const json = await result.json();\n    if (json.preimage) {\n      this.preimage = json.preimage;\n    }\n  \n    return json.settled;\n  }\n}","import { decode } from 'light-bolt11-decoder';\n\nexport const getHashFromInvoice = (invoice) => {\n  if (!invoice) return null\n\n  try {\n    const decoded = decode(invoice)\n    if (!decoded || !decoded.sections) return null\n\n    const hashTag = decoded.sections.find(\n      (value) => value.name === 'payment_hash'\n    )\n    if (!hashTag || !hashTag.value) return null\n\n    return hashTag.value.toString()\n  } catch {\n    return null\n  }\n}","import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { Event, NostrResponse, ZapArgs, ZapOptions } from '../types';\n\nexport async function generateZapEvent({\n  satoshi, comment, p, e, relays\n}: ZapArgs, options: ZapOptions = {}): Promise<Event> {\n  const nostr = options.nostr || globalThis.nostr;\n  if (!nostr) {\n    throw new Error(\"nostr option or window.nostr is not available\");\n  }\n\n  const nostrTags = [\n    [\"relays\", ...relays],\n    [\"amount\", satoshi.toString()]\n  ]\n  if (p) {\n    nostrTags.push([\"p\", p]);\n  }\n  if (e) {\n    nostrTags.push([\"e\", e])\n  }\n\n  const pubkey = await nostr.getPublicKey();\n\n  const nostrEvent: Event = {\n    pubkey,\n    created_at: Math.floor(Date.now() / 1000),\n    kind: 9734,\n    tags: nostrTags,\n    content: comment ?? \"\"\n  }\n\n  nostrEvent.id = getEventHash(nostrEvent)\n  return await nostr.signEvent(nostrEvent)\n}\n\nexport function validateEvent(event: Event): boolean {\n  if (typeof event.content !== \"string\") return false;\n  if (typeof event.created_at !== \"number\") return false;\n  // ignore these checks because if the pubkey is not set we add it to the event. same for the ID.\n  // if (typeof event.pubkey !== \"string\") return false;\n  // if (!event.pubkey.match(/^[a-f0-9]{64}$/)) return false;\n\n  if (!Array.isArray(event.tags)) return false;\n  for (let i = 0; i < event.tags.length; i++) {\n    const tag = event.tags[i];\n    if (!Array.isArray(tag)) return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\") return false;\n    }\n  }\n\n  return true;\n}\n\nexport function serializeEvent(evt: Event): string {\n  if (!validateEvent(evt))\n    throw new Error(\"can't serialize event with wrong or missing properties\");\n\n  return JSON.stringify([\n    0,\n    evt.pubkey,\n    evt.created_at,\n    evt.kind,\n    evt.tags,\n    evt.content,\n  ]);\n}\n\nexport function getEventHash(event: Event): string {\n  return sha256(serializeEvent(event)).toString(Hex);\n}\n\nexport function parseNostrResponse(nostrData: NostrResponse, username: string | undefined) {\n  let nostrPubkey: string | undefined;\n  let nostrRelays: string[] | undefined;\n  if (username && nostrData) {\n    nostrPubkey = nostrData.names?.[username];\n    nostrRelays = nostrPubkey ? nostrData.relays?.[nostrPubkey] : undefined;\n  }\n\n  return [nostrData, nostrPubkey, nostrRelays] as const;\n}","import { parseKeysendResponse } from './utils/keysend';\nimport { isUrl, isValidAmount, parseLnUrlPayResponse } from './utils/lnurl';\nimport Invoice from './invoice';\nimport { InvoiceArgs, LnUrlPayResponse, NostrResponse, RequestInvoiceArgs, ZapArgs, ZapOptions } from './types';\nimport { generateZapEvent, parseNostrResponse } from './utils/nostr';\nimport type { Boost } from './podcasting2/boostagrams';\nimport { boost as booster } from './podcasting2/boostagrams';\nimport { WebLNProvider, SendPaymentResponse } from \"@webbtc/webln-types\";\nimport { KeysendResponse } from './types';\n\nconst LN_ADDRESS_REGEX =\n  /^((?:[^<>()\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@((?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport const DEFAULT_PROXY = \"https://lnaddressproxy.getalby.com\";\n\ntype LightningAddressOptions = {\n  proxy?: string | false;\n  webln?: WebLNProvider;\n}\n\nexport default class LightningAddress {\n  address: string;\n  options: LightningAddressOptions;\n  username: string | undefined;\n  domain: string | undefined;\n  pubkey: string | undefined;\n  lnurlpData: LnUrlPayResponse | undefined;\n  keysendData: KeysendResponse | undefined;\n  nostrData: NostrResponse | undefined;\n  nostrPubkey: string | undefined;\n  nostrRelays: string[] | undefined;\n  webln: WebLNProvider | undefined;\n\n  constructor(address: string, options?: LightningAddressOptions) {\n    this.address = address;\n    this.options = { proxy: DEFAULT_PROXY, webln: globalThis.webln };\n    this.options = Object.assign(this.options, options);\n    this.parse();\n    this.webln = this.options.webln;\n  }\n\n  parse() {\n    const result = LN_ADDRESS_REGEX.exec(this.address.toLowerCase());\n    if (result) {\n      this.username = result[1];\n      this.domain = result[2];\n    }\n  }\n\n  async fetch() {\n    if (this.options.proxy) {\n      return this.fetchWithProxy();\n    } else {\n      return this.fetchWithoutProxy();\n    }\n  }\n\n  async fetchWithProxy() {\n    const result = await fetch(`${this.options.proxy}/lightning-address-details?${new URLSearchParams({ ln: this.address }).toString()}`);\n    const json = await result.json();\n\n    this.parseResponse(json.lnurlp, json.keysend, json.nostr);\n  }\n\n  async fetchWithoutProxy() {\n    if (!this.domain || !this.username) {\n      return;\n    }\n    const lnurlResult = await fetch(this.lnurlpUrl());\n    const keysendResult = await fetch(this.keysendUrl());\n    const nostrResult = await fetch(this.nostrUrl());\n\n    let lnurlData: Record<string, string> | undefined;\n    if (lnurlResult.ok) {\n      lnurlData = await lnurlResult.json();\n    } \n    let keysendData: Record<string, string> | undefined;\n    if (keysendResult.ok) {\n      keysendData = await keysendResult.json();\n    } \n    let nostrData: NostrResponse | undefined;\n    if (nostrResult.ok) {\n      nostrData = await nostrResult.json();\n    } \n    \n    this.parseResponse(lnurlData, keysendData, nostrData);\n  }\n\n  lnurlpUrl() {\n    return `https://${this.domain}/.well-known/lnurlp/${this.username}`;\n  }\n\n  keysendUrl() {\n    return `https://${this.domain}/.well-known/keysend/${this.username}`;\n  }\n\n  nostrUrl() {\n    return `https://${this.domain}/.well-known/nostr.json?name=${this.username}`;\n  }\n\n  async generateInvoice(params: Record<string, string>): Promise<Invoice> {\n    let data;\n    if (this.options.proxy) {\n      const invoiceResult = await fetch(`${this.options.proxy}/generate-invoice?${new URLSearchParams({ ln: this.address, ...params }).toString()}`);\n      const json = await invoiceResult.json();\n      data = json.invoice;\n    } else {\n      if (!this.lnurlpData) {\n        throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n      }\n      if (!this.lnurlpData.callback || !isUrl(this.lnurlpData.callback)) throw new Error('Valid callback does not exist in lnurlpData')\n      const callbackUrl = new URL(this.lnurlpData.callback)\n      callbackUrl.search = new URLSearchParams(params).toString()\n      const invoiceResult = await fetch(callbackUrl);\n      data = await invoiceResult.json();\n    }\n\n    const paymentRequest = data && data.pr && data.pr.toString();\n    if (!paymentRequest) throw new Error('Invalid pay service invoice')\n\n    const invoiceArgs: InvoiceArgs = { pr: paymentRequest };\n    if (data && data.verify) invoiceArgs.verify = data.verify.toString();\n\n    return new Invoice(invoiceArgs);\n  }\n\n  async requestInvoice(args: RequestInvoiceArgs): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    const msat = args.satoshi * 1000;\n    const { commentAllowed, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (args.comment && commentAllowed && commentAllowed > 0 && args.comment.length > commentAllowed)\n      throw new Error(\n        `The comment length must be ${commentAllowed} characters or fewer`\n      )\n\n    const invoiceParams: { amount: string, comment?: string, payerdata?: string } = { amount: msat.toString() };\n    if (args.comment) invoiceParams.comment = args.comment\n    if (args.payerdata) invoiceParams.payerdata = JSON.stringify(args.payerdata)\n\n    return this.generateInvoice(invoiceParams);\n  }\n\n  async boost(boost: Boost, amount: number = 0) {\n    if (!this.keysendData) {\n      throw new Error(\"No keysendData available. Please call fetch() first.\")\n    }\n    const { destination, customKey, customValue } = this.keysendData;\n    return booster({\n      destination,\n      customKey,\n      customValue,\n      amount,\n      boost,\n    }, {\n      webln: this.webln,\n    })\n  }\n\n  async zapInvoice({\n    satoshi, comment, relays, e\n  }: ZapArgs, options: ZapOptions = {}): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    if (!this.nostrPubkey) {\n      throw new Error(\"Nostr Pubkey is missing\");\n    }\n    const p = this.nostrPubkey;\n    const msat = satoshi * 1000;\n    const { allowsNostr, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (!allowsNostr) throw new Error('Your provider does not support zaps')\n\n    const event = await generateZapEvent({\n      satoshi: msat, comment, p, e, relays\n    }, options);\n    const zapParams: { amount: string, nostr: string } = {\n      amount: msat.toString(),\n      nostr: JSON.stringify(event)\n    };\n\n    const invoice = await this.generateInvoice(zapParams);\n    return invoice;\n  }\n\n  async zap(args: ZapArgs, options: ZapOptions = {}): Promise<SendPaymentResponse> {\n    const invoice = this.zapInvoice(args, options);\n    if (!this.webln) {\n      // mainly for TS\n      throw new Error(\"WebLN not available\");\n    }\n    await this.webln.enable();\n    const response = this.webln.sendPayment((await invoice).paymentRequest);\n    return response;\n  }\n\n  private parseResponse(lnurlpData: Record<string, string> | undefined, keysendData: Record<string, string> | undefined, nostrData: NostrResponse | undefined) {\n    if (lnurlpData) {\n      this.lnurlpData = parseLnUrlPayResponse(lnurlpData);\n    }\n    if (keysendData) {\n      this.keysendData = parseKeysendResponse(keysendData);\n    }\n    if (nostrData) {\n      [this.nostrData, this.nostrPubkey, this.nostrRelays] = parseNostrResponse(nostrData, this.username);\n    }\n  }\n}\n","const numSatsInBtc = 100_000_000;\n\nexport const getFiatBtcRate = async (currency: string): Promise<number> => {\n  const url = \"https://getalby.com/api/rates/\" + currency.toLowerCase() + \".json\";\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data.rate_float / numSatsInBtc;\n};\n\nexport const getFiatValue = async ({ satoshi, currency }: { satoshi: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Number(satoshi) * rate;\n};\n\nexport const getSatoshiValue = async ({ amount, currency }: { amount: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Math.floor(Number(amount) / rate);\n}\n\nexport const getFormattedFiatValue = async ({ satoshi, currency, locale }: { satoshi: number | string; currency: string; locale: string }) => {\n  if (!locale) {\n    locale = 'en';\n  }\n  const fiatValue = await getFiatValue({ satoshi, currency });\n  return fiatValue.toLocaleString(locale, {\n    style: \"currency\",\n    currency,\n  });\n}"],"names":["MemoryStorage","initial","storage","this","getItem","key","setItem","value","NoStorage","memoryStorage","fetchWithL402","url","fetchArgs","options","_exit2","_temp3","_result","headers","headerKey","fetch","then","initResp","header","get","keyValuePairArray","details","replace","split","map","pair","e","trim","_pair$split$map","match","Object","fromEntries","token","macaroon","inv","invoice","Promise","resolve","webln","enable","sendPayment","invResp","store","JSON","stringify","preimage","globalThis","Error","cache","mode","_temp4","cachedL402Data","data","parse","_await$fetch","reject","boost","args","amount","Math","floor","value_msat","weblnParams","destination","customRecords","customKey","customValue","keysend","URL_REGEX","isUrl","test","isValidAmount","_ref","min","max","isValid","Invoice","_args$verify","_args$preimage","paymentRequest","paymentHash","verify","pr","decoded","decode","sections","hashTag","find","name","toString","_unused","getHashFromInvoice","isPaid","_this2","validatePreimage","verifyPayment","preimageHash","sha256","Hex","_proto","_this4","result","json","settled","generateZapEvent","satoshi","comment","p","relays","nostr","nostrTags","concat","push","getPublicKey","pubkey","nostrEvent","created_at","Date","now","kind","tags","content","id","getEventHash","signEvent","event","Array","isArray","i","length","tag","j","serializeEvent","evt","validateEvent","parseNostrResponse","nostrData","username","nostrPubkey","nostrRelays","_nostrData$names","names","_nostrData$relays","undefined","LN_ADDRESS_REGEX","LightningAddress","address","domain","lnurlpData","keysendData","proxy","assign","exec","toLowerCase","fetchWithProxy","fetchWithoutProxy","URLSearchParams","ln","parseResponse","lnurlp","_this6","lnurlpUrl","lnurlResult","keysendUrl","keysendResult","nostrUrl","nostrResult","lnurlData","ok","_nostrResult$json","_temp","_temp2","_keysendResult$json","_lnurlResult$json","_temp5","_temp6","generateInvoice","params","invoiceArgs","_this8","_temp10","_extends","invoiceResult","callback","callbackUrl","URL","search","_invoiceResult$json","requestInvoice","_this10","msat","_this10$lnurlpData","commentAllowed","invoiceParams","payerdata","_this12","_this12$keysendData","booster","zapInvoice","_this14","_this14$lnurlpData","allowsNostr","zapParams","zap","_this16","_this15$webln","_invoice","_sendPayment","call","metadataHash","ceil","Number","minSendable","maxSendable","metadata","image","description","identifier","_metadata$i","k","v","payerData","hostname","fixed","rawData","parseLnUrlPayResponse","status","customData","parseKeysendResponse","_parseNostrResponse","getFiatBtcRate","currency","response","rate_float","getFiatValue","rate","_ref2","_ref3","locale","fiatValue","toLocaleString","style"],"mappings":"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"}