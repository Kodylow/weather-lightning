{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/request.ts","../src/OAuth2User.ts","../src/OAuth2Bearer.ts","../src/webln/NostrWeblnProvider.ts","../src/helpers.ts","../src/client.ts","../src/webln/OauthWeblnProvider.ts","../src/types.ts"],"sourcesContent":["// https://stackoverflow.com/a/62969380\nexport function buildQueryString(query: Record<string, any>): string {\n  return Object.entries(query)\n    .map(([key, value]) =>\n      key && value\n        ? `${key}=${value}`\n        : \"\"\n    )\n    .join(\"&\");\n}\n\nexport function basicAuthHeader(client_id: string, client_secret: string | undefined) {\n  return `Basic ${btoa(`${client_id}:${client_secret}`)}`;\n}\n","import fetch from 'cross-fetch';\nimport { buildQueryString } from \"./utils\";\nimport {\n  AuthClient,\n} from \"./types\";\n\nconst BASE_URL = \"https://api.getalby.com\";\n\nexport interface RequestOptions extends Omit<RequestInit, \"body\"> {\n  auth?: AuthClient;\n  endpoint: string;\n  params?: Record<string, any>;\n  request_body?: Record<string, any>;\n  method?: string;\n  max_retries?: number;\n  base_url?: string;\n}\n\nasync function fetchWithRetries(\n  url: RequestInfo,\n  init: RequestInit,\n  max_retries = 0\n): Promise<Response> {\n  const res = await fetch(url, init);\n  if (res.status === 429 && max_retries > 0) {\n    const rateLimitReset = Number(res.headers.get(\"x-rate-limit-reset\"));\n    const rateLimitRemaining = Number(res.headers.get(\"x-rate-limit-remaining\"));\n    const timeTillReset = rateLimitReset * 1000 - Date.now();\n    let timeToWait = 1000;\n    if (rateLimitRemaining === 0)\n      timeToWait = timeTillReset;\n    await new Promise((resolve) => setTimeout(resolve, timeToWait));\n    return fetchWithRetries(url, init, max_retries - 1);\n  }\n  return res;\n}\n\nclass AlbyResponseError extends Error {\n  status: number;\n  statusText: string;\n  headers: Record<string, any>;\n  error: any; // todo: typeable?\n  constructor(\n    status: number,\n    statusText: string,\n    headers: Headers,\n    error: any\n  ) {\n    super();\n    this.status = status;\n    this.statusText = statusText;\n    this.headers = headers;\n    this.error = error;\n  }\n}\n\nexport async function request({\n  auth,\n  endpoint,\n  params: query = {},\n  request_body,\n  method,\n  max_retries,\n  base_url = BASE_URL,\n  headers,\n  ...options\n}: RequestOptions): Promise<Response> {\n  const url = new URL(base_url + endpoint);\n  url.search = buildQueryString(query);\n  const isPost = method === \"POST\" && !!request_body;\n  const authHeader = auth\n    ? await auth.getAuthHeader(url.href, method)\n    : undefined;\n  const response = await fetchWithRetries(\n    url.toString(),\n    {\n      headers: {\n        ...(isPost\n          ? { \"Content-Type\": \"application/json; charset=utf-8\" }\n          : undefined),\n        ...authHeader,\n        ...headers,\n      },\n      method,\n      body: isPost ? JSON.stringify(request_body) : undefined,\n      ...options,\n    },\n    max_retries\n  );\n  if (!response.ok) {\n    const error = await response.json();\n    throw new AlbyResponseError(\n      response.status,\n      response.statusText,\n      response.headers,\n      error\n    );\n  }\n  return response;\n}\n\nexport async function rest<T = any>(\n  args: RequestOptions\n): Promise<T> {\n  const response = await request(args);\n  return response.json() as any;\n}\n","import CryptoJS from 'crypto-js';\nimport { buildQueryString, basicAuthHeader } from \"./utils\";\nimport { OAuthClient, AuthHeader, GetTokenResponse, Token, GenerateAuthUrlOptions } from \"./types\";\nimport { RequestOptions, rest } from \"./request\";\n\nconst AUTHORIZE_URL = \"https://getalby.com/oauth\";\n\nexport type OAuth2Scopes =\n  | \"account:read\"\n  | \"invoices:create\"\n  | \"invoices:read\"\n  | \"transactions:read\"\n  | \"balance:read\"\n  | \"payments:send\";\n\nexport interface OAuth2UserOptions {\n  client_id: string;\n  client_secret?: string;\n  callback: string;\n  scopes: OAuth2Scopes[];\n  request_options?: Partial<RequestOptions>;\n  token?: Token;\n}\n\nfunction processTokenResponse(token: GetTokenResponse): Token {\n  const { expires_in, ...rest } = token;\n  return {\n    ...rest,\n    ...(!!expires_in && {\n      expires_at: Date.now() + expires_in * 1000,\n    }),\n  };\n}\n\nexport class OAuth2User implements OAuthClient {\n  token?: Token;\n  options: OAuth2UserOptions;\n  code_verifier?: string;\n  code_challenge?: string;\n  constructor(options: OAuth2UserOptions) {\n    const { token, ...defaultOptions } = options;\n    this.options = {client_secret: '', ...defaultOptions};\n    this.token = token;\n  }\n\n  /**\n   * Refresh the access token\n   */\n  async refreshAccessToken(): Promise<{ token: Token }> {\n    const refresh_token = this.token?.refresh_token;\n    const { client_id, client_secret, request_options } = this.options;\n    if (!client_id) {\n      throw new Error(\"client_id is required\");\n    }\n    if (!refresh_token) {\n      throw new Error(\"refresh_token is required\");\n    }\n    const data = await rest<GetTokenResponse>({\n      ...request_options,\n      endpoint: `/oauth/token`,\n      params: {\n        client_id,\n        grant_type: \"refresh_token\",\n        refresh_token,\n      },\n      method: \"POST\",\n      headers: {\n        ...request_options?.headers,\n        \"Content-type\": \"application/x-www-form-urlencoded\",\n        ...{\n          Authorization: basicAuthHeader(client_id, client_secret),\n        },\n      },\n    });\n    const token = processTokenResponse(data);\n    this.token = token;\n    return { token };\n  }\n\n  /**\n   * Check if an access token is expired\n   */\n  isAccessTokenExpired(): boolean {\n    const refresh_token = this.token?.refresh_token;\n    const expires_at = this.token?.expires_at;\n    if (!expires_at) return true;\n    return !!refresh_token && expires_at <= Date.now() + 1000;\n  }\n\n  /**\n   * Request an access token\n   */\n  async requestAccessToken(code?: string): Promise<{ token: Token }> {\n    const { client_id, client_secret, callback, request_options } =\n      this.options;\n    const code_verifier = this.code_verifier;\n    if (!client_id) {\n      throw new Error(\"client_id is required\");\n    }\n    if (!callback) {\n      throw new Error(\"callback is required\");\n    }\n    const params = {\n      code,\n      grant_type: \"authorization_code\",\n      code_verifier,\n      client_id,\n      redirect_uri: callback,\n    };\n    const data = await rest<GetTokenResponse>({\n      ...request_options,\n      endpoint: `/oauth/token`,\n      params,\n      method: \"POST\",\n      headers: {\n        ...request_options?.headers,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        ...{\n          Authorization: basicAuthHeader(client_id, client_secret),\n        },\n      },\n    });\n    const token = processTokenResponse(data);\n    this.token = token;\n    return { token };\n  }\n\n  generateAuthURL(options?: GenerateAuthUrlOptions): string {\n    if (!options) { options = {}; }\n    console.log(options);\n    const { client_id, callback, scopes } = this.options;\n    if (!callback) throw new Error(\"callback required\");\n    if (!scopes) throw new Error(\"scopes required\");\n    let code_challenge_method;\n    if (options.code_challenge_method === \"S256\") {\n      const code_verifier = CryptoJS.lib.WordArray.random(64);\n      this.code_verifier = code_verifier.toString();\n      this.code_challenge = CryptoJS.SHA256(this.code_verifier).toString(CryptoJS.enc.Base64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=+$/, '')\n      code_challenge_method = \"S256\";\n    } else if (options.code_challenge_method === \"plain\" && options.code_challenge) {\n      this.code_challenge = options.code_challenge;\n      this.code_verifier = options.code_challenge;\n      code_challenge_method = \"plain\";\n    }\n    const code_challenge = this.code_challenge;\n    const url = new URL(AUTHORIZE_URL);\n    url.search = buildQueryString({\n      ...options,\n      client_id,\n      scope: scopes.join(\" \"),\n      response_type: \"code\",\n      redirect_uri: callback,\n      code_challenge_method,\n      code_challenge,\n    });\n    return url.toString();\n  }\n\n  async getAuthHeader(): Promise<AuthHeader> {\n    if (!this.token?.access_token) throw new Error(\"access_token is required\");\n    if (this.isAccessTokenExpired()) await this.refreshAccessToken();\n    return {\n      Authorization: `Bearer ${this.token.access_token}`,\n    };\n  }\n}\n","import { AuthClient, AuthHeader } from \"./types\";\n\nexport class OAuth2Bearer implements AuthClient {\n  private bearer_token: string;\n\n  constructor(bearer_token: string) {\n    this.bearer_token = bearer_token;\n  }\n\n  getAuthHeader(): AuthHeader {\n    return {\n      Authorization: `Bearer ${this.bearer_token}`,\n    };\n  }\n}\n","import {\n  nip04,\n  relayInit,\n  signEvent,\n  getEventHash,\n  nip19,\n  generatePrivateKey,\n  getPublicKey,\n  Relay,\n  Event,\n  UnsignedEvent\n} from 'nostr-tools';\n\nconst NWCs: Record<string,NostrWebLNOptions> = {\n  alby: {\n    authorizationUrl: \"https://nwc.getalby.com/apps/new\",\n    relayUrl: \"wss://relay.getalby.com/v1\",\n    walletPubkey: '69effe7b49a6dd5cf525bd0905917a5005ffe480b58eeb8e861418cf3ae760d9'\n  }\n};\n\ninterface NostrWebLNOptions {\n  authorizationUrl?: string; // the URL to the NWC interface for the user to confirm the session\n  relayUrl: string;\n  walletPubkey: string;\n  secret?: string;\n};\n\nexport class NostrWebLNProvider {\n  relay: Relay;\n  relayUrl: string;\n  secret: string | undefined;\n  walletPubkey: string;\n  options: NostrWebLNOptions;\n  subscribers: Record<string, (payload: any) => void>;\n\n  static parseWalletConnectUrl(walletConnectUrl: string) {\n    walletConnectUrl = walletConnectUrl.replace('nostrwalletconnect://', 'http://').replace('nostr+walletconnect://', 'http://'); // makes it possible to parse with URL in the different environments (browser/node/...)\n    const url = new URL(walletConnectUrl);\n    const options = {} as NostrWebLNOptions;\n    options.walletPubkey = url.host;\n    const secret = url.searchParams.get('secret');\n    const relayUrl = url.searchParams.get('relay');\n    if (secret) {\n      options.secret = secret;\n    }\n    if (relayUrl) {\n      options.relayUrl = relayUrl;\n    }\n    return options;\n  }\n\n  static withNewSecret(options?: ConstructorParameters<typeof NostrWebLNProvider>[0]) {\n    options = options || {};\n    options.secret = generatePrivateKey();\n    return new NostrWebLNProvider(options);\n  }\n\n  constructor(options?: { providerName?: string, authorizationUrl?: string, relayUrl?: string, secret?: string, walletPubkey?: string, nostrWalletConnectUrl?: string }) {\n    if (options && options.nostrWalletConnectUrl) {\n      options = {\n        ...NostrWebLNProvider.parseWalletConnectUrl(options.nostrWalletConnectUrl), ...options\n      };\n    }\n    const providerOptions = NWCs[options?.providerName || 'alby'] as NostrWebLNOptions;\n    this.options = { ...providerOptions, ...(options || {}) } as NostrWebLNOptions;\n    this.relayUrl = this.options.relayUrl;\n    this.relay = relayInit(this.relayUrl);\n    if (this.options.secret) {\n      this.secret = (this.options.secret.toLowerCase().startsWith('nsec') ? nip19.decode(this.options.secret).data : this.options.secret) as string;\n    }\n    this.walletPubkey = (this.options.walletPubkey.toLowerCase().startsWith('npub') ? nip19.decode(this.options.walletPubkey).data : this.options.walletPubkey) as string;\n    this.subscribers = {};\n\n    // @ts-ignore\n    if(globalThis.WebSocket === undefined) {\n      console.error(\"WebSocket is undefined. Make sure to `import websocket-polyfill` for nodejs environments\");\n    }\n  }\n\n  on(name: string, callback: () => void) {\n    this.subscribers[name] = callback;\n  }\n\n  notify(name: string, payload?: any) {\n    const callback = this.subscribers[name];\n    if (callback) {\n      callback(payload);\n    }\n  }\n\n  getNostrWalletConnectUrl(includeSecret = true) {\n    let url = `nostr+walletconnect://${this.walletPubkey}?relay=${this.relayUrl}&pubkey=${this.publicKey}`;\n    if (includeSecret) {\n      url = `${url}&secret=${this.secret}`;\n    }\n    return url;\n  }\n\n  get nostrWalletConnectUrl() {\n    return this.getNostrWalletConnectUrl();\n  }\n\n  get connected() {\n    return this.relay.status === 1;\n  }\n\n  get publicKey() {\n    if (!this.secret) {\n      throw new Error(\"Missing secret key\");\n    }\n    return getPublicKey(this.secret);\n  }\n\n  signEvent(event: Event) {\n    if (!this.secret) {\n      throw new Error(\"Missing secret key\");\n    }\n    return signEvent(event, this.secret)\n  }\n\n  getEventHash(event: Event) {\n    return getEventHash(event);\n  }\n\n  async enable() {\n    if (this.connected) {\n      return Promise.resolve();\n    }\n    await this.relay.connect();\n  }\n\n  close() {\n    return this.relay.close();\n  }\n\n  async encrypt(pubkey: string, content: string) {\n    if (!this.secret) {\n      throw new Error('Missing secret');\n    }\n    const encrypted = await nip04.encrypt(this.secret, pubkey, content);\n    return encrypted;\n  }\n\n  async decrypt(pubkey: string, content: string) {\n    if (!this.secret) {\n      throw new Error('Missing secret');\n    }\n    const decrypted = await nip04.decrypt(this.secret, pubkey, content);\n    return decrypted;\n  }\n\n  // WebLN compatible response\n  // TODO: use NIP-47 get_info call\n  async getInfo() {\n    return {\n      methods: [\"getInfo\", \"sendPayment\"],\n      node: {},\n      supports: [\"lightning\"],\n      version: \"NWC\"\n    }\n  }\n\n  sendPayment(invoice: string) {\n    this.checkConnected();\n\n    return new Promise(async (resolve, reject) => {\n      const command = {\n        \"method\": \"pay_invoice\",\n        \"params\": {\n          \"invoice\": invoice\n        }\n      };\n      const encryptedCommand = await this.encrypt(this.walletPubkey, JSON.stringify(command));\n      let event: any = {\n        kind: 23194,\n        created_at: Math.floor(Date.now() / 1000),\n        tags: [['p', this.walletPubkey]],\n        content: encryptedCommand,\n      };\n\n      event.pubkey = this.publicKey;\n      event.id = this.getEventHash(event);\n      event.sig = this.signEvent(event);\n\n      // subscribe to NIP_47_SUCCESS_RESPONSE_KIND and NIP_47_ERROR_RESPONSE_KIND\n      // that reference the request event (NIP_47_REQUEST_KIND)\n      let sub = this.relay.sub([\n        {\n          kinds: [23195],\n          authors: [this.walletPubkey],\n          \"#e\": [event.id],\n        }\n      ]);\n\n      function replyTimeout() {\n        sub.unsub();\n        //console.error(`Reply timeout: event ${event.id} `);\n        reject(`reply timeout: event ${event.id}`);\n      }\n\n      let replyTimeoutCheck = setTimeout(replyTimeout, 60000);\n\n      sub.on('event', async (event) => {\n        //console.log(`Received reply event: `, event);\n        clearTimeout(replyTimeoutCheck);\n        sub.unsub();\n        const decryptedContent = await this.decrypt(this.walletPubkey, event.content);\n        let response;\n        try {\n          response = JSON.parse(decryptedContent);\n        } catch(e) {\n          reject({ error: \"invalid response\", code: \"INTERNAL\" });\n          return;\n        }\n        // @ts-ignore // event is still unknown in nostr-tools\n        if (event.kind == 23195 && response.result?.preimage) {\n          resolve({ preimage: response.result.preimage });\n          this.notify('sendPayment', event.content);\n        } else {\n          reject({ error: response.error?.message, code: response.error?.code });\n        }\n      });\n\n      let pub = this.relay.publish(event);\n\n      function publishTimeout() {\n        //console.error(`Publish timeout: event ${event.id}`);\n        reject({ error: `Publish timeout: event ${event.id}` });\n      }\n      let publishTimeoutCheck = setTimeout(publishTimeout, 5000);\n\n      pub.on('failed', (reason: unknown) => {\n        //console.debug(`failed to publish to ${this.relay.url}: ${reason}`)\n        clearTimeout(publishTimeoutCheck)\n        reject({ error: `Failed to publish request: ${reason}` });\n      });\n\n      pub.on('ok', () => {\n        //console.debug(`Event ${event.id} for ${invoice} published`);\n        clearTimeout(publishTimeoutCheck);\n      });\n    });\n  }\n\n  getAuthorizationUrl(options: { name?: string, returnTo?: string }) {\n    if (!this.options.authorizationUrl) {\n      throw new Error(\"Missing authorizationUrl option\");\n    }\n    const url = new URL(this.options.authorizationUrl);\n    if (options?.name) {\n      url.searchParams.set('c', options?.name);\n    }\n    url.searchParams.set('pubkey', this.publicKey);\n    if (options?.returnTo) {\n      url.searchParams.set('return_to', options.returnTo);\n    }\n    return url;\n  }\n\n  initNWC(options: { name?: string, returnTo?: string } = {}) {\n    // here we assume an browser context and window/document is available\n    // we set the location.host as a default name if none is given\n    if (!options.name) {\n      options.name = document.location.host;\n    }\n    const url = this.getAuthorizationUrl(options);\n    const height = 600;\n    const width = 400;\n    const top = window.outerHeight / 2 + window.screenY - height / 2;\n    const left = window.outerWidth / 2 + window.screenX - width / 2;\n\n    return new Promise((resolve, reject) => {\n      const popup = window.open(\n        url.toString(),\n        `${document.title} - Wallet Connect`,\n        `height=${height},width=${width},top=${top},left=${left}`\n      );\n      if (!popup) { reject(); return; } // only for TS?\n\n      const checkForPopup = () => {\n        if (popup && popup.closed) {\n          reject();\n          clearInterval(popupChecker);\n          window.removeEventListener('message', onMessage);\n        }\n      };\n\n      const onMessage = (message: { data: any, origin: string }) => {\n        const data = message.data;\n        if (data && data.type === 'nwc:success' && message.origin === `${url.protocol}//${url.host}`) {\n          resolve(data);\n          clearInterval(popupChecker);\n          window.removeEventListener('message', onMessage);\n          if (popup) {\n            popup.close(); // close the popup\n          }\n        }\n      };\n      const popupChecker = setInterval(checkForPopup, 500);\n      window.addEventListener('message', onMessage);\n    });\n  }\n\n  private checkConnected() {\n    if (!this.connected) {\n      throw new Error(\"please call enable() and await the promise before calling this function\")\n    }\n  }\n}\n\nexport const NWC = NostrWebLNProvider;\n","import {\n  SendBoostagramRequestParams,\n} from \"./types\";\n\n\nexport function keysendParamsFromBoostagram(boostagramParams: SendBoostagramRequestParams) {\n  const customRecords: Record<string, string> = {};\n  if (boostagramParams.recipient.customKey && boostagramParams.recipient.customValue) {\n    customRecords[boostagramParams.recipient.customKey] = boostagramParams.recipient.customValue;\n  }\n  // https://github.com/lightning/blips/blob/master/blip-0010.md\n  customRecords['7629169'] = JSON.stringify(boostagramParams.boostagram);\n\n  return {\n    destination: boostagramParams.recipient.address,\n    amount: boostagramParams.amount,\n    customRecords: customRecords,\n  };\n}","import { rest, RequestOptions } from \"./request\";\nimport {\n  AuthClient,\n  InvoiceRequestParams,\n  KeysendRequestParams,\n  SendPaymentRequestParams,\n  SendBoostagramRequestParams,\n  SendToAlbyRequestParams\n} from \"./types\";\nimport { keysendParamsFromBoostagram } from \"./helpers\";\nimport { OAuth2Bearer } from \"./auth\";\n\n\nexport class Client {\n  auth: AuthClient;\n  defaultRequestOptions?: Partial<RequestOptions>;\n\n  constructor(\n    auth: string | AuthClient,\n    requestOptions?: Partial<RequestOptions>\n  ) {\n    this.auth = typeof auth === \"string\" ? new OAuth2Bearer(auth) : auth;\n    this.defaultRequestOptions = {\n      ...requestOptions,\n      headers: {\n        \"User-Agent\": \"alby-js-api\",\n        ...requestOptions?.headers,\n      },\n    };\n  }\n\n  accountBalance(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/balance`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountSummary(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/summary`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountInformation(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/me`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountValue4Value(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/value4value`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  incomingInvoices(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/incoming`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  outgoingInvoices(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/outgoing`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  getInvoice(paymentHash: string, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/${paymentHash}`,\n      method: \"GET\",\n    });\n  }\n\n  createInvoice(invoice: InvoiceRequestParams, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices`,\n      request_body: invoice,\n      method: \"POST\",\n    });\n  }\n\n  keysend(args: KeysendRequestParams | KeysendRequestParams[], request_options?: Partial<RequestOptions>) {\n    let endpoint, request_body;\n    if (Array.isArray(args)) {\n      endpoint = \"/payments/keysend/multi\";\n      request_body = { keysends: args };\n    } else {\n      endpoint = \"/payments/keysend\";\n      request_body = args;\n    }\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint,\n      request_body,\n      method: \"POST\",\n    });\n  }\n\n  sendPayment(params: SendPaymentRequestParams, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/payments/bolt11`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n  sendBoostagram(args: SendBoostagramRequestParams | SendBoostagramRequestParams[], request_options?: Partial<RequestOptions>) {\n    let endpoint, request_body;\n    if (Array.isArray(args)) {\n      endpoint = \"/payments/keysend/multi\";\n      const keysends = args.map((b) => keysendParamsFromBoostagram(b));\n      request_body = { keysends };\n    } else {\n      endpoint = \"/payments/keysend\";\n      request_body = keysendParamsFromBoostagram(args);\n    }\n\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint,\n      request_body,\n      method: \"POST\",\n    });\n  }\n\n  sendToAlbyAccount(args: SendToAlbyRequestParams, request_options?: Partial<RequestOptions>) {\n    const params = {\n      destination: \"030a58b8653d32b99200a2334cfe913e51dc7d155aa0116c176657a4f1722677a3\",\n      customRecords: {\n        \"696969\": args.account,\n      },\n      amount: args.amount,\n      memo: args.memo,\n    };\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/payments/keysend`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n\n}\n","import { Client } from '../client';\nimport {\n  OAuthClient,\n  KeysendRequestParams,\n} from \"../types\";\n\ninterface RequestInvoiceArgs {\n  amount: string | number;\n  defaultMemo?: string;\n}\n\nconst isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nexport class OauthWeblnProvider {\n  client: Client;\n  auth: OAuthClient;\n  oauth: boolean;\n  subscribers: Record<string, (payload: any) => void>;\n  isExecuting: boolean;\n\n  constructor(options: { auth: OAuthClient }) {\n    this.auth = options.auth;\n    this.client = new Client(options.auth);\n    this.oauth = true;\n    this.subscribers = {};\n    this.isExecuting = false;\n  }\n\n  on(name: string, callback: () => void) {\n    this.subscribers[name] = callback;\n  }\n\n  notify(name: string, payload?: any) {\n    const callback = this.subscribers[name];\n    if (callback) {\n      callback(payload);\n    }\n  }\n\n  async enable() {\n    if (this.isExecuting) { return; }\n    if (this.auth.token?.access_token) {\n      return { enabled: true };\n    }\n    if (isBrowser()) {\n      try {\n        this.isExecuting = true;\n        const result = await this.openAuthorization();\n      } finally {\n        this.isExecuting = false;\n      }\n    } else {\n      throw new Error(\"Missing access token\");\n    }\n  }\n\n  async sendPayment(invoice: string) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.sendPayment({ invoice });\n      if (result.error) {\n        throw new Error(result.message);\n      }\n      this.notify('sendPayment', result);\n      return {\n        preimage: result.payment_preimage\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  async keysend(params: KeysendRequestParams) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.keysend(params);\n      if (result.error) {\n        throw new Error(result.message);\n      }\n      this.notify('keysend', result);\n      return {\n        preimage: result.payment_preimage\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  async getInfo() {\n    return {\n      alias: \"Alby\"\n    };\n  }\n\n  async makeInvoice(params: RequestInvoiceArgs) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.createInvoice({\n        amount: parseInt(params.amount.toString()),\n        description: params.defaultMemo\n      });\n      this.notify('makeInvoice', result);\n      return {\n        paymentRequest: result.payment_request\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  openAuthorization() {\n    const height = 700;\n    const width = 600;\n    const top = window.outerHeight / 2 + window.screenY - height / 2;\n    const left = window.outerWidth / 2 + window.screenX - width / 2;\n    const url = this.auth.generateAuthURL({ code_challenge_method: \"S256\" });\n\n    return new Promise((resolve, reject) => {\n      const popup = window.open(\n        url,\n        `${document.title} - WebLN enable`,\n        `height=${height},width=${width},top=${top},left=${left}`\n      );\n      let processingCode = false;\n      window.addEventListener('message', async (message) => {\n        const data = message.data;\n        if (data && data.type === 'alby:oauth:success' && message.origin === `${document.location.protocol}//${document.location.host}` && !processingCode) {\n          processingCode = true; // make sure we request the access token only once\n          console.info(\"Processing OAuth code response\");\n          const code = data.payload.code;\n          try {\n            await this.auth.requestAccessToken(code);\n            this.client = new Client(this.auth); // just to make sure we got a client with the correct auth and not the access token\n            if (popup) {\n              popup.close();\n            }\n            this.notify('enable');\n            resolve({ enabled: true });\n          } catch (e) {\n            console.error(e);\n            reject({ enabled: false });\n          }\n        }\n      });\n    });\n  }\n}\n","\nexport type SuccessStatus = 200 | 201;\nexport type ResponseType = \"application/json\";\n\nexport interface AuthHeader {\n  Authorization: string;\n}\n\nexport interface GetTokenResponse {\n  /** Allows an application to obtain a new access token without prompting the user via the refresh token flow. */\n  refresh_token?: string;\n  /** Access tokens are the token that applications use to make API requests on behalf of a user.  */\n  access_token?: string;\n  token_type?: string;\n  expires_in?: number;\n  /** Comma-separated list of scopes for the token  */\n  scope?: string;\n}\n\nexport interface Token extends Omit<GetTokenResponse, \"expires_in\"> {\n  /** Date that the access_token will expire at.  */\n  expires_at?: number;\n}\n\n\nexport type GenerateAuthUrlOptions =\n  | {\n      code_challenge_method?: string;\n      code_challenge?: string;\n    }\n  | {\n      /** A random string you provide to verify against CSRF attacks.  The length of this string can be up to 500 characters. */\n      state?: string;\n      /** Specifies the method you are using to make a request (S256 OR plain). */\n      code_challenge_method: \"S256\";\n    }\n  | {\n      /** A random string you provide to verify against CSRF attacks.  The length of this string can be up to 500 characters. */\n      state: string;\n      /** A PKCE parameter, a random secret for each request you make. */\n      code_challenge: string;\n      /** Specifies the method you are using to make a request (S256 OR plain). */\n      code_challenge_method?: \"plain\";\n    };\n\nexport abstract class OAuthClient implements AuthClient {\n  abstract token?: Token;\n  abstract generateAuthURL(options: GenerateAuthUrlOptions): string;\n  abstract requestAccessToken(code?: string): Promise<{ token: Token }>\n  abstract getAuthHeader(\n    url?: string,\n    method?: string\n  ): Promise<AuthHeader> | AuthHeader;\n}\n\nexport abstract class AuthClient {\n  abstract getAuthHeader(\n    url?: string,\n    method?: string\n  ): Promise<AuthHeader> | AuthHeader;\n}\n\n// https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<U> = (\n  U extends any ? (k: U) => void : never\n) extends (k: infer I) => void\n  ? I\n  : never;\n\nexport type GetSuccess<T> = {\n  [K in SuccessStatus & keyof T]: GetContent<T[K]>;\n}[SuccessStatus & keyof T];\n\nexport type AlbyResponse<T> = UnionToIntersection<ExtractAlbyResponse<T>>;\n\nexport type GetContent<T> = \"content\" extends keyof T\n  ? ResponseType extends keyof T[\"content\"]\n    ? T[\"content\"][ResponseType]\n    : never\n  : never;\n\nexport type ExtractAlbyResponse<T> = \"responses\" extends keyof T\n  ? GetSuccess<T[\"responses\"]>\n  : never;\n\nexport type InvoiceRequestParams = {\n  description?: string,\n  description_hash?: string,\n  amount: number,\n}\n\nexport type KeysendRequestParams = {\n  amount: number,\n  destination: string,\n  memo?: string,\n  customRecords?: Record<string, string>\n}\n\nexport type SendPaymentRequestParams = {\n  invoice: string,\n  amount?: number,\n}\n\nexport type SendBoostagramRequestParams = {\n  recipient: {\n    address: string,\n    customKey?: string,\n    customValue?: string,\n  },\n  boostagram: unknown,\n  amount: number,\n}\n\n\nexport type SendToAlbyRequestParams = {\n  account: string;\n  amount: number;\n  memo?: string;\n}\n\n"],"names":["buildQueryString","query","Object","entries","map","_ref","key","value","join","basicAuthHeader","client_id","client_secret","btoa","rest","args","Promise","resolve","request","response","json","auth","endpoint","params","_ref$params","request_body","method","max_retries","_ref$base_url","base_url","BASE_URL","headers","options","_objectWithoutPropertiesLoose","_excluded","authHeader","fetchWithRetries","url","toString","_extends","isPost","undefined","body","JSON","stringify","then","_temp","ok","error","AlbyResponseError","status","statusText","URL","search","getAuthHeader","href","e","reject","init","fetch","res","Number","get","rateLimitReset","Date","now","timeToWait","rateLimitRemaining","timeTillReset","setTimeout","_fetchWithRetries","_Error","_this","call","this","_wrapNativeSuper","Error","_excluded2","token","expires_in","expires_at","OAuth2User","code_verifier","code_challenge","defaultOptions","refreshAccessToken","refresh_token","_this2","_this2$token","_this2$options","request_options","grant_type","Authorization","data","processTokenResponse","isAccessTokenExpired","_this$token","_this$token2","requestAccessToken","code","_this4","_this4$options","callback","redirect_uri","generateAuthURL","console","log","code_challenge_method","_this$options","scopes","CryptoJS","lib","WordArray","random","SHA256","enc","Base64","replace","scope","response_type","_proto","_this6$token","_temp3","_this6","access_token","_temp4","OAuth2Bearer","bearer_token","prototype","NWCs","alby","authorizationUrl","relayUrl","walletPubkey","NostrWebLNProvider","relay","secret","subscribers","nostrWalletConnectUrl","parseWalletConnectUrl","providerOptions","_options","providerName","relayInit","toLowerCase","startsWith","nip19","decode","globalThis","WebSocket","walletConnectUrl","host","searchParams","withNewSecret","generatePrivateKey","on","name","notify","payload","getNostrWalletConnectUrl","includeSecret","publicKey","signEvent","event","_signEvent","getEventHash","_getEventHash","enable","connected","connect","close","encrypt","pubkey","content","nip04","decrypt","getInfo","methods","node","supports","version","sendPayment","invoice","_this7","checkConnected","encryptedCommand","kind","created_at","Math","floor","tags","id","sig","sub","kinds","authors","replyTimeoutCheck","unsub","clearTimeout","decryptedContent","_response$error","_response$error2","parse","result","_response$result","preimage","message","pub","publish","publishTimeoutCheck","reason","getAuthorizationUrl","set","returnTo","initNWC","document","location","top","window","outerHeight","screenY","height","left","outerWidth","screenX","width","open","title","popup","onMessage","type","origin","protocol","clearInterval","popupChecker","removeEventListener","setInterval","closed","addEventListener","getPublicKey","NWC","keysendParamsFromBoostagram","boostagramParams","customRecords","recipient","customKey","customValue","boostagram","destination","address","amount","Client","requestOptions","defaultRequestOptions","accountBalance","accountSummary","accountInformation","accountValue4Value","incomingInvoices","outgoingInvoices","getInvoice","paymentHash","createInvoice","keysend","Array","isArray","keysends","sendBoostagram","b","sendToAlbyAccount","account","memo","client","oauth","isExecuting","OauthWeblnProvider","_this2$auth$token","enabled","_temp2","_finallyRethrows","openAuthorization","_wasThrown","_result","_catch","payment_preimage","_wasThrown2","_result3","_wasThrown3","_result4","alias","makeInvoice","_this8","parseInt","description","defaultMemo","paymentRequest","payment_request","_wasThrown4","_result5","processingCode","_temp5","info","_this9"],"mappings":"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"}