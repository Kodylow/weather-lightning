{"version":3,"file":"index.module.js","sources":["../src/utils/MemoryStorage.ts","../src/lsat/fetch.ts","../src/podcasting2/boostagrams.ts","../src/utils/keysend.ts","../src/utils/lnurl.ts","../src/invoice.ts","../src/utils/invoice.ts","../src/utils/nostr.ts","../src/lightning-address.ts","../src/utils/fiat.ts"],"sourcesContent":["class MemoryStorage {\n  storage;\n\n  constructor(initial?: any) {\n    this.storage = initial || {};\n  }\n\n  getItem(key) {\n    return this.storage[key];\n  }\n\n  setItem(key, value) {\n    this.storage[key] = value;\n  }\n}\n\nexport default MemoryStorage;\n","import fetch from 'cross-fetch';\nimport MemoryStorage from \"../utils/MemoryStorage\";\nimport { WebLNProvider } from '@webbtc/webln-types';\n\nexport const fetchWithLsat = async (url: string, fetchArgs: Record<string, any>, options: Record<string, any>) => {\n  if (!options) {\n    options = {};\n  }\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!webln) {\n    throw new Error(\"WebLN is missing\");\n  }\n  let store = options.store || new MemoryStorage();\n  if (!fetchArgs) {\n    fetchArgs = {};\n  }\n  fetchArgs.cache = 'no-store';\n  fetchArgs.mode = 'cors';\n  if (!fetchArgs.headers) {\n    fetchArgs.headers = {};\n  }\n  const cachedLsatData = store.getItem(url);\n  if (cachedLsatData) {\n    const data = JSON.parse(cachedLsatData);\n    fetchArgs.headers[\"Authorization\"] = `LSAT ${data.mac}:${data.preimage}`;\n    return await fetch(url, fetchArgs)\n  }\n\n  fetchArgs.headers[\"Accept-Authenticate\"] = \"LSAT\";\n  const initResp = await fetch(url, fetchArgs);\n  const header = initResp.headers.get('www-authenticate');\n  if (!header) {\n    return initResp\n  }\n\n  const parts = header.split(\",\");\n  const mac = parts[0].replace(\"LSAT macaroon=\", \"\").trim();\n  const inv = parts[1].replace(\"invoice=\", \"\").trim();\n\n  await webln.enable();\n  const invResp = await webln.sendPayment(inv);\n\n  store.setItem(url, JSON.stringify({\n    'mac': mac,\n    'preimage': invResp.preimage\n  }));\n\n  fetchArgs.headers[\"Authorization\"] = `LSAT ${mac}:${invResp.preimage}`;\n  return await fetch(url, fetchArgs);\n}\n\nexport default fetchWithLsat;\n","import { WebLNProvider } from \"@webbtc/webln-types\";\n\ntype BoostOptions = {\n  webln?: unknown;\n}\n\ntype BoostArguments = {\n  destination: string\n  customKey?: string;\n  customValue?: string;\n  amount?: number;\n  boost: Boost;\n}\n\ntype WeblnBoostParams = {\n  destination: string;\n  amount: number;\n  customRecords: Record<string, string>;\n}\n\nexport type Boost = {\n  action: string;\n  value_msat: number;\n  value_msat_total: number;\n  app_name: string;\n  app_version: string;\n  feedId: string;\n  podcast: string;\n  episode: string;\n  ts: number;\n  name: string;\n  sender_name: string;\n}\n\nexport const boost = async (args: BoostArguments, options?: BoostOptions) => {\n  let { boost, amount } = args;\n  if (!options) {\n    options = {};\n  }\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!amount) {\n    amount = Math.floor(boost.value_msat / 1000);\n  }\n\n  let weblnParams: WeblnBoostParams = {\n    destination: args.destination,\n    amount: amount,\n    customRecords: {\n      '7629169': JSON.stringify(boost)\n    }\n  };\n  if (args.customKey && args.customValue) {\n    weblnParams.customRecords[args.customKey] = args.customValue;\n  }\n  await webln.enable();\n  const response = await webln.keysend(weblnParams);\n  return response;\n}\n\nexport default boost;\n","import type { KeysendResponse } from '../types'\n\nconst TAG_KEYSEND = 'keysend'\n\nexport const parseKeysendResponse = (\n  data: Record<string, any>\n): KeysendResponse => {\n  if (data.tag !== TAG_KEYSEND) throw new Error('Invalid keysend params')\n  if (data.status !== \"OK\") throw new Error('Keysend status not OK')\n\n  if (!('customKey' in data.customData[0]) || data.customData[0]['customKey'] != '696969')\n    throw new Error('Unable to find customKey');\n\n  if (!('customValue' in data.customData[0]) || !data.customData[0]['customValue'])\n    throw new Error('Unable to find customValue');\n\n  if (!data.pubkey)\n    throw new Error('Pubkey does not exist');\n\n  const destination =  data.pubkey;\n  const customKey = data.customData[0]['customKey'];\n  const customValue = data.customData[0]['customValue'];\n  \n  return {\n    destination,\n    customKey,\n    customValue\n  }\n}","import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\n\nimport type { LUD18ServicePayerData, LnUrlPayResponse } from '../types'\n\nconst URL_REGEX = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/;\n\nexport const isUrl = (url: string | null): url is string => {\n  if (!url) return false\n  return URL_REGEX.test(url)\n}\n\nexport const isValidAmount = ({\n  amount,\n  min,\n  max,\n}: {\n  amount: number\n  min: number\n  max: number\n}): boolean => {\n  const isValid = amount > 0 && amount >= min && amount <= max\n  const isFixed = min === max\n  return isValid && isFixed ? amount === min : isValid\n}\n\nconst TAG_PAY_REQUEST = 'payRequest'\n\n// From: https://github.com/dolcalmi/lnurl-pay/blob/main/src/request-pay-service-params.ts\nexport const parseLnUrlPayResponse = (\n  data: Record<string, any>\n): LnUrlPayResponse => {\n  if (data.tag !== TAG_PAY_REQUEST) throw new Error('Invalid pay service params')\n\n  const callback = (data.callback + '').trim();\n  if (!isUrl(callback)) throw new Error('Callback must be a valid url')\n\n  const min = Math.ceil(Number(data.minSendable || 0))\n  const max = Math.floor(Number(data.maxSendable))\n  if (!(min && max) || min > max) throw new Error('Invalid pay service params')\n\n  let metadata: Array<Array<string>>\n  let metadataHash: string\n  try {\n    metadata = JSON.parse(data.metadata + '')\n    metadataHash = sha256(data.metadata + '').toString(Hex)\n  } catch {\n    metadata = []\n    metadataHash = sha256('[]').toString(Hex)\n  }\n\n  let image = ''\n  let description = ''\n  let identifier = ''\n  for (let i = 0; i < metadata.length; i++) {\n    const [k, v] = metadata[i]\n    switch (k) {\n      case 'text/plain':\n        description = v\n        break\n      case 'text/identifier':\n        identifier = v\n        break\n      case 'image/png;base64':\n      case 'image/jpeg;base64':\n        image = 'data:' + k + ',' + v\n        break\n    }\n  }\n  let payerData = data.payerData as LUD18ServicePayerData | undefined;\n\n  let domain\n  try {\n    domain = new URL(callback).hostname\n  } catch {\n    // fail silently and let domain remain undefined if callback is not a valid URL\n  }\n\n  return {\n    callback,\n    fixed: min === max,\n    min,\n    max,\n    domain,\n    metadata,\n    metadataHash,\n    identifier,\n    description,\n    image,\n    payerData,\n    commentAllowed: Number(data.commentAllowed) || 0,\n    rawData: data,\n    allowsNostr: data.allowsNostr || false,\n  }\n}\n","import fetch from 'cross-fetch';\nimport { getHashFromInvoice } from \"./utils/invoice\";\nimport Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { InvoiceArgs } from './types';\n\nexport default class Invoice {\n  paymentRequest: string;\n  paymentHash: string;\n  preimage: string | null;\n  verify: string | null;\n\n  constructor(args: InvoiceArgs) {\n    this.paymentRequest = args.pr;\n    this.paymentHash = getHashFromInvoice(this.paymentRequest) as string;\n    this.verify = args.verify ?? null;\n    this.preimage = args.preimage ?? null;\n  }\n\n  async isPaid(): Promise<boolean> {\n    if (this.preimage)\n      return this.validatePreimage(this.preimage);\n    else if (this.verify) {\n      return await this.verifyPayment();\n    } else {\n      throw new Error('Could not verify payment');\n    }\n  }\n\n  validatePreimage(preimage: string): boolean {\n    if (!preimage || !this.paymentHash) return false\n  \n    try {\n      const preimageHash = sha256(Hex.parse(preimage)).toString(Hex)\n      return this.paymentHash === preimageHash\n    } catch {\n      return false\n    }\n  }\n\n  async verifyPayment(): Promise<boolean> {\n    if (!this.verify) throw new Error('LNURL verify not available');\n\n    const result = await fetch(this.verify);\n    const json = await result.json();\n    if (json.preimage) {\n      this.preimage = json.preimage;\n    }\n  \n    return json.settled;\n  }\n}","import { decode } from 'light-bolt11-decoder';\n\nexport const getHashFromInvoice = (invoice) => {\n  if (!invoice) return null\n\n  try {\n    const decoded = decode(invoice)\n    if (!decoded || !decoded.sections) return null\n\n    const hashTag = decoded.sections.find(\n      (value) => value.name === 'payment_hash'\n    )\n    if (!hashTag || !hashTag.value) return null\n\n    return hashTag.value.toString()\n  } catch {\n    return null\n  }\n}","import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { Event, NostrResponse, ZapArgs, ZapOptions } from '../types';\n\nexport async function generateZapEvent({\n  satoshi, comment, p, e, relays\n}: ZapArgs, options: ZapOptions = {}): Promise<Event> {\n  const nostr = options.nostr || globalThis.nostr;\n  if (!nostr) {\n    throw new Error(\"nostr option or window.nostr is not available\");\n  }\n\n  const nostrTags = [\n    [\"relays\", ...relays],\n    [\"amount\", satoshi.toString()]\n  ]\n  if (p) {\n    nostrTags.push([\"p\", p]);\n  }\n  if (e) {\n    nostrTags.push([\"e\", e])\n  }\n\n  const pubkey = await nostr.getPublicKey();\n\n  const nostrEvent: Event = {\n    pubkey,\n    created_at: Math.floor(Date.now() / 1000),\n    kind: 9734,\n    tags: nostrTags,\n    content: comment ?? \"\"\n  }\n\n  nostrEvent.id = getEventHash(nostrEvent)\n  return await nostr.signEvent(nostrEvent)\n}\n\nexport function validateEvent(event: Event): boolean {\n  if (typeof event.content !== \"string\") return false;\n  if (typeof event.created_at !== \"number\") return false;\n  // ignore these checks because if the pubkey is not set we add it to the event. same for the ID.\n  // if (typeof event.pubkey !== \"string\") return false;\n  // if (!event.pubkey.match(/^[a-f0-9]{64}$/)) return false;\n\n  if (!Array.isArray(event.tags)) return false;\n  for (let i = 0; i < event.tags.length; i++) {\n    const tag = event.tags[i];\n    if (!Array.isArray(tag)) return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\") return false;\n    }\n  }\n\n  return true;\n}\n\nexport function serializeEvent(evt: Event): string {\n  if (!validateEvent(evt))\n    throw new Error(\"can't serialize event with wrong or missing properties\");\n\n  return JSON.stringify([\n    0,\n    evt.pubkey,\n    evt.created_at,\n    evt.kind,\n    evt.tags,\n    evt.content,\n  ]);\n}\n\nexport function getEventHash(event: Event): string {\n  return sha256(serializeEvent(event)).toString(Hex);\n}\n\nexport function parseNostrResponse(nostrData: NostrResponse, username: string | undefined) {\n  let nostrPubkey: string | undefined;\n  let nostrRelays: string[] | undefined;\n  if (username && nostrData) {\n    nostrPubkey = nostrData.names?.[username];\n    nostrRelays = nostrPubkey ? nostrData.relays?.[nostrPubkey] : undefined;\n  }\n\n  return [nostrData, nostrPubkey, nostrRelays] as const;\n}","import fetch from 'cross-fetch';\nimport { parseKeysendResponse } from './utils/keysend';\nimport { isUrl, isValidAmount, parseLnUrlPayResponse } from './utils/lnurl';\nimport Invoice from './invoice';\nimport { InvoiceArgs, LnUrlPayResponse, NostrResponse, RequestInvoiceArgs, ZapArgs, ZapOptions } from './types';\nimport { generateZapEvent, parseNostrResponse } from './utils/nostr';\nimport type { Boost } from './podcasting2/boostagrams';\nimport { boost as booster } from './podcasting2/boostagrams';\nimport { WebLNProvider, SendPaymentResponse } from \"@webbtc/webln-types\";\nimport { KeysendResponse } from './types';\n\nconst LN_ADDRESS_REGEX =\n  /^((?:[^<>()\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@((?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport const DEFAULT_PROXY = \"https://lnaddressproxy.getalby.com\";\n\ntype LightningAddressOptions = {\n  proxy?: string | false;\n  webln?: WebLNProvider;\n}\n\nexport default class LightningAddress {\n  address: string;\n  options: LightningAddressOptions;\n  username: string | undefined;\n  domain: string | undefined;\n  pubkey: string | undefined;\n  lnurlpData: LnUrlPayResponse | undefined;\n  keysendData: KeysendResponse | undefined;\n  nostrData: NostrResponse | undefined;\n  nostrPubkey: string | undefined;\n  nostrRelays: string[] | undefined;\n  webln: WebLNProvider | undefined;\n\n  constructor(address: string, options?: LightningAddressOptions) {\n    this.address = address;\n    this.options = { proxy: DEFAULT_PROXY, webln: globalThis.webln };\n    this.options = Object.assign(this.options, options);\n    this.parse();\n    this.webln = this.options.webln;\n  }\n\n  parse() {\n    const result = LN_ADDRESS_REGEX.exec(this.address.toLowerCase());\n    if (result) {\n      this.username = result[1];\n      this.domain = result[2];\n    }\n  }\n\n  async fetch() {\n    if (this.options.proxy) {\n      return this.fetchWithProxy();\n    } else {\n      return this.fetchWithoutProxy();\n    }\n  }\n\n  async fetchWithProxy() {\n    const result = await fetch(`${this.options.proxy}/lightning-address-details?${new URLSearchParams({ ln: this.address }).toString()}`);\n    const json = await result.json();\n\n    this.parseResponse(json.lnurlp, json.keysend, json.nostr);\n  }\n\n  async fetchWithoutProxy() {\n    if (!this.domain || !this.username) {\n      return;\n    }\n    const lnurlResult = await fetch(this.lnurlpUrl());\n    const keysendResult = await fetch(this.keysendUrl());\n    const nostrResult = await fetch(this.nostrUrl());\n\n    let lnurlData: Record<string, string> | undefined;\n    if (lnurlResult.ok) {\n      lnurlData = await lnurlResult.json();\n    } \n    let keysendData: Record<string, string> | undefined;\n    if (keysendResult.ok) {\n      keysendData = await keysendResult.json();\n    } \n    let nostrData: NostrResponse | undefined;\n    if (nostrResult.ok) {\n      nostrData = await nostrResult.json();\n    } \n    \n    this.parseResponse(lnurlData, keysendData, nostrData);\n  }\n\n  lnurlpUrl() {\n    return `https://${this.domain}/.well-known/lnurlp/${this.username}`;\n  }\n\n  keysendUrl() {\n    return `https://${this.domain}/.well-known/keysend/${this.username}`;\n  }\n\n  nostrUrl() {\n    return `https://${this.domain}/.well-known/nostr.json?name=${this.username}`;\n  }\n\n  async generateInvoice(params: Record<string, string>): Promise<Invoice> {\n    let data;\n    if (this.options.proxy) {\n      const invoiceResult = await fetch(`${this.options.proxy}/generate-invoice?${new URLSearchParams({ ln: this.address, ...params }).toString()}`);\n      const json = await invoiceResult.json();\n      data = json.invoice;\n    } else {\n      if (!this.lnurlpData) {\n        throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n      }\n      if (!this.lnurlpData.callback || !isUrl(this.lnurlpData.callback)) throw new Error('Valid callback does not exist in lnurlpData')\n      const callbackUrl = new URL(this.lnurlpData.callback)\n      callbackUrl.search = new URLSearchParams(params).toString()\n      const invoiceResult = await fetch(callbackUrl);\n      data = await invoiceResult.json();\n    }\n\n    const paymentRequest = data && data.pr && data.pr.toString();\n    if (!paymentRequest) throw new Error('Invalid pay service invoice')\n\n    const invoiceArgs: InvoiceArgs = { pr: paymentRequest };\n    if (data && data.verify) invoiceArgs.verify = data.verify.toString();\n\n    return new Invoice(invoiceArgs);\n  }\n\n  async requestInvoice(args: RequestInvoiceArgs): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    const msat = args.satoshi * 1000;\n    const { commentAllowed, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (args.comment && commentAllowed && commentAllowed > 0 && args.comment.length > commentAllowed)\n      throw new Error(\n        `The comment length must be ${commentAllowed} characters or fewer`\n      )\n\n    const invoiceParams: { amount: string, comment?: string, payerdata?: string } = { amount: msat.toString() };\n    if (args.comment) invoiceParams.comment = args.comment\n    if (args.payerdata) invoiceParams.payerdata = JSON.stringify(args.payerdata)\n\n    return this.generateInvoice(invoiceParams);\n  }\n\n  async boost(boost: Boost, amount: number = 0) {\n    if (!this.keysendData) {\n      throw new Error(\"No keysendData available. Please call fetch() first.\")\n    }\n    const { destination, customKey, customValue } = this.keysendData;\n    return booster({\n      destination,\n      customKey,\n      customValue,\n      amount,\n      boost,\n    }, {\n      webln: this.webln,\n    })\n  }\n\n  async zapInvoice({\n    satoshi, comment, relays, e\n  }: ZapArgs, options: ZapOptions = {}): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    if (!this.nostrPubkey) {\n      throw new Error(\"Nostr Pubkey is missing\");\n    }\n    const p = this.nostrPubkey;\n    const msat = satoshi * 1000;\n    const { allowsNostr, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (!allowsNostr) throw new Error('Your provider does not support zaps')\n\n    const event = await generateZapEvent({\n      satoshi: msat, comment, p, e, relays\n    }, options);\n    const zapParams: { amount: string, nostr: string } = {\n      amount: msat.toString(),\n      nostr: JSON.stringify(event)\n    };\n\n    const invoice = await this.generateInvoice(zapParams);\n    return invoice;\n  }\n\n  async zap(args: ZapArgs, options: ZapOptions = {}): Promise<SendPaymentResponse> {\n    const invoice = this.zapInvoice(args, options);\n    if (!this.webln) {\n      // mainly for TS\n      throw new Error(\"WebLN not available\");\n    }\n    await this.webln.enable();\n    const response = this.webln.sendPayment((await invoice).paymentRequest);\n    return response;\n  }\n\n  private parseResponse(lnurlpData: Record<string, string> | undefined, keysendData: Record<string, string> | undefined, nostrData: NostrResponse | undefined) {\n    if (lnurlpData) {\n      this.lnurlpData = parseLnUrlPayResponse(lnurlpData);\n    }\n    if (keysendData) {\n      this.keysendData = parseKeysendResponse(keysendData);\n    }\n    if (nostrData) {\n      [this.nostrData, this.nostrPubkey, this.nostrRelays] = parseNostrResponse(nostrData, this.username);\n    }\n  }\n}\n","import fetch from 'cross-fetch';\n\nconst numSatsInBtc = 100_000_000;\n\nexport const getFiatBtcRate = async (currency: string): Promise<number> => {\n  const url = \"https://getalby.com/api/rates/\" + currency.toLowerCase() + \".json\";\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data.rate_float / numSatsInBtc;\n};\n\nexport const getFiatValue = async ({ satoshi, currency }: { satoshi: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Number(satoshi) * rate;\n};\n\nexport const getSatoshiValue = async ({ amount, currency }: { amount: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Math.floor(Number(amount) / rate);\n}\n\nexport const getFormattedFiatValue = async ({ satoshi, currency, locale }: { satoshi: number | string; currency: string; locale: string }) => {\n  if (!locale) {\n    locale = 'en';\n  }\n  const fiatValue = await getFiatValue({ satoshi, currency });\n  return fiatValue.toLocaleString(locale, {\n    style: \"currency\",\n    currency,\n  });\n}"],"names":["MemoryStorage","initial","storage","this","getItem","key","_proto","setItem","value","fetchWithLsat","url","fetchArgs","options","_exit2","_temp3","_result","headers","Promise","resolve","fetch","then","initResp","header","get","parts","split","mac","replace","trim","inv","webln","enable","sendPayment","invResp","store","JSON","stringify","preimage","globalThis","cache","mode","cachedLsatData","data","parse","_await$fetch","_temp4","e","reject","boost","args","amount","Math","floor","value_msat","weblnParams","destination","customRecords","customKey","customValue","keysend","URL_REGEX","isUrl","test","isValidAmount","_ref","min","max","isValid","Invoice","paymentRequest","paymentHash","verify","pr","invoice","decoded","decode","sections","hashTag","find","name","toString","_unused","getHashFromInvoice","_args$preimage","prototype","isPaid","_this2","validatePreimage","verifyPayment","Error","preimageHash","sha256","Hex","_this4","result","json","settled","generateZapEvent","satoshi","comment","p","relays","nostr","nostrTags","concat","push","getPublicKey","pubkey","nostrEvent","created_at","Date","now","kind","tags","content","id","getEventHash","signEvent","event","Array","isArray","i","length","tag","j","serializeEvent","evt","validateEvent","parseNostrResponse","nostrData","username","nostrPubkey","nostrRelays","_nostrData$names","names","_nostrData$relays","undefined","LN_ADDRESS_REGEX","LightningAddress","address","domain","lnurlpData","keysendData","proxy","Object","assign","exec","toLowerCase","fetchWithProxy","fetchWithoutProxy","URLSearchParams","ln","parseResponse","lnurlp","_this6","lnurlpUrl","lnurlResult","keysendUrl","keysendResult","nostrUrl","nostrResult","_temp6","_temp2","lnurlData","ok","_nostrResult$json","_temp","_lnurlResult$json","_temp5","generateInvoice","params","_temp9","invoiceArgs","_this8","_temp10","invoiceResult","callback","callbackUrl","URL","search","_invoiceResult$json","requestInvoice","_this10","msat","_this10$lnurlpData","commentAllowed","invoiceParams","payerdata","_this12","_this12$keysendData","booster","zapInvoice","_this14","_this14$lnurlpData","allowsNostr","zapParams","zap","_this16","_this15$webln","_invoice","_sendPayment","call","metadataHash","ceil","Number","minSendable","maxSendable","metadata","image","description","identifier","_metadata$i","k","v","payerData","hostname","fixed","rawData","parseLnUrlPayResponse","status","customData","parseKeysendResponse","_parseNostrResponse","getFiatBtcRate","currency","response","rate_float","getFiatValue","rate","_ref2","_ref3","locale","fiatValue","toLocaleString","style"],"mappings":"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"}