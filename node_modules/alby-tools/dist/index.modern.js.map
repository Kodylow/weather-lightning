{"version":3,"file":"index.modern.js","sources":["../src/utils/MemoryStorage.ts","../src/lsat/fetch.ts","../src/podcasting2/boostagrams.ts","../src/utils/keysend.ts","../src/utils/lnurl.ts","../src/invoice.ts","../src/utils/invoice.ts","../src/utils/nostr.ts","../src/lightning-address.ts","../src/utils/fiat.ts"],"sourcesContent":["class MemoryStorage {\n  storage;\n\n  constructor(initial?: any) {\n    this.storage = initial || {};\n  }\n\n  getItem(key) {\n    return this.storage[key];\n  }\n\n  setItem(key, value) {\n    this.storage[key] = value;\n  }\n}\n\nexport default MemoryStorage;\n","import fetch from 'cross-fetch';\nimport MemoryStorage from \"../utils/MemoryStorage\";\nimport { WebLNProvider } from '@webbtc/webln-types';\n\nexport const fetchWithLsat = async (url: string, fetchArgs: Record<string, any>, options: Record<string, any>) => {\n  if (!options) {\n    options = {};\n  }\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!webln) {\n    throw new Error(\"WebLN is missing\");\n  }\n  let store = options.store || new MemoryStorage();\n  if (!fetchArgs) {\n    fetchArgs = {};\n  }\n  fetchArgs.cache = 'no-store';\n  fetchArgs.mode = 'cors';\n  if (!fetchArgs.headers) {\n    fetchArgs.headers = {};\n  }\n  const cachedLsatData = store.getItem(url);\n  if (cachedLsatData) {\n    const data = JSON.parse(cachedLsatData);\n    fetchArgs.headers[\"Authorization\"] = `LSAT ${data.mac}:${data.preimage}`;\n    return await fetch(url, fetchArgs)\n  }\n\n  fetchArgs.headers[\"Accept-Authenticate\"] = \"LSAT\";\n  const initResp = await fetch(url, fetchArgs);\n  const header = initResp.headers.get('www-authenticate');\n  if (!header) {\n    return initResp\n  }\n\n  const parts = header.split(\",\");\n  const mac = parts[0].replace(\"LSAT macaroon=\", \"\").trim();\n  const inv = parts[1].replace(\"invoice=\", \"\").trim();\n\n  await webln.enable();\n  const invResp = await webln.sendPayment(inv);\n\n  store.setItem(url, JSON.stringify({\n    'mac': mac,\n    'preimage': invResp.preimage\n  }));\n\n  fetchArgs.headers[\"Authorization\"] = `LSAT ${mac}:${invResp.preimage}`;\n  return await fetch(url, fetchArgs);\n}\n\nexport default fetchWithLsat;\n","import { WebLNProvider } from \"@webbtc/webln-types\";\n\ntype BoostOptions = {\n  webln?: unknown;\n}\n\ntype BoostArguments = {\n  destination: string\n  customKey?: string;\n  customValue?: string;\n  amount?: number;\n  boost: Boost;\n}\n\ntype WeblnBoostParams = {\n  destination: string;\n  amount: number;\n  customRecords: Record<string, string>;\n}\n\nexport type Boost = {\n  action: string;\n  value_msat: number;\n  value_msat_total: number;\n  app_name: string;\n  app_version: string;\n  feedId: string;\n  podcast: string;\n  episode: string;\n  ts: number;\n  name: string;\n  sender_name: string;\n}\n\nexport const boost = async (args: BoostArguments, options?: BoostOptions) => {\n  let { boost, amount } = args;\n  if (!options) {\n    options = {};\n  }\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!amount) {\n    amount = Math.floor(boost.value_msat / 1000);\n  }\n\n  let weblnParams: WeblnBoostParams = {\n    destination: args.destination,\n    amount: amount,\n    customRecords: {\n      '7629169': JSON.stringify(boost)\n    }\n  };\n  if (args.customKey && args.customValue) {\n    weblnParams.customRecords[args.customKey] = args.customValue;\n  }\n  await webln.enable();\n  const response = await webln.keysend(weblnParams);\n  return response;\n}\n\nexport default boost;\n","import type { KeysendResponse } from '../types'\n\nconst TAG_KEYSEND = 'keysend'\n\nexport const parseKeysendResponse = (\n  data: Record<string, any>\n): KeysendResponse => {\n  if (data.tag !== TAG_KEYSEND) throw new Error('Invalid keysend params')\n  if (data.status !== \"OK\") throw new Error('Keysend status not OK')\n\n  if (!('customKey' in data.customData[0]) || data.customData[0]['customKey'] != '696969')\n    throw new Error('Unable to find customKey');\n\n  if (!('customValue' in data.customData[0]) || !data.customData[0]['customValue'])\n    throw new Error('Unable to find customValue');\n\n  if (!data.pubkey)\n    throw new Error('Pubkey does not exist');\n\n  const destination =  data.pubkey;\n  const customKey = data.customData[0]['customKey'];\n  const customValue = data.customData[0]['customValue'];\n  \n  return {\n    destination,\n    customKey,\n    customValue\n  }\n}","import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\n\nimport type { LUD18ServicePayerData, LnUrlPayResponse } from '../types'\n\nconst URL_REGEX = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/;\n\nexport const isUrl = (url: string | null): url is string => {\n  if (!url) return false\n  return URL_REGEX.test(url)\n}\n\nexport const isValidAmount = ({\n  amount,\n  min,\n  max,\n}: {\n  amount: number\n  min: number\n  max: number\n}): boolean => {\n  const isValid = amount > 0 && amount >= min && amount <= max\n  const isFixed = min === max\n  return isValid && isFixed ? amount === min : isValid\n}\n\nconst TAG_PAY_REQUEST = 'payRequest'\n\n// From: https://github.com/dolcalmi/lnurl-pay/blob/main/src/request-pay-service-params.ts\nexport const parseLnUrlPayResponse = (\n  data: Record<string, any>\n): LnUrlPayResponse => {\n  if (data.tag !== TAG_PAY_REQUEST) throw new Error('Invalid pay service params')\n\n  const callback = (data.callback + '').trim();\n  if (!isUrl(callback)) throw new Error('Callback must be a valid url')\n\n  const min = Math.ceil(Number(data.minSendable || 0))\n  const max = Math.floor(Number(data.maxSendable))\n  if (!(min && max) || min > max) throw new Error('Invalid pay service params')\n\n  let metadata: Array<Array<string>>\n  let metadataHash: string\n  try {\n    metadata = JSON.parse(data.metadata + '')\n    metadataHash = sha256(data.metadata + '').toString(Hex)\n  } catch {\n    metadata = []\n    metadataHash = sha256('[]').toString(Hex)\n  }\n\n  let image = ''\n  let description = ''\n  let identifier = ''\n  for (let i = 0; i < metadata.length; i++) {\n    const [k, v] = metadata[i]\n    switch (k) {\n      case 'text/plain':\n        description = v\n        break\n      case 'text/identifier':\n        identifier = v\n        break\n      case 'image/png;base64':\n      case 'image/jpeg;base64':\n        image = 'data:' + k + ',' + v\n        break\n    }\n  }\n  let payerData = data.payerData as LUD18ServicePayerData | undefined;\n\n  let domain\n  try {\n    domain = new URL(callback).hostname\n  } catch {\n    // fail silently and let domain remain undefined if callback is not a valid URL\n  }\n\n  return {\n    callback,\n    fixed: min === max,\n    min,\n    max,\n    domain,\n    metadata,\n    metadataHash,\n    identifier,\n    description,\n    image,\n    payerData,\n    commentAllowed: Number(data.commentAllowed) || 0,\n    rawData: data,\n    allowsNostr: data.allowsNostr || false,\n  }\n}\n","import fetch from 'cross-fetch';\nimport { getHashFromInvoice } from \"./utils/invoice\";\nimport Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { InvoiceArgs } from './types';\n\nexport default class Invoice {\n  paymentRequest: string;\n  paymentHash: string;\n  preimage: string | null;\n  verify: string | null;\n\n  constructor(args: InvoiceArgs) {\n    this.paymentRequest = args.pr;\n    this.paymentHash = getHashFromInvoice(this.paymentRequest) as string;\n    this.verify = args.verify ?? null;\n    this.preimage = args.preimage ?? null;\n  }\n\n  async isPaid(): Promise<boolean> {\n    if (this.preimage)\n      return this.validatePreimage(this.preimage);\n    else if (this.verify) {\n      return await this.verifyPayment();\n    } else {\n      throw new Error('Could not verify payment');\n    }\n  }\n\n  validatePreimage(preimage: string): boolean {\n    if (!preimage || !this.paymentHash) return false\n  \n    try {\n      const preimageHash = sha256(Hex.parse(preimage)).toString(Hex)\n      return this.paymentHash === preimageHash\n    } catch {\n      return false\n    }\n  }\n\n  async verifyPayment(): Promise<boolean> {\n    if (!this.verify) throw new Error('LNURL verify not available');\n\n    const result = await fetch(this.verify);\n    const json = await result.json();\n    if (json.preimage) {\n      this.preimage = json.preimage;\n    }\n  \n    return json.settled;\n  }\n}","import { decode } from 'light-bolt11-decoder';\n\nexport const getHashFromInvoice = (invoice) => {\n  if (!invoice) return null\n\n  try {\n    const decoded = decode(invoice)\n    if (!decoded || !decoded.sections) return null\n\n    const hashTag = decoded.sections.find(\n      (value) => value.name === 'payment_hash'\n    )\n    if (!hashTag || !hashTag.value) return null\n\n    return hashTag.value.toString()\n  } catch {\n    return null\n  }\n}","import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { Event, NostrResponse, ZapArgs, ZapOptions } from '../types';\n\nexport async function generateZapEvent({\n  satoshi, comment, p, e, relays\n}: ZapArgs, options: ZapOptions = {}): Promise<Event> {\n  const nostr = options.nostr || globalThis.nostr;\n  if (!nostr) {\n    throw new Error(\"nostr option or window.nostr is not available\");\n  }\n\n  const nostrTags = [\n    [\"relays\", ...relays],\n    [\"amount\", satoshi.toString()]\n  ]\n  if (p) {\n    nostrTags.push([\"p\", p]);\n  }\n  if (e) {\n    nostrTags.push([\"e\", e])\n  }\n\n  const pubkey = await nostr.getPublicKey();\n\n  const nostrEvent: Event = {\n    pubkey,\n    created_at: Math.floor(Date.now() / 1000),\n    kind: 9734,\n    tags: nostrTags,\n    content: comment ?? \"\"\n  }\n\n  nostrEvent.id = getEventHash(nostrEvent)\n  return await nostr.signEvent(nostrEvent)\n}\n\nexport function validateEvent(event: Event): boolean {\n  if (typeof event.content !== \"string\") return false;\n  if (typeof event.created_at !== \"number\") return false;\n  // ignore these checks because if the pubkey is not set we add it to the event. same for the ID.\n  // if (typeof event.pubkey !== \"string\") return false;\n  // if (!event.pubkey.match(/^[a-f0-9]{64}$/)) return false;\n\n  if (!Array.isArray(event.tags)) return false;\n  for (let i = 0; i < event.tags.length; i++) {\n    const tag = event.tags[i];\n    if (!Array.isArray(tag)) return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\") return false;\n    }\n  }\n\n  return true;\n}\n\nexport function serializeEvent(evt: Event): string {\n  if (!validateEvent(evt))\n    throw new Error(\"can't serialize event with wrong or missing properties\");\n\n  return JSON.stringify([\n    0,\n    evt.pubkey,\n    evt.created_at,\n    evt.kind,\n    evt.tags,\n    evt.content,\n  ]);\n}\n\nexport function getEventHash(event: Event): string {\n  return sha256(serializeEvent(event)).toString(Hex);\n}\n\nexport function parseNostrResponse(nostrData: NostrResponse, username: string | undefined) {\n  let nostrPubkey: string | undefined;\n  let nostrRelays: string[] | undefined;\n  if (username && nostrData) {\n    nostrPubkey = nostrData.names?.[username];\n    nostrRelays = nostrPubkey ? nostrData.relays?.[nostrPubkey] : undefined;\n  }\n\n  return [nostrData, nostrPubkey, nostrRelays] as const;\n}","import fetch from 'cross-fetch';\nimport { parseKeysendResponse } from './utils/keysend';\nimport { isUrl, isValidAmount, parseLnUrlPayResponse } from './utils/lnurl';\nimport Invoice from './invoice';\nimport { InvoiceArgs, LnUrlPayResponse, NostrResponse, RequestInvoiceArgs, ZapArgs, ZapOptions } from './types';\nimport { generateZapEvent, parseNostrResponse } from './utils/nostr';\nimport type { Boost } from './podcasting2/boostagrams';\nimport { boost as booster } from './podcasting2/boostagrams';\nimport { WebLNProvider, SendPaymentResponse } from \"@webbtc/webln-types\";\nimport { KeysendResponse } from './types';\n\nconst LN_ADDRESS_REGEX =\n  /^((?:[^<>()\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@((?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport const DEFAULT_PROXY = \"https://lnaddressproxy.getalby.com\";\n\ntype LightningAddressOptions = {\n  proxy?: string | false;\n  webln?: WebLNProvider;\n}\n\nexport default class LightningAddress {\n  address: string;\n  options: LightningAddressOptions;\n  username: string | undefined;\n  domain: string | undefined;\n  pubkey: string | undefined;\n  lnurlpData: LnUrlPayResponse | undefined;\n  keysendData: KeysendResponse | undefined;\n  nostrData: NostrResponse | undefined;\n  nostrPubkey: string | undefined;\n  nostrRelays: string[] | undefined;\n  webln: WebLNProvider | undefined;\n\n  constructor(address: string, options?: LightningAddressOptions) {\n    this.address = address;\n    this.options = { proxy: DEFAULT_PROXY, webln: globalThis.webln };\n    this.options = Object.assign(this.options, options);\n    this.parse();\n    this.webln = this.options.webln;\n  }\n\n  parse() {\n    const result = LN_ADDRESS_REGEX.exec(this.address.toLowerCase());\n    if (result) {\n      this.username = result[1];\n      this.domain = result[2];\n    }\n  }\n\n  async fetch() {\n    if (this.options.proxy) {\n      return this.fetchWithProxy();\n    } else {\n      return this.fetchWithoutProxy();\n    }\n  }\n\n  async fetchWithProxy() {\n    const result = await fetch(`${this.options.proxy}/lightning-address-details?${new URLSearchParams({ ln: this.address }).toString()}`);\n    const json = await result.json();\n\n    this.parseResponse(json.lnurlp, json.keysend, json.nostr);\n  }\n\n  async fetchWithoutProxy() {\n    if (!this.domain || !this.username) {\n      return;\n    }\n    const lnurlResult = await fetch(this.lnurlpUrl());\n    const keysendResult = await fetch(this.keysendUrl());\n    const nostrResult = await fetch(this.nostrUrl());\n\n    let lnurlData: Record<string, string> | undefined;\n    if (lnurlResult.ok) {\n      lnurlData = await lnurlResult.json();\n    } \n    let keysendData: Record<string, string> | undefined;\n    if (keysendResult.ok) {\n      keysendData = await keysendResult.json();\n    } \n    let nostrData: NostrResponse | undefined;\n    if (nostrResult.ok) {\n      nostrData = await nostrResult.json();\n    } \n    \n    this.parseResponse(lnurlData, keysendData, nostrData);\n  }\n\n  lnurlpUrl() {\n    return `https://${this.domain}/.well-known/lnurlp/${this.username}`;\n  }\n\n  keysendUrl() {\n    return `https://${this.domain}/.well-known/keysend/${this.username}`;\n  }\n\n  nostrUrl() {\n    return `https://${this.domain}/.well-known/nostr.json?name=${this.username}`;\n  }\n\n  async generateInvoice(params: Record<string, string>): Promise<Invoice> {\n    let data;\n    if (this.options.proxy) {\n      const invoiceResult = await fetch(`${this.options.proxy}/generate-invoice?${new URLSearchParams({ ln: this.address, ...params }).toString()}`);\n      const json = await invoiceResult.json();\n      data = json.invoice;\n    } else {\n      if (!this.lnurlpData) {\n        throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n      }\n      if (!this.lnurlpData.callback || !isUrl(this.lnurlpData.callback)) throw new Error('Valid callback does not exist in lnurlpData')\n      const callbackUrl = new URL(this.lnurlpData.callback)\n      callbackUrl.search = new URLSearchParams(params).toString()\n      const invoiceResult = await fetch(callbackUrl);\n      data = await invoiceResult.json();\n    }\n\n    const paymentRequest = data && data.pr && data.pr.toString();\n    if (!paymentRequest) throw new Error('Invalid pay service invoice')\n\n    const invoiceArgs: InvoiceArgs = { pr: paymentRequest };\n    if (data && data.verify) invoiceArgs.verify = data.verify.toString();\n\n    return new Invoice(invoiceArgs);\n  }\n\n  async requestInvoice(args: RequestInvoiceArgs): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    const msat = args.satoshi * 1000;\n    const { commentAllowed, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (args.comment && commentAllowed && commentAllowed > 0 && args.comment.length > commentAllowed)\n      throw new Error(\n        `The comment length must be ${commentAllowed} characters or fewer`\n      )\n\n    const invoiceParams: { amount: string, comment?: string, payerdata?: string } = { amount: msat.toString() };\n    if (args.comment) invoiceParams.comment = args.comment\n    if (args.payerdata) invoiceParams.payerdata = JSON.stringify(args.payerdata)\n\n    return this.generateInvoice(invoiceParams);\n  }\n\n  async boost(boost: Boost, amount: number = 0) {\n    if (!this.keysendData) {\n      throw new Error(\"No keysendData available. Please call fetch() first.\")\n    }\n    const { destination, customKey, customValue } = this.keysendData;\n    return booster({\n      destination,\n      customKey,\n      customValue,\n      amount,\n      boost,\n    }, {\n      webln: this.webln,\n    })\n  }\n\n  async zapInvoice({\n    satoshi, comment, relays, e\n  }: ZapArgs, options: ZapOptions = {}): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    if (!this.nostrPubkey) {\n      throw new Error(\"Nostr Pubkey is missing\");\n    }\n    const p = this.nostrPubkey;\n    const msat = satoshi * 1000;\n    const { allowsNostr, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (!allowsNostr) throw new Error('Your provider does not support zaps')\n\n    const event = await generateZapEvent({\n      satoshi: msat, comment, p, e, relays\n    }, options);\n    const zapParams: { amount: string, nostr: string } = {\n      amount: msat.toString(),\n      nostr: JSON.stringify(event)\n    };\n\n    const invoice = await this.generateInvoice(zapParams);\n    return invoice;\n  }\n\n  async zap(args: ZapArgs, options: ZapOptions = {}): Promise<SendPaymentResponse> {\n    const invoice = this.zapInvoice(args, options);\n    if (!this.webln) {\n      // mainly for TS\n      throw new Error(\"WebLN not available\");\n    }\n    await this.webln.enable();\n    const response = this.webln.sendPayment((await invoice).paymentRequest);\n    return response;\n  }\n\n  private parseResponse(lnurlpData: Record<string, string> | undefined, keysendData: Record<string, string> | undefined, nostrData: NostrResponse | undefined) {\n    if (lnurlpData) {\n      this.lnurlpData = parseLnUrlPayResponse(lnurlpData);\n    }\n    if (keysendData) {\n      this.keysendData = parseKeysendResponse(keysendData);\n    }\n    if (nostrData) {\n      [this.nostrData, this.nostrPubkey, this.nostrRelays] = parseNostrResponse(nostrData, this.username);\n    }\n  }\n}\n","import fetch from 'cross-fetch';\n\nconst numSatsInBtc = 100_000_000;\n\nexport const getFiatBtcRate = async (currency: string): Promise<number> => {\n  const url = \"https://getalby.com/api/rates/\" + currency.toLowerCase() + \".json\";\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data.rate_float / numSatsInBtc;\n};\n\nexport const getFiatValue = async ({ satoshi, currency }: { satoshi: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Number(satoshi) * rate;\n};\n\nexport const getSatoshiValue = async ({ amount, currency }: { amount: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Math.floor(Number(amount) / rate);\n}\n\nexport const getFormattedFiatValue = async ({ satoshi, currency, locale }: { satoshi: number | string; currency: string; locale: string }) => {\n  if (!locale) {\n    locale = 'en';\n  }\n  const fiatValue = await getFiatValue({ satoshi, currency });\n  return fiatValue.toLocaleString(locale, {\n    style: \"currency\",\n    currency,\n  });\n}"],"names":["MemoryStorage","constructor","initial","this","storage","getItem","key","setItem","value","fetchWithLsat","async","url","fetchArgs","options","webln","globalThis","Error","store","cache","mode","headers","cachedLsatData","data","JSON","parse","mac","preimage","initResp","fetch","header","get","parts","split","replace","trim","inv","enable","invResp","sendPayment","stringify","boost","args","amount","Math","floor","value_msat","weblnParams","destination","customRecords","customKey","customValue","keysend","response","test","isValidAmount","min","max","isValid","Invoice","paymentRequest","paymentHash","verify","pr","invoice","decode","decoded","sections","hashTag","find","name","toString","_unused","getHashFromInvoice","_args$verify","_args$preimage","validatePreimage","verifyPayment","preimageHash","sha256","Hex","result","json","settled","generateZapEvent","satoshi","comment","p","e","relays","nostr","nostrTags","push","nostrEvent","pubkey","getPublicKey","created_at","Date","now","kind","tags","content","id","getEventHash","signEvent","event","Array","isArray","i","length","tag","j","serializeEvent","evt","validateEvent","nostrData","username","nostrPubkey","nostrRelays","_nostrData$names","_nostrData$relays","names","undefined","LN_ADDRESS_REGEX","LightningAddress","address","domain","lnurlpData","keysendData","proxy","Object","assign","exec","toLowerCase","fetchWithProxy","fetchWithoutProxy","URLSearchParams","ln","parseResponse","lnurlp","lnurlResult","lnurlpUrl","keysendResult","keysendUrl","nostrResult","nostrUrl","lnurlData","ok","params","invoiceResult","callback","isUrl","callbackUrl","URL","search","invoiceArgs","msat","commentAllowed","invoiceParams","payerdata","generateInvoice","booster","allowsNostr","zapParams","zapInvoice","ceil","Number","minSendable","maxSendable","metadata","metadataHash","image","description","identifier","k","v","payerData","hostname","_unused2","fixed","rawData","parseLnUrlPayResponse","status","customData","parseKeysendResponse","parseNostrResponse","getFiatBtcRate","currency","rate_float","numSatsInBtc","rate","locale","getFiatValue","toLocaleString","style"],"mappings":"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"}