import { Relay, Event } from 'nostr-tools';
interface NostrWebLNOptions {
    authorizationUrl?: string;
    relayUrl: string;
    walletPubkey: string;
    secret?: string;
}
export declare class NostrWebLNProvider {
    relay: Relay;
    relayUrl: string;
    secret: string | undefined;
    walletPubkey: string;
    options: NostrWebLNOptions;
    subscribers: Record<string, (payload: any) => void>;
    static parseWalletConnectUrl(walletConnectUrl: string): NostrWebLNOptions;
    static withNewSecret(options?: ConstructorParameters<typeof NostrWebLNProvider>[0]): NostrWebLNProvider;
    constructor(options?: {
        providerName?: string;
        authorizationUrl?: string;
        relayUrl?: string;
        secret?: string;
        walletPubkey?: string;
        nostrWalletConnectUrl?: string;
    });
    on(name: string, callback: () => void): void;
    notify(name: string, payload?: any): void;
    getNostrWalletConnectUrl(includeSecret?: boolean): string;
    get nostrWalletConnectUrl(): string;
    get connected(): boolean;
    get publicKey(): string;
    signEvent(event: Event): string;
    getEventHash(event: Event): string;
    enable(): Promise<void>;
    close(): void;
    encrypt(pubkey: string, content: string): Promise<string>;
    decrypt(pubkey: string, content: string): Promise<string>;
    getInfo(): Promise<{
        methods: string[];
        node: {};
        supports: string[];
        version: string;
    }>;
    sendPayment(invoice: string): Promise<unknown>;
    getAuthorizationUrl(options: {
        name?: string;
        returnTo?: string;
    }): URL;
    initNWC(options?: {
        name?: string;
        returnTo?: string;
    }): Promise<unknown>;
    private checkConnected;
}
export declare const NWC: typeof NostrWebLNProvider;
export {};
//# sourceMappingURL=NostrWeblnProvider.d.ts.map