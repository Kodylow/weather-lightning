export declare type KeysendResponse = {
    customKey: string;
    customValue: string;
    destination: string;
};
export declare type LnUrlPayResponse = {
    callback: string;
    fixed: boolean;
    min: number;
    max: number;
    domain?: string;
    metadata: Array<Array<string>>;
    metadataHash: string;
    identifier: string;
    description: string;
    image: string;
    commentAllowed?: number;
    rawData: {
        [key: string]: string | number;
    };
    allowsNostr: boolean;
    payerData?: LUD18ServicePayerData;
};
export declare type LUD18ServicePayerData = Partial<{
    name: {
        mandatory: boolean;
    };
    pubkey: {
        mandatory: boolean;
    };
    identifier: {
        mandatory: boolean;
    };
    email: {
        mandatory: boolean;
    };
    auth: {
        mandatory: boolean;
        k1: string;
    };
}> & Record<string, unknown>;
export declare type NostrResponse = {
    names: Record<string, string>;
    relays: Record<string, string[]>;
};
export declare type InvoiceArgs = {
    pr: string;
    verify?: string;
    preimage?: string;
};
export declare type Event = {
    id?: string;
    kind: number;
    pubkey?: string;
    content: string;
    tags: string[][];
    created_at: number;
    sig?: string;
};
export declare type ZapArgs = {
    satoshi: number;
    comment?: string;
    relays: string[];
    p?: string;
    e?: string;
};
export declare type NostrProvider = {
    getPublicKey(): Promise<string>;
    signEvent(event: Event): Promise<Event>;
};
export declare type ZapOptions = {
    nostr?: NostrProvider;
};
export declare type RequestInvoiceArgs = {
    satoshi: number;
    comment?: string;
    payerdata?: Partial<{
        name?: string;
        pubkey?: string;
        identifier?: string;
        email?: string;
        auth?: {
            key: string;
            sig: string;
        };
    }> & Record<string, unknown>;
};
//# sourceMappingURL=types.d.ts.map