{
  "version": 3,
  "sources": ["../../cross-fetch/dist/browser-ponyfill.js", "browser-external:crypto", "../../crypto-js/core.js", "../../crypto-js/enc-hex.js", "../../crypto-js/sha256.js", "../../@scure/base/lib/index.js", "../../light-bolt11-decoder/bolt11.js", "../../alby-tools/src/utils/MemoryStorage.ts", "../../alby-tools/src/lsat/fetch.ts", "../../alby-tools/src/podcasting2/boostagrams.ts", "../../alby-tools/src/utils/keysend.ts", "../../alby-tools/src/utils/lnurl.ts", "../../alby-tools/src/invoice.ts", "../../alby-tools/src/utils/invoice.ts", "../../alby-tools/src/utils/nostr.ts", "../../alby-tools/src/lightning-address.ts", "../../alby-tools/src/utils/fiat.ts"],
  "sourcesContent": ["var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && typeof require === 'function') {\n\t        try {\n\t            crypto = require('crypto');\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.enc.Hex;\n\n}));", ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));", "\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexports.utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n", "const {bech32, hex, utf8} = require('@scure/base')\n\n// defaults for encode; default timestamp is current time at call\nconst DEFAULTNETWORK = {\n  // default network is bitcoin\n  bech32: 'bc',\n  pubKeyHash: 0x00,\n  scriptHash: 0x05,\n  validWitnessVersions: [0]\n}\nconst TESTNETWORK = {\n  bech32: 'tb',\n  pubKeyHash: 0x6f,\n  scriptHash: 0xc4,\n  validWitnessVersions: [0]\n}\nconst REGTESTNETWORK = {\n  bech32: 'bcrt',\n  pubKeyHash: 0x6f,\n  scriptHash: 0xc4,\n  validWitnessVersions: [0]\n}\nconst SIMNETWORK = {\n  bech32: 'sb',\n  pubKeyHash: 0x3f,\n  scriptHash: 0x7b,\n  validWitnessVersions: [0]\n}\n\nconst FEATUREBIT_ORDER = [\n  'option_data_loss_protect',\n  'initial_routing_sync',\n  'option_upfront_shutdown_script',\n  'gossip_queries',\n  'var_onion_optin',\n  'gossip_queries_ex',\n  'option_static_remotekey',\n  'payment_secret',\n  'basic_mpp',\n  'option_support_large_channel'\n]\n\nconst DIVISORS = {\n  m: BigInt(1e3),\n  u: BigInt(1e6),\n  n: BigInt(1e9),\n  p: BigInt(1e12)\n}\n\nconst MAX_MILLISATS = BigInt('2100000000000000000')\n\nconst MILLISATS_PER_BTC = BigInt(1e11)\n\nconst TAGCODES = {\n  payment_hash: 1,\n  payment_secret: 16,\n  description: 13,\n  payee: 19,\n  description_hash: 23, // commit to longer descriptions (used by lnurl-pay)\n  expiry: 6, // default: 3600 (1 hour)\n  min_final_cltv_expiry: 24, // default: 9\n  fallback_address: 9,\n  route_hint: 3, // for extra routing info (private etc.)\n  feature_bits: 5,\n  metadata: 27\n}\n\n// reverse the keys and values of TAGCODES and insert into TAGNAMES\nconst TAGNAMES = {}\nfor (let i = 0, keys = Object.keys(TAGCODES); i < keys.length; i++) {\n  const currentName = keys[i]\n  const currentCode = TAGCODES[keys[i]].toString()\n  TAGNAMES[currentCode] = currentName\n}\n\nconst TAGPARSERS = {\n  1: words => hex.encode(bech32.fromWordsUnsafe(words)), // 256 bits\n  16: words => hex.encode(bech32.fromWordsUnsafe(words)), // 256 bits\n  13: words => utf8.encode(bech32.fromWordsUnsafe(words)), // string variable length\n  19: words => hex.encode(bech32.fromWordsUnsafe(words)), // 264 bits\n  23: words => hex.encode(bech32.fromWordsUnsafe(words)), // 256 bits\n  27: words => hex.encode(bech32.fromWordsUnsafe(words)), // variable\n  6: wordsToIntBE, // default: 3600 (1 hour)\n  24: wordsToIntBE, // default: 9\n  3: routingInfoParser, // for extra routing info (private etc.)\n  5: featureBitsParser // keep feature bits as array of 5 bit words\n}\n\nfunction getUnknownParser(tagCode) {\n  return words => ({\n    tagCode: parseInt(tagCode),\n    words: bech32.encode('unknown', words, Number.MAX_SAFE_INTEGER)\n  })\n}\n\nfunction wordsToIntBE(words) {\n  return words.reverse().reduce((total, item, index) => {\n    return total + item * Math.pow(32, index)\n  }, 0)\n}\n\n// first convert from words to buffer, trimming padding where necessary\n// parse in 51 byte chunks. See encoder for details.\nfunction routingInfoParser(words) {\n  const routes = []\n  let pubkey,\n    shortChannelId,\n    feeBaseMSats,\n    feeProportionalMillionths,\n    cltvExpiryDelta\n  let routesBuffer = bech32.fromWordsUnsafe(words)\n  while (routesBuffer.length > 0) {\n    pubkey = hex.encode(routesBuffer.slice(0, 33)) // 33 bytes\n    shortChannelId = hex.encode(routesBuffer.slice(33, 41)) // 8 bytes\n    feeBaseMSats = parseInt(hex.encode(routesBuffer.slice(41, 45)), 16) // 4 bytes\n    feeProportionalMillionths = parseInt(\n      hex.encode(routesBuffer.slice(45, 49)),\n      16\n    ) // 4 bytes\n    cltvExpiryDelta = parseInt(hex.encode(routesBuffer.slice(49, 51)), 16) // 2 bytes\n\n    routesBuffer = routesBuffer.slice(51)\n\n    routes.push({\n      pubkey,\n      short_channel_id: shortChannelId,\n      fee_base_msat: feeBaseMSats,\n      fee_proportional_millionths: feeProportionalMillionths,\n      cltv_expiry_delta: cltvExpiryDelta\n    })\n  }\n  return routes\n}\n\nfunction featureBitsParser(words) {\n  const bools = words\n    .slice()\n    .reverse()\n    .map(word => [\n      !!(word & 0b1),\n      !!(word & 0b10),\n      !!(word & 0b100),\n      !!(word & 0b1000),\n      !!(word & 0b10000)\n    ])\n    .reduce((finalArr, itemArr) => finalArr.concat(itemArr), [])\n  while (bools.length < FEATUREBIT_ORDER.length * 2) {\n    bools.push(false)\n  }\n\n  const featureBits = {}\n\n  FEATUREBIT_ORDER.forEach((featureName, index) => {\n    let status\n    if (bools[index * 2]) {\n      status = 'required'\n    } else if (bools[index * 2 + 1]) {\n      status = 'supported'\n    } else {\n      status = 'unsupported'\n    }\n    featureBits[featureName] = status\n  })\n\n  const extraBits = bools.slice(FEATUREBIT_ORDER.length * 2)\n  featureBits.extra_bits = {\n    start_bit: FEATUREBIT_ORDER.length * 2,\n    bits: extraBits,\n    has_required: extraBits.reduce(\n      (result, bit, index) =>\n        index % 2 !== 0 ? result || false : result || bit,\n      false\n    )\n  }\n\n  return featureBits\n}\n\nfunction hrpToMillisat(hrpString, outputString) {\n  let divisor, value\n  if (hrpString.slice(-1).match(/^[munp]$/)) {\n    divisor = hrpString.slice(-1)\n    value = hrpString.slice(0, -1)\n  } else if (hrpString.slice(-1).match(/^[^munp0-9]$/)) {\n    throw new Error('Not a valid multiplier for the amount')\n  } else {\n    value = hrpString\n  }\n\n  if (!value.match(/^\\d+$/))\n    throw new Error('Not a valid human readable amount')\n\n  const valueBN = BigInt(value)\n\n  const millisatoshisBN = divisor\n    ? (valueBN * MILLISATS_PER_BTC) / DIVISORS[divisor]\n    : valueBN * MILLISATS_PER_BTC\n\n  if (\n    (divisor === 'p' && !(valueBN % BigInt(10) === BigInt(0))) ||\n    millisatoshisBN > MAX_MILLISATS\n  ) {\n    throw new Error('Amount is outside of valid range')\n  }\n\n  return outputString ? millisatoshisBN.toString() : millisatoshisBN\n}\n\n// decode will only have extra comments that aren't covered in encode comments.\n// also if anything is hard to read I'll comment.\nfunction decode(paymentRequest, network) {\n  if (typeof paymentRequest !== 'string')\n    throw new Error('Lightning Payment Request must be string')\n  if (paymentRequest.slice(0, 2).toLowerCase() !== 'ln')\n    throw new Error('Not a proper lightning payment request')\n\n  const sections = []\n  const decoded = bech32.decode(paymentRequest, Number.MAX_SAFE_INTEGER)\n  paymentRequest = paymentRequest.toLowerCase()\n  const prefix = decoded.prefix\n  let words = decoded.words\n  let letters = paymentRequest.slice(prefix.length + 1)\n  let sigWords = words.slice(-104)\n  words = words.slice(0, -104)\n\n  // Without reverse lookups, can't say that the multipier at the end must\n  // have a number before it, so instead we parse, and if the second group\n  // doesn't have anything, there's a good chance the last letter of the\n  // coin type got captured by the third group, so just re-regex without\n  // the number.\n  let prefixMatches = prefix.match(/^ln(\\S+?)(\\d*)([a-zA-Z]?)$/)\n  if (prefixMatches && !prefixMatches[2])\n    prefixMatches = prefix.match(/^ln(\\S+)$/)\n  if (!prefixMatches) {\n    throw new Error('Not a proper lightning payment request')\n  }\n\n  // \"ln\" section\n  sections.push({\n    name: 'lightning_network',\n    letters: 'ln'\n  })\n\n  // \"bc\" section\n  const bech32Prefix = prefixMatches[1]\n  let coinNetwork\n  if (!network) {\n    switch (bech32Prefix) {\n      case DEFAULTNETWORK.bech32:\n        coinNetwork = DEFAULTNETWORK\n        break\n      case TESTNETWORK.bech32:\n        coinNetwork = TESTNETWORK\n        break\n      case REGTESTNETWORK.bech32:\n        coinNetwork = REGTESTNETWORK\n        break\n      case SIMNETWORK.bech32:\n        coinNetwork = SIMNETWORK\n        break\n    }\n  } else {\n    if (\n      network.bech32 === undefined ||\n      network.pubKeyHash === undefined ||\n      network.scriptHash === undefined ||\n      !Array.isArray(network.validWitnessVersions)\n    )\n      throw new Error('Invalid network')\n    coinNetwork = network\n  }\n  if (!coinNetwork || coinNetwork.bech32 !== bech32Prefix) {\n    throw new Error('Unknown coin bech32 prefix')\n  }\n  sections.push({\n    name: 'coin_network',\n    letters: bech32Prefix,\n    value: coinNetwork\n  })\n\n  // amount section\n  const value = prefixMatches[2]\n  let millisatoshis\n  if (value) {\n    const divisor = prefixMatches[3]\n    millisatoshis = hrpToMillisat(value + divisor, true)\n    sections.push({\n      name: 'amount',\n      letters: prefixMatches[2] + prefixMatches[3],\n      value: millisatoshis\n    })\n  } else {\n    millisatoshis = null\n  }\n\n  // \"1\" separator\n  sections.push({\n    name: 'separator',\n    letters: '1'\n  })\n\n  // timestamp\n  const timestamp = wordsToIntBE(words.slice(0, 7))\n  words = words.slice(7) // trim off the left 7 words\n  sections.push({\n    name: 'timestamp',\n    letters: letters.slice(0, 7),\n    value: timestamp\n  })\n  letters = letters.slice(7)\n\n  let tagName, parser, tagLength, tagWords\n  // we have no tag count to go on, so just keep hacking off words\n  // until we have none.\n  while (words.length > 0) {\n    const tagCode = words[0].toString()\n    tagName = TAGNAMES[tagCode] || 'unknown_tag'\n    parser = TAGPARSERS[tagCode] || getUnknownParser(tagCode)\n    words = words.slice(1)\n\n    tagLength = wordsToIntBE(words.slice(0, 2))\n    words = words.slice(2)\n\n    tagWords = words.slice(0, tagLength)\n    words = words.slice(tagLength)\n\n    sections.push({\n      name: tagName,\n      tag: letters[0],\n      letters: letters.slice(0, 1 + 2 + tagLength),\n      value: parser(tagWords) // see: parsers for more comments\n    })\n    letters = letters.slice(1 + 2 + tagLength)\n  }\n\n  // signature\n  sections.push({\n    name: 'signature',\n    letters: letters.slice(0, 104),\n    value: hex.encode(bech32.fromWordsUnsafe(sigWords))\n  })\n  letters = letters.slice(104)\n\n  // checksum\n  sections.push({\n    name: 'checksum',\n    letters: letters\n  })\n\n  let result = {\n    paymentRequest,\n    sections,\n\n    get expiry() {\n      let exp = sections.find(s => s.name === 'expiry')\n      if (exp) return getValue('timestamp') + exp.value\n    },\n\n    get route_hints() {\n      return sections.filter(s => s.name === 'route_hint').map(s => s.value)\n    }\n  }\n\n  for (let name in TAGCODES) {\n    if (name === 'route_hint') {\n      // route hints can be multiple, so this won't work for them\n      continue\n    }\n\n    Object.defineProperty(result, name, {\n      get() {\n        return getValue(name)\n      }\n    })\n  }\n\n  return result\n\n  function getValue(name) {\n    let section = sections.find(s => s.name === name)\n    return section ? section.value : undefined\n  }\n}\n\nmodule.exports = {\n  decode,\n  hrpToMillisat\n}\n", "class MemoryStorage {\n  storage;\n\n  constructor(initial?: any) {\n    this.storage = initial || {};\n  }\n\n  getItem(key) {\n    return this.storage[key];\n  }\n\n  setItem(key, value) {\n    this.storage[key] = value;\n  }\n}\n\nexport default MemoryStorage;\n", "import fetch from 'cross-fetch';\nimport MemoryStorage from \"../utils/MemoryStorage\";\nimport { WebLNProvider } from '@webbtc/webln-types';\n\nexport const fetchWithLsat = async (url: string, fetchArgs: Record<string, any>, options: Record<string, any>) => {\n  if (!options) {\n    options = {};\n  }\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!webln) {\n    throw new Error(\"WebLN is missing\");\n  }\n  let store = options.store || new MemoryStorage();\n  if (!fetchArgs) {\n    fetchArgs = {};\n  }\n  fetchArgs.cache = 'no-store';\n  fetchArgs.mode = 'cors';\n  if (!fetchArgs.headers) {\n    fetchArgs.headers = {};\n  }\n  const cachedLsatData = store.getItem(url);\n  if (cachedLsatData) {\n    const data = JSON.parse(cachedLsatData);\n    fetchArgs.headers[\"Authorization\"] = `LSAT ${data.mac}:${data.preimage}`;\n    return await fetch(url, fetchArgs)\n  }\n\n  fetchArgs.headers[\"Accept-Authenticate\"] = \"LSAT\";\n  const initResp = await fetch(url, fetchArgs);\n  const header = initResp.headers.get('www-authenticate');\n  if (!header) {\n    return initResp\n  }\n\n  const parts = header.split(\",\");\n  const mac = parts[0].replace(\"LSAT macaroon=\", \"\").trim();\n  const inv = parts[1].replace(\"invoice=\", \"\").trim();\n\n  await webln.enable();\n  const invResp = await webln.sendPayment(inv);\n\n  store.setItem(url, JSON.stringify({\n    'mac': mac,\n    'preimage': invResp.preimage\n  }));\n\n  fetchArgs.headers[\"Authorization\"] = `LSAT ${mac}:${invResp.preimage}`;\n  return await fetch(url, fetchArgs);\n}\n\nexport default fetchWithLsat;\n", "import { WebLNProvider } from \"@webbtc/webln-types\";\n\ntype BoostOptions = {\n  webln?: unknown;\n}\n\ntype BoostArguments = {\n  destination: string\n  customKey?: string;\n  customValue?: string;\n  amount?: number;\n  boost: Boost;\n}\n\ntype WeblnBoostParams = {\n  destination: string;\n  amount: number;\n  customRecords: Record<string, string>;\n}\n\nexport type Boost = {\n  action: string;\n  value_msat: number;\n  value_msat_total: number;\n  app_name: string;\n  app_version: string;\n  feedId: string;\n  podcast: string;\n  episode: string;\n  ts: number;\n  name: string;\n  sender_name: string;\n}\n\nexport const boost = async (args: BoostArguments, options?: BoostOptions) => {\n  let { boost, amount } = args;\n  if (!options) {\n    options = {};\n  }\n  const webln: WebLNProvider = options.webln || globalThis.webln;\n  if (!amount) {\n    amount = Math.floor(boost.value_msat / 1000);\n  }\n\n  let weblnParams: WeblnBoostParams = {\n    destination: args.destination,\n    amount: amount,\n    customRecords: {\n      '7629169': JSON.stringify(boost)\n    }\n  };\n  if (args.customKey && args.customValue) {\n    weblnParams.customRecords[args.customKey] = args.customValue;\n  }\n  await webln.enable();\n  const response = await webln.keysend(weblnParams);\n  return response;\n}\n\nexport default boost;\n", "import type { KeysendResponse } from '../types'\n\nconst TAG_KEYSEND = 'keysend'\n\nexport const parseKeysendResponse = (\n  data: Record<string, any>\n): KeysendResponse => {\n  if (data.tag !== TAG_KEYSEND) throw new Error('Invalid keysend params')\n  if (data.status !== \"OK\") throw new Error('Keysend status not OK')\n\n  if (!('customKey' in data.customData[0]) || data.customData[0]['customKey'] != '696969')\n    throw new Error('Unable to find customKey');\n\n  if (!('customValue' in data.customData[0]) || !data.customData[0]['customValue'])\n    throw new Error('Unable to find customValue');\n\n  if (!data.pubkey)\n    throw new Error('Pubkey does not exist');\n\n  const destination =  data.pubkey;\n  const customKey = data.customData[0]['customKey'];\n  const customValue = data.customData[0]['customValue'];\n  \n  return {\n    destination,\n    customKey,\n    customValue\n  }\n}", "import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\n\nimport type { LUD18ServicePayerData, LnUrlPayResponse } from '../types'\n\nconst URL_REGEX = /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/;\n\nexport const isUrl = (url: string | null): url is string => {\n  if (!url) return false\n  return URL_REGEX.test(url)\n}\n\nexport const isValidAmount = ({\n  amount,\n  min,\n  max,\n}: {\n  amount: number\n  min: number\n  max: number\n}): boolean => {\n  const isValid = amount > 0 && amount >= min && amount <= max\n  const isFixed = min === max\n  return isValid && isFixed ? amount === min : isValid\n}\n\nconst TAG_PAY_REQUEST = 'payRequest'\n\n// From: https://github.com/dolcalmi/lnurl-pay/blob/main/src/request-pay-service-params.ts\nexport const parseLnUrlPayResponse = (\n  data: Record<string, any>\n): LnUrlPayResponse => {\n  if (data.tag !== TAG_PAY_REQUEST) throw new Error('Invalid pay service params')\n\n  const callback = (data.callback + '').trim();\n  if (!isUrl(callback)) throw new Error('Callback must be a valid url')\n\n  const min = Math.ceil(Number(data.minSendable || 0))\n  const max = Math.floor(Number(data.maxSendable))\n  if (!(min && max) || min > max) throw new Error('Invalid pay service params')\n\n  let metadata: Array<Array<string>>\n  let metadataHash: string\n  try {\n    metadata = JSON.parse(data.metadata + '')\n    metadataHash = sha256(data.metadata + '').toString(Hex)\n  } catch {\n    metadata = []\n    metadataHash = sha256('[]').toString(Hex)\n  }\n\n  let image = ''\n  let description = ''\n  let identifier = ''\n  for (let i = 0; i < metadata.length; i++) {\n    const [k, v] = metadata[i]\n    switch (k) {\n      case 'text/plain':\n        description = v\n        break\n      case 'text/identifier':\n        identifier = v\n        break\n      case 'image/png;base64':\n      case 'image/jpeg;base64':\n        image = 'data:' + k + ',' + v\n        break\n    }\n  }\n  let payerData = data.payerData as LUD18ServicePayerData | undefined;\n\n  let domain\n  try {\n    domain = new URL(callback).hostname\n  } catch {\n    // fail silently and let domain remain undefined if callback is not a valid URL\n  }\n\n  return {\n    callback,\n    fixed: min === max,\n    min,\n    max,\n    domain,\n    metadata,\n    metadataHash,\n    identifier,\n    description,\n    image,\n    payerData,\n    commentAllowed: Number(data.commentAllowed) || 0,\n    rawData: data,\n    allowsNostr: data.allowsNostr || false,\n  }\n}\n", "import fetch from 'cross-fetch';\nimport { getHashFromInvoice } from \"./utils/invoice\";\nimport Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { InvoiceArgs } from './types';\n\nexport default class Invoice {\n  paymentRequest: string;\n  paymentHash: string;\n  preimage: string | null;\n  verify: string | null;\n\n  constructor(args: InvoiceArgs) {\n    this.paymentRequest = args.pr;\n    this.paymentHash = getHashFromInvoice(this.paymentRequest) as string;\n    this.verify = args.verify ?? null;\n    this.preimage = args.preimage ?? null;\n  }\n\n  async isPaid(): Promise<boolean> {\n    if (this.preimage)\n      return this.validatePreimage(this.preimage);\n    else if (this.verify) {\n      return await this.verifyPayment();\n    } else {\n      throw new Error('Could not verify payment');\n    }\n  }\n\n  validatePreimage(preimage: string): boolean {\n    if (!preimage || !this.paymentHash) return false\n  \n    try {\n      const preimageHash = sha256(Hex.parse(preimage)).toString(Hex)\n      return this.paymentHash === preimageHash\n    } catch {\n      return false\n    }\n  }\n\n  async verifyPayment(): Promise<boolean> {\n    if (!this.verify) throw new Error('LNURL verify not available');\n\n    const result = await fetch(this.verify);\n    const json = await result.json();\n    if (json.preimage) {\n      this.preimage = json.preimage;\n    }\n  \n    return json.settled;\n  }\n}", "import { decode } from 'light-bolt11-decoder';\n\nexport const getHashFromInvoice = (invoice) => {\n  if (!invoice) return null\n\n  try {\n    const decoded = decode(invoice)\n    if (!decoded || !decoded.sections) return null\n\n    const hashTag = decoded.sections.find(\n      (value) => value.name === 'payment_hash'\n    )\n    if (!hashTag || !hashTag.value) return null\n\n    return hashTag.value.toString()\n  } catch {\n    return null\n  }\n}", "import Hex from \"crypto-js/enc-hex.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport { Event, NostrResponse, ZapArgs, ZapOptions } from '../types';\n\nexport async function generateZapEvent({\n  satoshi, comment, p, e, relays\n}: ZapArgs, options: ZapOptions = {}): Promise<Event> {\n  const nostr = options.nostr || globalThis.nostr;\n  if (!nostr) {\n    throw new Error(\"nostr option or window.nostr is not available\");\n  }\n\n  const nostrTags = [\n    [\"relays\", ...relays],\n    [\"amount\", satoshi.toString()]\n  ]\n  if (p) {\n    nostrTags.push([\"p\", p]);\n  }\n  if (e) {\n    nostrTags.push([\"e\", e])\n  }\n\n  const pubkey = await nostr.getPublicKey();\n\n  const nostrEvent: Event = {\n    pubkey,\n    created_at: Math.floor(Date.now() / 1000),\n    kind: 9734,\n    tags: nostrTags,\n    content: comment ?? \"\"\n  }\n\n  nostrEvent.id = getEventHash(nostrEvent)\n  return await nostr.signEvent(nostrEvent)\n}\n\nexport function validateEvent(event: Event): boolean {\n  if (typeof event.content !== \"string\") return false;\n  if (typeof event.created_at !== \"number\") return false;\n  // ignore these checks because if the pubkey is not set we add it to the event. same for the ID.\n  // if (typeof event.pubkey !== \"string\") return false;\n  // if (!event.pubkey.match(/^[a-f0-9]{64}$/)) return false;\n\n  if (!Array.isArray(event.tags)) return false;\n  for (let i = 0; i < event.tags.length; i++) {\n    const tag = event.tags[i];\n    if (!Array.isArray(tag)) return false;\n    for (let j = 0; j < tag.length; j++) {\n      if (typeof tag[j] === \"object\") return false;\n    }\n  }\n\n  return true;\n}\n\nexport function serializeEvent(evt: Event): string {\n  if (!validateEvent(evt))\n    throw new Error(\"can't serialize event with wrong or missing properties\");\n\n  return JSON.stringify([\n    0,\n    evt.pubkey,\n    evt.created_at,\n    evt.kind,\n    evt.tags,\n    evt.content,\n  ]);\n}\n\nexport function getEventHash(event: Event): string {\n  return sha256(serializeEvent(event)).toString(Hex);\n}\n\nexport function parseNostrResponse(nostrData: NostrResponse, username: string | undefined) {\n  let nostrPubkey: string | undefined;\n  let nostrRelays: string[] | undefined;\n  if (username && nostrData) {\n    nostrPubkey = nostrData.names?.[username];\n    nostrRelays = nostrPubkey ? nostrData.relays?.[nostrPubkey] : undefined;\n  }\n\n  return [nostrData, nostrPubkey, nostrRelays] as const;\n}", "import fetch from 'cross-fetch';\nimport { parseKeysendResponse } from './utils/keysend';\nimport { isUrl, isValidAmount, parseLnUrlPayResponse } from './utils/lnurl';\nimport Invoice from './invoice';\nimport { InvoiceArgs, LnUrlPayResponse, NostrResponse, RequestInvoiceArgs, ZapArgs, ZapOptions } from './types';\nimport { generateZapEvent, parseNostrResponse } from './utils/nostr';\nimport type { Boost } from './podcasting2/boostagrams';\nimport { boost as booster } from './podcasting2/boostagrams';\nimport { WebLNProvider, SendPaymentResponse } from \"@webbtc/webln-types\";\nimport { KeysendResponse } from './types';\n\nconst LN_ADDRESS_REGEX =\n  /^((?:[^<>()\\[\\]\\\\.,;:\\s@\"]+(?:\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(?:\".+\"))@((?:\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(?:(?:[a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\nexport const DEFAULT_PROXY = \"https://lnaddressproxy.getalby.com\";\n\ntype LightningAddressOptions = {\n  proxy?: string | false;\n  webln?: WebLNProvider;\n}\n\nexport default class LightningAddress {\n  address: string;\n  options: LightningAddressOptions;\n  username: string | undefined;\n  domain: string | undefined;\n  pubkey: string | undefined;\n  lnurlpData: LnUrlPayResponse | undefined;\n  keysendData: KeysendResponse | undefined;\n  nostrData: NostrResponse | undefined;\n  nostrPubkey: string | undefined;\n  nostrRelays: string[] | undefined;\n  webln: WebLNProvider | undefined;\n\n  constructor(address: string, options?: LightningAddressOptions) {\n    this.address = address;\n    this.options = { proxy: DEFAULT_PROXY, webln: globalThis.webln };\n    this.options = Object.assign(this.options, options);\n    this.parse();\n    this.webln = this.options.webln;\n  }\n\n  parse() {\n    const result = LN_ADDRESS_REGEX.exec(this.address.toLowerCase());\n    if (result) {\n      this.username = result[1];\n      this.domain = result[2];\n    }\n  }\n\n  async fetch() {\n    if (this.options.proxy) {\n      return this.fetchWithProxy();\n    } else {\n      return this.fetchWithoutProxy();\n    }\n  }\n\n  async fetchWithProxy() {\n    const result = await fetch(`${this.options.proxy}/lightning-address-details?${new URLSearchParams({ ln: this.address }).toString()}`);\n    const json = await result.json();\n\n    this.parseResponse(json.lnurlp, json.keysend, json.nostr);\n  }\n\n  async fetchWithoutProxy() {\n    if (!this.domain || !this.username) {\n      return;\n    }\n    const lnurlResult = await fetch(this.lnurlpUrl());\n    const keysendResult = await fetch(this.keysendUrl());\n    const nostrResult = await fetch(this.nostrUrl());\n\n    let lnurlData: Record<string, string> | undefined;\n    if (lnurlResult.ok) {\n      lnurlData = await lnurlResult.json();\n    } \n    let keysendData: Record<string, string> | undefined;\n    if (keysendResult.ok) {\n      keysendData = await keysendResult.json();\n    } \n    let nostrData: NostrResponse | undefined;\n    if (nostrResult.ok) {\n      nostrData = await nostrResult.json();\n    } \n    \n    this.parseResponse(lnurlData, keysendData, nostrData);\n  }\n\n  lnurlpUrl() {\n    return `https://${this.domain}/.well-known/lnurlp/${this.username}`;\n  }\n\n  keysendUrl() {\n    return `https://${this.domain}/.well-known/keysend/${this.username}`;\n  }\n\n  nostrUrl() {\n    return `https://${this.domain}/.well-known/nostr.json?name=${this.username}`;\n  }\n\n  async generateInvoice(params: Record<string, string>): Promise<Invoice> {\n    let data;\n    if (this.options.proxy) {\n      const invoiceResult = await fetch(`${this.options.proxy}/generate-invoice?${new URLSearchParams({ ln: this.address, ...params }).toString()}`);\n      const json = await invoiceResult.json();\n      data = json.invoice;\n    } else {\n      if (!this.lnurlpData) {\n        throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n      }\n      if (!this.lnurlpData.callback || !isUrl(this.lnurlpData.callback)) throw new Error('Valid callback does not exist in lnurlpData')\n      const callbackUrl = new URL(this.lnurlpData.callback)\n      callbackUrl.search = new URLSearchParams(params).toString()\n      const invoiceResult = await fetch(callbackUrl);\n      data = await invoiceResult.json();\n    }\n\n    const paymentRequest = data && data.pr && data.pr.toString();\n    if (!paymentRequest) throw new Error('Invalid pay service invoice')\n\n    const invoiceArgs: InvoiceArgs = { pr: paymentRequest };\n    if (data && data.verify) invoiceArgs.verify = data.verify.toString();\n\n    return new Invoice(invoiceArgs);\n  }\n\n  async requestInvoice(args: RequestInvoiceArgs): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    const msat = args.satoshi * 1000;\n    const { commentAllowed, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (args.comment && commentAllowed && commentAllowed > 0 && args.comment.length > commentAllowed)\n      throw new Error(\n        `The comment length must be ${commentAllowed} characters or fewer`\n      )\n\n    const invoiceParams: { amount: string, comment?: string, payerdata?: string } = { amount: msat.toString() };\n    if (args.comment) invoiceParams.comment = args.comment\n    if (args.payerdata) invoiceParams.payerdata = JSON.stringify(args.payerdata)\n\n    return this.generateInvoice(invoiceParams);\n  }\n\n  async boost(boost: Boost, amount: number = 0) {\n    if (!this.keysendData) {\n      throw new Error(\"No keysendData available. Please call fetch() first.\")\n    }\n    const { destination, customKey, customValue } = this.keysendData;\n    return booster({\n      destination,\n      customKey,\n      customValue,\n      amount,\n      boost,\n    }, {\n      webln: this.webln,\n    })\n  }\n\n  async zapInvoice({\n    satoshi, comment, relays, e\n  }: ZapArgs, options: ZapOptions = {}): Promise<Invoice> {\n    if (!this.lnurlpData) {\n      throw new Error(\"No lnurlpData available. Please call fetch() first.\")\n    }\n    if (!this.nostrPubkey) {\n      throw new Error(\"Nostr Pubkey is missing\");\n    }\n    const p = this.nostrPubkey;\n    const msat = satoshi * 1000;\n    const { allowsNostr, min, max } = this.lnurlpData;\n\n    if (!isValidAmount({ amount: msat, min, max }))\n      throw new Error('Invalid amount')\n    if (!allowsNostr) throw new Error('Your provider does not support zaps')\n\n    const event = await generateZapEvent({\n      satoshi: msat, comment, p, e, relays\n    }, options);\n    const zapParams: { amount: string, nostr: string } = {\n      amount: msat.toString(),\n      nostr: JSON.stringify(event)\n    };\n\n    const invoice = await this.generateInvoice(zapParams);\n    return invoice;\n  }\n\n  async zap(args: ZapArgs, options: ZapOptions = {}): Promise<SendPaymentResponse> {\n    const invoice = this.zapInvoice(args, options);\n    if (!this.webln) {\n      // mainly for TS\n      throw new Error(\"WebLN not available\");\n    }\n    await this.webln.enable();\n    const response = this.webln.sendPayment((await invoice).paymentRequest);\n    return response;\n  }\n\n  private parseResponse(lnurlpData: Record<string, string> | undefined, keysendData: Record<string, string> | undefined, nostrData: NostrResponse | undefined) {\n    if (lnurlpData) {\n      this.lnurlpData = parseLnUrlPayResponse(lnurlpData);\n    }\n    if (keysendData) {\n      this.keysendData = parseKeysendResponse(keysendData);\n    }\n    if (nostrData) {\n      [this.nostrData, this.nostrPubkey, this.nostrRelays] = parseNostrResponse(nostrData, this.username);\n    }\n  }\n}\n", "import fetch from 'cross-fetch';\n\nconst numSatsInBtc = 100_000_000;\n\nexport const getFiatBtcRate = async (currency: string): Promise<number> => {\n  const url = \"https://getalby.com/api/rates/\" + currency.toLowerCase() + \".json\";\n  const response = await fetch(url);\n  const data = await response.json();\n\n  return data.rate_float / numSatsInBtc;\n};\n\nexport const getFiatValue = async ({ satoshi, currency }: { satoshi: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Number(satoshi) * rate;\n};\n\nexport const getSatoshiValue = async ({ amount, currency }: { amount: number | string; currency: string; }) => {\n  const rate = await getFiatBtcRate(currency);\n\n  return Math.floor(Number(amount) / rate);\n}\n\nexport const getFormattedFiatValue = async ({ satoshi, currency, locale }: { satoshi: number | string; currency: string; locale: string }) => {\n  if (!locale) {\n    locale = 'en';\n  }\n  const fiatValue = await getFiatValue({ satoshi, currency });\n  return fiatValue.toLocaleString(locale, {\n    style: \"currency\",\n    currency,\n  });\n}"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA,QAAIA,UAAS,OAAO,SAAS,cAAc,OAAO;AAClD,QAAI,WAAY,WAAY;AAC5B,eAAS,IAAI;AACb,aAAK,QAAQ;AACb,aAAK,eAAeA,QAAO;AAAA,MAC3B;AACA,QAAE,YAAYA;AACd,aAAO,IAAI,EAAE;AAAA,IACb,EAAG;AACH,KAAC,SAASC,OAAM;AAEhB,UAAI,aAAc,SAAUC,UAAS;AAEnC,YAAI,UAAU;AAAA,UACZ,cAAc,qBAAqBD;AAAA,UACnC,UAAU,YAAYA,SAAQ,cAAc;AAAA,UAC5C,MACE,gBAAgBA,SAChB,UAAUA,SACT,WAAW;AACV,gBAAI;AACF,kBAAI,KAAK;AACT,qBAAO;AAAA,YACT,SAASE,IAAP;AACA,qBAAO;AAAA,YACT;AAAA,UACF,EAAG;AAAA,UACL,UAAU,cAAcF;AAAA,UACxB,aAAa,iBAAiBA;AAAA,QAChC;AAEA,iBAAS,WAAW,KAAK;AACvB,iBAAO,OAAO,SAAS,UAAU,cAAc,GAAG;AAAA,QACpD;AAEA,YAAI,QAAQ,aAAa;AACvB,cAAI,cAAc;AAAA,YAChB;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAEA,cAAI,oBACF,YAAY,UACZ,SAAS,KAAK;AACZ,mBAAO,OAAO,YAAY,QAAQ,OAAO,UAAU,SAAS,KAAK,GAAG,CAAC,IAAI;AAAA,UAC3E;AAAA,QACJ;AAEA,iBAAS,cAAc,MAAM;AAC3B,cAAI,OAAO,SAAS,UAAU;AAC5B,mBAAO,OAAO,IAAI;AAAA,UACpB;AACA,cAAI,4BAA4B,KAAK,IAAI,GAAG;AAC1C,kBAAM,IAAI,UAAU,wCAAwC;AAAA,UAC9D;AACA,iBAAO,KAAK,YAAY;AAAA,QAC1B;AAEA,iBAAS,eAAe,OAAO;AAC7B,cAAI,OAAO,UAAU,UAAU;AAC7B,oBAAQ,OAAO,KAAK;AAAA,UACtB;AACA,iBAAO;AAAA,QACT;AAGA,iBAAS,YAAY,OAAO;AAC1B,cAAI,WAAW;AAAA,YACb,MAAM,WAAW;AACf,kBAAI,QAAQ,MAAM,MAAM;AACxB,qBAAO,EAAC,MAAM,UAAU,QAAW,MAAY;AAAA,YACjD;AAAA,UACF;AAEA,cAAI,QAAQ,UAAU;AACpB,qBAAS,OAAO,QAAQ,IAAI,WAAW;AACrC,qBAAO;AAAA,YACT;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAEA,iBAAS,QAAQ,SAAS;AACxB,eAAK,MAAM,CAAC;AAEZ,cAAI,mBAAmB,SAAS;AAC9B,oBAAQ,QAAQ,SAAS,OAAO,MAAM;AACpC,mBAAK,OAAO,MAAM,KAAK;AAAA,YACzB,GAAG,IAAI;AAAA,UACT,WAAW,MAAM,QAAQ,OAAO,GAAG;AACjC,oBAAQ,QAAQ,SAAS,QAAQ;AAC/B,mBAAK,OAAO,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAAA,YAClC,GAAG,IAAI;AAAA,UACT,WAAW,SAAS;AAClB,mBAAO,oBAAoB,OAAO,EAAE,QAAQ,SAAS,MAAM;AACzD,mBAAK,OAAO,MAAM,QAAQ,IAAI,CAAC;AAAA,YACjC,GAAG,IAAI;AAAA,UACT;AAAA,QACF;AAEA,gBAAQ,UAAU,SAAS,SAAS,MAAM,OAAO;AAC/C,iBAAO,cAAc,IAAI;AACzB,kBAAQ,eAAe,KAAK;AAC5B,cAAI,WAAW,KAAK,IAAI,IAAI;AAC5B,eAAK,IAAI,IAAI,IAAI,WAAW,WAAW,OAAO,QAAQ;AAAA,QACxD;AAEA,gBAAQ,UAAU,QAAQ,IAAI,SAAS,MAAM;AAC3C,iBAAO,KAAK,IAAI,cAAc,IAAI,CAAC;AAAA,QACrC;AAEA,gBAAQ,UAAU,MAAM,SAAS,MAAM;AACrC,iBAAO,cAAc,IAAI;AACzB,iBAAO,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI;AAAA,QAC3C;AAEA,gBAAQ,UAAU,MAAM,SAAS,MAAM;AACrC,iBAAO,KAAK,IAAI,eAAe,cAAc,IAAI,CAAC;AAAA,QACpD;AAEA,gBAAQ,UAAU,MAAM,SAAS,MAAM,OAAO;AAC5C,eAAK,IAAI,cAAc,IAAI,CAAC,IAAI,eAAe,KAAK;AAAA,QACtD;AAEA,gBAAQ,UAAU,UAAU,SAAS,UAAU,SAAS;AACtD,mBAAS,QAAQ,KAAK,KAAK;AACzB,gBAAI,KAAK,IAAI,eAAe,IAAI,GAAG;AACjC,uBAAS,KAAK,SAAS,KAAK,IAAI,IAAI,GAAG,MAAM,IAAI;AAAA,YACnD;AAAA,UACF;AAAA,QACF;AAEA,gBAAQ,UAAU,OAAO,WAAW;AAClC,cAAI,QAAQ,CAAC;AACb,eAAK,QAAQ,SAAS,OAAO,MAAM;AACjC,kBAAM,KAAK,IAAI;AAAA,UACjB,CAAC;AACD,iBAAO,YAAY,KAAK;AAAA,QAC1B;AAEA,gBAAQ,UAAU,SAAS,WAAW;AACpC,cAAI,QAAQ,CAAC;AACb,eAAK,QAAQ,SAAS,OAAO;AAC3B,kBAAM,KAAK,KAAK;AAAA,UAClB,CAAC;AACD,iBAAO,YAAY,KAAK;AAAA,QAC1B;AAEA,gBAAQ,UAAU,UAAU,WAAW;AACrC,cAAI,QAAQ,CAAC;AACb,eAAK,QAAQ,SAAS,OAAO,MAAM;AACjC,kBAAM,KAAK,CAAC,MAAM,KAAK,CAAC;AAAA,UAC1B,CAAC;AACD,iBAAO,YAAY,KAAK;AAAA,QAC1B;AAEA,YAAI,QAAQ,UAAU;AACpB,kBAAQ,UAAU,OAAO,QAAQ,IAAI,QAAQ,UAAU;AAAA,QACzD;AAEA,iBAAS,SAAS,MAAM;AACtB,cAAI,KAAK,UAAU;AACjB,mBAAO,QAAQ,OAAO,IAAI,UAAU,cAAc,CAAC;AAAA,UACrD;AACA,eAAK,WAAW;AAAA,QAClB;AAEA,iBAAS,gBAAgB,QAAQ;AAC/B,iBAAO,IAAI,QAAQ,SAAS,SAAS,QAAQ;AAC3C,mBAAO,SAAS,WAAW;AACzB,sBAAQ,OAAO,MAAM;AAAA,YACvB;AACA,mBAAO,UAAU,WAAW;AAC1B,qBAAO,OAAO,KAAK;AAAA,YACrB;AAAA,UACF,CAAC;AAAA,QACH;AAEA,iBAAS,sBAAsB,MAAM;AACnC,cAAI,SAAS,IAAI,WAAW;AAC5B,cAAI,UAAU,gBAAgB,MAAM;AACpC,iBAAO,kBAAkB,IAAI;AAC7B,iBAAO;AAAA,QACT;AAEA,iBAAS,eAAe,MAAM;AAC5B,cAAI,SAAS,IAAI,WAAW;AAC5B,cAAI,UAAU,gBAAgB,MAAM;AACpC,iBAAO,WAAW,IAAI;AACtB,iBAAO;AAAA,QACT;AAEA,iBAAS,sBAAsB,KAAK;AAClC,cAAI,OAAO,IAAI,WAAW,GAAG;AAC7B,cAAI,QAAQ,IAAI,MAAM,KAAK,MAAM;AAEjC,mBAASG,KAAI,GAAGA,KAAI,KAAK,QAAQA,MAAK;AACpC,kBAAMA,EAAC,IAAI,OAAO,aAAa,KAAKA,EAAC,CAAC;AAAA,UACxC;AACA,iBAAO,MAAM,KAAK,EAAE;AAAA,QACtB;AAEA,iBAAS,YAAY,KAAK;AACxB,cAAI,IAAI,OAAO;AACb,mBAAO,IAAI,MAAM,CAAC;AAAA,UACpB,OAAO;AACL,gBAAI,OAAO,IAAI,WAAW,IAAI,UAAU;AACxC,iBAAK,IAAI,IAAI,WAAW,GAAG,CAAC;AAC5B,mBAAO,KAAK;AAAA,UACd;AAAA,QACF;AAEA,iBAAS,OAAO;AACd,eAAK,WAAW;AAEhB,eAAK,YAAY,SAAS,MAAM;AAC9B,iBAAK,YAAY;AACjB,gBAAI,CAAC,MAAM;AACT,mBAAK,YAAY;AAAA,YACnB,WAAW,OAAO,SAAS,UAAU;AACnC,mBAAK,YAAY;AAAA,YACnB,WAAW,QAAQ,QAAQ,KAAK,UAAU,cAAc,IAAI,GAAG;AAC7D,mBAAK,YAAY;AAAA,YACnB,WAAW,QAAQ,YAAY,SAAS,UAAU,cAAc,IAAI,GAAG;AACrE,mBAAK,gBAAgB;AAAA,YACvB,WAAW,QAAQ,gBAAgB,gBAAgB,UAAU,cAAc,IAAI,GAAG;AAChF,mBAAK,YAAY,KAAK,SAAS;AAAA,YACjC,WAAW,QAAQ,eAAe,QAAQ,QAAQ,WAAW,IAAI,GAAG;AAClE,mBAAK,mBAAmB,YAAY,KAAK,MAAM;AAE/C,mBAAK,YAAY,IAAI,KAAK,CAAC,KAAK,gBAAgB,CAAC;AAAA,YACnD,WAAW,QAAQ,gBAAgB,YAAY,UAAU,cAAc,IAAI,KAAK,kBAAkB,IAAI,IAAI;AACxG,mBAAK,mBAAmB,YAAY,IAAI;AAAA,YAC1C,OAAO;AACL,mBAAK,YAAY,OAAO,OAAO,UAAU,SAAS,KAAK,IAAI;AAAA,YAC7D;AAEA,gBAAI,CAAC,KAAK,QAAQ,IAAI,cAAc,GAAG;AACrC,kBAAI,OAAO,SAAS,UAAU;AAC5B,qBAAK,QAAQ,IAAI,gBAAgB,0BAA0B;AAAA,cAC7D,WAAW,KAAK,aAAa,KAAK,UAAU,MAAM;AAChD,qBAAK,QAAQ,IAAI,gBAAgB,KAAK,UAAU,IAAI;AAAA,cACtD,WAAW,QAAQ,gBAAgB,gBAAgB,UAAU,cAAc,IAAI,GAAG;AAChF,qBAAK,QAAQ,IAAI,gBAAgB,iDAAiD;AAAA,cACpF;AAAA,YACF;AAAA,UACF;AAEA,cAAI,QAAQ,MAAM;AAChB,iBAAK,OAAO,WAAW;AACrB,kBAAI,WAAW,SAAS,IAAI;AAC5B,kBAAI,UAAU;AACZ,uBAAO;AAAA,cACT;AAEA,kBAAI,KAAK,WAAW;AAClB,uBAAO,QAAQ,QAAQ,KAAK,SAAS;AAAA,cACvC,WAAW,KAAK,kBAAkB;AAChC,uBAAO,QAAQ,QAAQ,IAAI,KAAK,CAAC,KAAK,gBAAgB,CAAC,CAAC;AAAA,cAC1D,WAAW,KAAK,eAAe;AAC7B,sBAAM,IAAI,MAAM,sCAAsC;AAAA,cACxD,OAAO;AACL,uBAAO,QAAQ,QAAQ,IAAI,KAAK,CAAC,KAAK,SAAS,CAAC,CAAC;AAAA,cACnD;AAAA,YACF;AAEA,iBAAK,cAAc,WAAW;AAC5B,kBAAI,KAAK,kBAAkB;AACzB,uBAAO,SAAS,IAAI,KAAK,QAAQ,QAAQ,KAAK,gBAAgB;AAAA,cAChE,OAAO;AACL,uBAAO,KAAK,KAAK,EAAE,KAAK,qBAAqB;AAAA,cAC/C;AAAA,YACF;AAAA,UACF;AAEA,eAAK,OAAO,WAAW;AACrB,gBAAI,WAAW,SAAS,IAAI;AAC5B,gBAAI,UAAU;AACZ,qBAAO;AAAA,YACT;AAEA,gBAAI,KAAK,WAAW;AAClB,qBAAO,eAAe,KAAK,SAAS;AAAA,YACtC,WAAW,KAAK,kBAAkB;AAChC,qBAAO,QAAQ,QAAQ,sBAAsB,KAAK,gBAAgB,CAAC;AAAA,YACrE,WAAW,KAAK,eAAe;AAC7B,oBAAM,IAAI,MAAM,sCAAsC;AAAA,YACxD,OAAO;AACL,qBAAO,QAAQ,QAAQ,KAAK,SAAS;AAAA,YACvC;AAAA,UACF;AAEA,cAAI,QAAQ,UAAU;AACpB,iBAAK,WAAW,WAAW;AACzB,qBAAO,KAAK,KAAK,EAAE,KAAK,MAAM;AAAA,YAChC;AAAA,UACF;AAEA,eAAK,OAAO,WAAW;AACrB,mBAAO,KAAK,KAAK,EAAE,KAAK,KAAK,KAAK;AAAA,UACpC;AAEA,iBAAO;AAAA,QACT;AAGA,YAAI,UAAU,CAAC,UAAU,OAAO,QAAQ,WAAW,QAAQ,KAAK;AAEhE,iBAAS,gBAAgB,QAAQ;AAC/B,cAAI,UAAU,OAAO,YAAY;AACjC,iBAAO,QAAQ,QAAQ,OAAO,IAAI,KAAK,UAAU;AAAA,QACnD;AAEA,iBAAS,QAAQ,OAAO,SAAS;AAC/B,oBAAU,WAAW,CAAC;AACtB,cAAI,OAAO,QAAQ;AAEnB,cAAI,iBAAiB,SAAS;AAC5B,gBAAI,MAAM,UAAU;AAClB,oBAAM,IAAI,UAAU,cAAc;AAAA,YACpC;AACA,iBAAK,MAAM,MAAM;AACjB,iBAAK,cAAc,MAAM;AACzB,gBAAI,CAAC,QAAQ,SAAS;AACpB,mBAAK,UAAU,IAAI,QAAQ,MAAM,OAAO;AAAA,YAC1C;AACA,iBAAK,SAAS,MAAM;AACpB,iBAAK,OAAO,MAAM;AAClB,iBAAK,SAAS,MAAM;AACpB,gBAAI,CAAC,QAAQ,MAAM,aAAa,MAAM;AACpC,qBAAO,MAAM;AACb,oBAAM,WAAW;AAAA,YACnB;AAAA,UACF,OAAO;AACL,iBAAK,MAAM,OAAO,KAAK;AAAA,UACzB;AAEA,eAAK,cAAc,QAAQ,eAAe,KAAK,eAAe;AAC9D,cAAI,QAAQ,WAAW,CAAC,KAAK,SAAS;AACpC,iBAAK,UAAU,IAAI,QAAQ,QAAQ,OAAO;AAAA,UAC5C;AACA,eAAK,SAAS,gBAAgB,QAAQ,UAAU,KAAK,UAAU,KAAK;AACpE,eAAK,OAAO,QAAQ,QAAQ,KAAK,QAAQ;AACzC,eAAK,SAAS,QAAQ,UAAU,KAAK;AACrC,eAAK,WAAW;AAEhB,eAAK,KAAK,WAAW,SAAS,KAAK,WAAW,WAAW,MAAM;AAC7D,kBAAM,IAAI,UAAU,2CAA2C;AAAA,UACjE;AACA,eAAK,UAAU,IAAI;AAAA,QACrB;AAEA,gBAAQ,UAAU,QAAQ,WAAW;AACnC,iBAAO,IAAI,QAAQ,MAAM,EAAC,MAAM,KAAK,UAAS,CAAC;AAAA,QACjD;AAEA,iBAAS,OAAO,MAAM;AACpB,cAAI,OAAO,IAAI,SAAS;AACxB,eACG,KAAK,EACL,MAAM,GAAG,EACT,QAAQ,SAAS,OAAO;AACvB,gBAAI,OAAO;AACT,kBAAI,QAAQ,MAAM,MAAM,GAAG;AAC3B,kBAAI,OAAO,MAAM,MAAM,EAAE,QAAQ,OAAO,GAAG;AAC3C,kBAAI,QAAQ,MAAM,KAAK,GAAG,EAAE,QAAQ,OAAO,GAAG;AAC9C,mBAAK,OAAO,mBAAmB,IAAI,GAAG,mBAAmB,KAAK,CAAC;AAAA,YACjE;AAAA,UACF,CAAC;AACH,iBAAO;AAAA,QACT;AAEA,iBAAS,aAAa,YAAY;AAChC,cAAI,UAAU,IAAI,QAAQ;AAG1B,cAAI,sBAAsB,WAAW,QAAQ,gBAAgB,GAAG;AAChE,8BAAoB,MAAM,OAAO,EAAE,QAAQ,SAAS,MAAM;AACxD,gBAAI,QAAQ,KAAK,MAAM,GAAG;AAC1B,gBAAI,MAAM,MAAM,MAAM,EAAE,KAAK;AAC7B,gBAAI,KAAK;AACP,kBAAI,QAAQ,MAAM,KAAK,GAAG,EAAE,KAAK;AACjC,sBAAQ,OAAO,KAAK,KAAK;AAAA,YAC3B;AAAA,UACF,CAAC;AACD,iBAAO;AAAA,QACT;AAEA,aAAK,KAAK,QAAQ,SAAS;AAE3B,iBAAS,SAAS,UAAU,SAAS;AACnC,cAAI,CAAC,SAAS;AACZ,sBAAU,CAAC;AAAA,UACb;AAEA,eAAK,OAAO;AACZ,eAAK,SAAS,QAAQ,WAAW,SAAY,MAAM,QAAQ;AAC3D,eAAK,KAAK,KAAK,UAAU,OAAO,KAAK,SAAS;AAC9C,eAAK,aAAa,gBAAgB,UAAU,QAAQ,aAAa;AACjE,eAAK,UAAU,IAAI,QAAQ,QAAQ,OAAO;AAC1C,eAAK,MAAM,QAAQ,OAAO;AAC1B,eAAK,UAAU,QAAQ;AAAA,QACzB;AAEA,aAAK,KAAK,SAAS,SAAS;AAE5B,iBAAS,UAAU,QAAQ,WAAW;AACpC,iBAAO,IAAI,SAAS,KAAK,WAAW;AAAA,YAClC,QAAQ,KAAK;AAAA,YACb,YAAY,KAAK;AAAA,YACjB,SAAS,IAAI,QAAQ,KAAK,OAAO;AAAA,YACjC,KAAK,KAAK;AAAA,UACZ,CAAC;AAAA,QACH;AAEA,iBAAS,QAAQ,WAAW;AAC1B,cAAI,WAAW,IAAI,SAAS,MAAM,EAAC,QAAQ,GAAG,YAAY,GAAE,CAAC;AAC7D,mBAAS,OAAO;AAChB,iBAAO;AAAA,QACT;AAEA,YAAI,mBAAmB,CAAC,KAAK,KAAK,KAAK,KAAK,GAAG;AAE/C,iBAAS,WAAW,SAAS,KAAK,QAAQ;AACxC,cAAI,iBAAiB,QAAQ,MAAM,MAAM,IAAI;AAC3C,kBAAM,IAAI,WAAW,qBAAqB;AAAA,UAC5C;AAEA,iBAAO,IAAI,SAAS,MAAM,EAAC,QAAgB,SAAS,EAAC,UAAU,IAAG,EAAC,CAAC;AAAA,QACtE;AAEA,QAAAF,SAAQ,eAAeD,MAAK;AAC5B,YAAI;AACF,cAAIC,SAAQ,aAAa;AAAA,QAC3B,SAAS,KAAP;AACA,UAAAA,SAAQ,eAAe,SAAS,SAAS,MAAM;AAC7C,iBAAK,UAAU;AACf,iBAAK,OAAO;AACZ,gBAAI,QAAQ,MAAM,OAAO;AACzB,iBAAK,QAAQ,MAAM;AAAA,UACrB;AACA,UAAAA,SAAQ,aAAa,YAAY,OAAO,OAAO,MAAM,SAAS;AAC9D,UAAAA,SAAQ,aAAa,UAAU,cAAcA,SAAQ;AAAA,QACvD;AAEA,iBAAS,MAAM,OAAO,MAAM;AAC1B,iBAAO,IAAI,QAAQ,SAAS,SAAS,QAAQ;AAC3C,gBAAI,UAAU,IAAI,QAAQ,OAAO,IAAI;AAErC,gBAAI,QAAQ,UAAU,QAAQ,OAAO,SAAS;AAC5C,qBAAO,OAAO,IAAIA,SAAQ,aAAa,WAAW,YAAY,CAAC;AAAA,YACjE;AAEA,gBAAI,MAAM,IAAI,eAAe;AAE7B,qBAAS,WAAW;AAClB,kBAAI,MAAM;AAAA,YACZ;AAEA,gBAAI,SAAS,WAAW;AACtB,kBAAI,UAAU;AAAA,gBACZ,QAAQ,IAAI;AAAA,gBACZ,YAAY,IAAI;AAAA,gBAChB,SAAS,aAAa,IAAI,sBAAsB,KAAK,EAAE;AAAA,cACzD;AACA,sBAAQ,MAAM,iBAAiB,MAAM,IAAI,cAAc,QAAQ,QAAQ,IAAI,eAAe;AAC1F,kBAAI,OAAO,cAAc,MAAM,IAAI,WAAW,IAAI;AAClD,sBAAQ,IAAI,SAAS,MAAM,OAAO,CAAC;AAAA,YACrC;AAEA,gBAAI,UAAU,WAAW;AACvB,qBAAO,IAAI,UAAU,wBAAwB,CAAC;AAAA,YAChD;AAEA,gBAAI,YAAY,WAAW;AACzB,qBAAO,IAAI,UAAU,wBAAwB,CAAC;AAAA,YAChD;AAEA,gBAAI,UAAU,WAAW;AACvB,qBAAO,IAAIA,SAAQ,aAAa,WAAW,YAAY,CAAC;AAAA,YAC1D;AAEA,gBAAI,KAAK,QAAQ,QAAQ,QAAQ,KAAK,IAAI;AAE1C,gBAAI,QAAQ,gBAAgB,WAAW;AACrC,kBAAI,kBAAkB;AAAA,YACxB,WAAW,QAAQ,gBAAgB,QAAQ;AACzC,kBAAI,kBAAkB;AAAA,YACxB;AAEA,gBAAI,kBAAkB,OAAO,QAAQ,MAAM;AACzC,kBAAI,eAAe;AAAA,YACrB;AAEA,oBAAQ,QAAQ,QAAQ,SAAS,OAAO,MAAM;AAC5C,kBAAI,iBAAiB,MAAM,KAAK;AAAA,YAClC,CAAC;AAED,gBAAI,QAAQ,QAAQ;AAClB,sBAAQ,OAAO,iBAAiB,SAAS,QAAQ;AAEjD,kBAAI,qBAAqB,WAAW;AAElC,oBAAI,IAAI,eAAe,GAAG;AACxB,0BAAQ,OAAO,oBAAoB,SAAS,QAAQ;AAAA,gBACtD;AAAA,cACF;AAAA,YACF;AAEA,gBAAI,KAAK,OAAO,QAAQ,cAAc,cAAc,OAAO,QAAQ,SAAS;AAAA,UAC9E,CAAC;AAAA,QACH;AAEA,cAAM,WAAW;AAEjB,YAAI,CAACD,MAAK,OAAO;AACf,UAAAA,MAAK,QAAQ;AACb,UAAAA,MAAK,UAAU;AACf,UAAAA,MAAK,UAAU;AACf,UAAAA,MAAK,WAAW;AAAA,QAClB;AAEA,QAAAC,SAAQ,UAAU;AAClB,QAAAA,SAAQ,UAAU;AAClB,QAAAA,SAAQ,WAAW;AACnB,QAAAA,SAAQ,QAAQ;AAEhB,eAAO,eAAeA,UAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAE5D,eAAOA;AAAA,MAET,EAAG,CAAC,CAAC;AAAA,IACL,GAAG,QAAQ;AACX,aAAS,MAAM,WAAW;AAE1B,WAAO,SAAS,MAAM;AAGtB,QAAI,MAAM;AACV,cAAU,IAAI;AACd,YAAQ,UAAU,IAAI;AACtB,YAAQ,QAAQ,IAAI;AACpB,YAAQ,UAAU,IAAI;AACtB,YAAQ,UAAU,IAAI;AACtB,YAAQ,WAAW,IAAI;AACvB,WAAO,UAAU;AAAA;AAAA;;;ACziBjB;AAAA;AAAA,WAAO,UAAU,OAAO,OAAO,IAAI,MAAM,CAAC,GAAG;AAAA,MAC3C,IAAI,GAAG,KAAK;AACV,YACE,QAAQ,gBACR,QAAQ,eACR,QAAQ,iBACR,QAAQ,UACR;AACA,kBAAQ,KAAK,0FAA0F,uIAAuI;AAAA,QAChP;AAAA,MACF;AAAA,IACF,CAAC,CAAC;AAAA;AAAA;;;ACXF;AAAA;AAAC,KAAC,SAAU,MAAM,SAAS;AAC1B,UAAI,OAAO,YAAY,UAAU;AAEhC,eAAO,UAAU,UAAU,QAAQ;AAAA,MACpC,WACS,OAAO,WAAW,cAAc,OAAO,KAAK;AAEpD,eAAO,CAAC,GAAG,OAAO;AAAA,MACnB,OACK;AAEJ,aAAK,WAAW,QAAQ;AAAA,MACzB;AAAA,IACD,GAAE,SAAM,WAAY;AAOnB,UAAI,WAAW,YAAa,SAAUG,OAAMC,YAAW;AAEnD,YAAI;AAGJ,YAAI,OAAO,WAAW,eAAe,OAAO,QAAQ;AAChD,mBAAS,OAAO;AAAA,QACpB;AAGA,YAAI,OAAO,SAAS,eAAe,KAAK,QAAQ;AAC5C,mBAAS,KAAK;AAAA,QAClB;AAGA,YAAI,OAAO,eAAe,eAAe,WAAW,QAAQ;AACxD,mBAAS,WAAW;AAAA,QACxB;AAGA,YAAI,CAAC,UAAU,OAAO,WAAW,eAAe,OAAO,UAAU;AAC7D,mBAAS,OAAO;AAAA,QACpB;AAGA,YAAI,CAAC,UAAU,OAAO,WAAW,eAAe,OAAO,QAAQ;AAC3D,mBAAS,OAAO;AAAA,QACpB;AAGA,YAAI,CAAC,UAAU,OAAO,cAAY,YAAY;AAC1C,cAAI;AACA,qBAAS;AAAA,UACb,SAAS,KAAP;AAAA,UAAa;AAAA,QACnB;AAOA,YAAI,wBAAwB,WAAY;AACpC,cAAI,QAAQ;AAER,gBAAI,OAAO,OAAO,oBAAoB,YAAY;AAC9C,kBAAI;AACA,uBAAO,OAAO,gBAAgB,IAAI,YAAY,CAAC,CAAC,EAAE,CAAC;AAAA,cACvD,SAAS,KAAP;AAAA,cAAa;AAAA,YACnB;AAGA,gBAAI,OAAO,OAAO,gBAAgB,YAAY;AAC1C,kBAAI;AACA,uBAAO,OAAO,YAAY,CAAC,EAAE,YAAY;AAAA,cAC7C,SAAS,KAAP;AAAA,cAAa;AAAA,YACnB;AAAA,UACJ;AAEA,gBAAM,IAAI,MAAM,qEAAqE;AAAA,QACzF;AAMA,YAAI,SAAS,OAAO,UAAW,WAAY;AACvC,mBAAS,IAAI;AAAA,UAAC;AAEd,iBAAO,SAAU,KAAK;AAClB,gBAAI;AAEJ,cAAE,YAAY;AAEd,sBAAU,IAAI,EAAE;AAEhB,cAAE,YAAY;AAEd,mBAAO;AAAA,UACX;AAAA,QACJ,EAAE;AAKF,YAAI,IAAI,CAAC;AAKT,YAAI,QAAQ,EAAE,MAAM,CAAC;AAKrB,YAAI,OAAO,MAAM,OAAQ,WAAY;AAGjC,iBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAmBH,QAAQ,SAAU,WAAW;AAEzB,kBAAI,UAAU,OAAO,IAAI;AAGzB,kBAAI,WAAW;AACX,wBAAQ,MAAM,SAAS;AAAA,cAC3B;AAGA,kBAAI,CAAC,QAAQ,eAAe,MAAM,KAAK,KAAK,SAAS,QAAQ,MAAM;AAC/D,wBAAQ,OAAO,WAAY;AACvB,0BAAQ,OAAO,KAAK,MAAM,MAAM,SAAS;AAAA,gBAC7C;AAAA,cACJ;AAGA,sBAAQ,KAAK,YAAY;AAGzB,sBAAQ,SAAS;AAEjB,qBAAO;AAAA,YACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAcA,QAAQ,WAAY;AAChB,kBAAI,WAAW,KAAK,OAAO;AAC3B,uBAAS,KAAK,MAAM,UAAU,SAAS;AAEvC,qBAAO;AAAA,YACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAcA,MAAM,WAAY;AAAA,YAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAaA,OAAO,SAAU,YAAY;AACzB,uBAAS,gBAAgB,YAAY;AACjC,oBAAI,WAAW,eAAe,YAAY,GAAG;AACzC,uBAAK,YAAY,IAAI,WAAW,YAAY;AAAA,gBAChD;AAAA,cACJ;AAGA,kBAAI,WAAW,eAAe,UAAU,GAAG;AACvC,qBAAK,WAAW,WAAW;AAAA,cAC/B;AAAA,YACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAWA,OAAO,WAAY;AACf,qBAAO,KAAK,KAAK,UAAU,OAAO,IAAI;AAAA,YAC1C;AAAA,UACJ;AAAA,QACJ,EAAE;AAQF,YAAI,YAAY,MAAM,YAAY,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAa1C,MAAM,SAAU,OAAO,UAAU;AAC7B,oBAAQ,KAAK,QAAQ,SAAS,CAAC;AAE/B,gBAAI,YAAYA,YAAW;AACvB,mBAAK,WAAW;AAAA,YACpB,OAAO;AACH,mBAAK,WAAW,MAAM,SAAS;AAAA,YACnC;AAAA,UACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeA,UAAU,SAAU,SAAS;AACzB,oBAAQ,WAAW,KAAK,UAAU,IAAI;AAAA,UAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAaA,QAAQ,SAAU,WAAW;AAEzB,gBAAI,YAAY,KAAK;AACrB,gBAAI,YAAY,UAAU;AAC1B,gBAAI,eAAe,KAAK;AACxB,gBAAI,eAAe,UAAU;AAG7B,iBAAK,MAAM;AAGX,gBAAI,eAAe,GAAG;AAElB,uBAASC,KAAI,GAAGA,KAAI,cAAcA,MAAK;AACnC,oBAAI,WAAY,UAAUA,OAAM,CAAC,MAAO,KAAMA,KAAI,IAAK,IAAM;AAC7D,0BAAW,eAAeA,OAAO,CAAC,KAAK,YAAa,MAAO,eAAeA,MAAK,IAAK;AAAA,cACxF;AAAA,YACJ,OAAO;AAEH,uBAAS,IAAI,GAAG,IAAI,cAAc,KAAK,GAAG;AACtC,0BAAW,eAAe,MAAO,CAAC,IAAI,UAAU,MAAM,CAAC;AAAA,cAC3D;AAAA,YACJ;AACA,iBAAK,YAAY;AAGjB,mBAAO;AAAA,UACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASA,OAAO,WAAY;AAEf,gBAAI,QAAQ,KAAK;AACjB,gBAAI,WAAW,KAAK;AAGpB,kBAAM,aAAa,CAAC,KAAK,cAAe,KAAM,WAAW,IAAK;AAC9D,kBAAM,SAASF,MAAK,KAAK,WAAW,CAAC;AAAA,UACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAWA,OAAO,WAAY;AACf,gBAAI,QAAQ,KAAK,MAAM,KAAK,IAAI;AAChC,kBAAM,QAAQ,KAAK,MAAM,MAAM,CAAC;AAEhC,mBAAO;AAAA,UACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeA,QAAQ,SAAU,QAAQ;AACtB,gBAAI,QAAQ,CAAC;AAEb,qBAASE,KAAI,GAAGA,KAAI,QAAQA,MAAK,GAAG;AAChC,oBAAM,KAAK,sBAAsB,CAAC;AAAA,YACtC;AAEA,mBAAO,IAAI,UAAU,KAAK,OAAO,MAAM;AAAA,UAC3C;AAAA,QACJ,CAAC;AAKD,YAAI,QAAQ,EAAE,MAAM,CAAC;AAKrB,YAAI,MAAM,MAAM,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAclB,WAAW,SAAU,WAAW;AAE5B,gBAAI,QAAQ,UAAU;AACtB,gBAAI,WAAW,UAAU;AAGzB,gBAAI,WAAW,CAAC;AAChB,qBAASA,KAAI,GAAGA,KAAI,UAAUA,MAAK;AAC/B,kBAAI,OAAQ,MAAMA,OAAM,CAAC,MAAO,KAAMA,KAAI,IAAK,IAAM;AACrD,uBAAS,MAAM,SAAS,GAAG,SAAS,EAAE,CAAC;AACvC,uBAAS,MAAM,OAAO,IAAM,SAAS,EAAE,CAAC;AAAA,YAC5C;AAEA,mBAAO,SAAS,KAAK,EAAE;AAAA,UAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeA,OAAO,SAAU,QAAQ;AAErB,gBAAI,eAAe,OAAO;AAG1B,gBAAI,QAAQ,CAAC;AACb,qBAASA,KAAI,GAAGA,KAAI,cAAcA,MAAK,GAAG;AACtC,oBAAMA,OAAM,CAAC,KAAK,SAAS,OAAO,OAAOA,IAAG,CAAC,GAAG,EAAE,KAAM,KAAMA,KAAI,IAAK;AAAA,YAC3E;AAEA,mBAAO,IAAI,UAAU,KAAK,OAAO,eAAe,CAAC;AAAA,UACrD;AAAA,QACJ;AAKA,YAAI,SAAS,MAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAcxB,WAAW,SAAU,WAAW;AAE5B,gBAAI,QAAQ,UAAU;AACtB,gBAAI,WAAW,UAAU;AAGzB,gBAAI,cAAc,CAAC;AACnB,qBAASA,KAAI,GAAGA,KAAI,UAAUA,MAAK;AAC/B,kBAAI,OAAQ,MAAMA,OAAM,CAAC,MAAO,KAAMA,KAAI,IAAK,IAAM;AACrD,0BAAY,KAAK,OAAO,aAAa,IAAI,CAAC;AAAA,YAC9C;AAEA,mBAAO,YAAY,KAAK,EAAE;AAAA,UAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeA,OAAO,SAAU,WAAW;AAExB,gBAAI,kBAAkB,UAAU;AAGhC,gBAAI,QAAQ,CAAC;AACb,qBAASA,KAAI,GAAGA,KAAI,iBAAiBA,MAAK;AACtC,oBAAMA,OAAM,CAAC,MAAM,UAAU,WAAWA,EAAC,IAAI,QAAU,KAAMA,KAAI,IAAK;AAAA,YAC1E;AAEA,mBAAO,IAAI,UAAU,KAAK,OAAO,eAAe;AAAA,UACpD;AAAA,QACJ;AAKA,YAAI,OAAO,MAAM,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAcpB,WAAW,SAAU,WAAW;AAC5B,gBAAI;AACA,qBAAO,mBAAmB,OAAO,OAAO,UAAU,SAAS,CAAC,CAAC;AAAA,YACjE,SAASC,IAAP;AACE,oBAAM,IAAI,MAAM,sBAAsB;AAAA,YAC1C;AAAA,UACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeA,OAAO,SAAU,SAAS;AACtB,mBAAO,OAAO,MAAM,SAAS,mBAAmB,OAAO,CAAC,CAAC;AAAA,UAC7D;AAAA,QACJ;AASA,YAAI,yBAAyB,MAAM,yBAAyB,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQpE,OAAO,WAAY;AAEf,iBAAK,QAAQ,IAAI,UAAU,KAAK;AAChC,iBAAK,cAAc;AAAA,UACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAYA,SAAS,SAAU,MAAM;AAErB,gBAAI,OAAO,QAAQ,UAAU;AACzB,qBAAO,KAAK,MAAM,IAAI;AAAA,YAC1B;AAGA,iBAAK,MAAM,OAAO,IAAI;AACtB,iBAAK,eAAe,KAAK;AAAA,UAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAgBA,UAAU,SAAU,SAAS;AACzB,gBAAI;AAGJ,gBAAI,OAAO,KAAK;AAChB,gBAAI,YAAY,KAAK;AACrB,gBAAI,eAAe,KAAK;AACxB,gBAAI,YAAY,KAAK;AACrB,gBAAI,iBAAiB,YAAY;AAGjC,gBAAI,eAAe,eAAe;AAClC,gBAAI,SAAS;AAET,6BAAeH,MAAK,KAAK,YAAY;AAAA,YACzC,OAAO;AAGH,6BAAeA,MAAK,KAAK,eAAe,KAAK,KAAK,gBAAgB,CAAC;AAAA,YACvE;AAGA,gBAAI,cAAc,eAAe;AAGjC,gBAAI,cAAcA,MAAK,IAAI,cAAc,GAAG,YAAY;AAGxD,gBAAI,aAAa;AACb,uBAAS,SAAS,GAAG,SAAS,aAAa,UAAU,WAAW;AAE5D,qBAAK,gBAAgB,WAAW,MAAM;AAAA,cAC1C;AAGA,+BAAiB,UAAU,OAAO,GAAG,WAAW;AAChD,mBAAK,YAAY;AAAA,YACrB;AAGA,mBAAO,IAAI,UAAU,KAAK,gBAAgB,WAAW;AAAA,UACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAWA,OAAO,WAAY;AACf,gBAAI,QAAQ,KAAK,MAAM,KAAK,IAAI;AAChC,kBAAM,QAAQ,KAAK,MAAM,MAAM;AAE/B,mBAAO;AAAA,UACX;AAAA,UAEA,gBAAgB;AAAA,QACpB,CAAC;AAOD,YAAI,SAAS,MAAM,SAAS,uBAAuB,OAAO;AAAA;AAAA;AAAA;AAAA,UAItD,KAAK,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAWjB,MAAM,SAAU,KAAK;AAEjB,iBAAK,MAAM,KAAK,IAAI,OAAO,GAAG;AAG9B,iBAAK,MAAM;AAAA,UACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASA,OAAO,WAAY;AAEf,mCAAuB,MAAM,KAAK,IAAI;AAGtC,iBAAK,SAAS;AAAA,UAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAcA,QAAQ,SAAU,eAAe;AAE7B,iBAAK,QAAQ,aAAa;AAG1B,iBAAK,SAAS;AAGd,mBAAO;AAAA,UACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAgBA,UAAU,SAAU,eAAe;AAE/B,gBAAI,eAAe;AACf,mBAAK,QAAQ,aAAa;AAAA,YAC9B;AAGA,gBAAI,OAAO,KAAK,YAAY;AAE5B,mBAAO;AAAA,UACX;AAAA,UAEA,WAAW,MAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAef,eAAe,SAAU,QAAQ;AAC7B,mBAAO,SAAU,SAAS,KAAK;AAC3B,qBAAO,IAAI,OAAO,KAAK,GAAG,EAAE,SAAS,OAAO;AAAA,YAChD;AAAA,UACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAeA,mBAAmB,SAAU,QAAQ;AACjC,mBAAO,SAAU,SAAS,KAAK;AAC3B,qBAAO,IAAI,OAAO,KAAK,KAAK,QAAQ,GAAG,EAAE,SAAS,OAAO;AAAA,YAC7D;AAAA,UACJ;AAAA,QACJ,CAAC;AAKD,YAAI,SAAS,EAAE,OAAO,CAAC;AAEvB,eAAO;AAAA,MACX,EAAE,IAAI;AAGN,aAAO;AAAA,IAER,CAAC;AAAA;AAAA;;;ACtyBD;AAAA;AAAC,KAAC,SAAU,MAAM,SAAS;AAC1B,UAAI,OAAO,YAAY,UAAU;AAEhC,eAAO,UAAU,UAAU,QAAQ,cAAiB;AAAA,MACrD,WACS,OAAO,WAAW,cAAc,OAAO,KAAK;AAEpD,eAAO,CAAC,QAAQ,GAAG,OAAO;AAAA,MAC3B,OACK;AAEJ,gBAAQ,KAAK,QAAQ;AAAA,MACtB;AAAA,IACD,GAAE,SAAM,SAAU,UAAU;AAE3B,aAAO,SAAS,IAAI;AAAA,IAErB,CAAC;AAAA;AAAA;;;ACjBD;AAAA;AAAC,KAAC,SAAU,MAAM,SAAS;AAC1B,UAAI,OAAO,YAAY,UAAU;AAEhC,eAAO,UAAU,UAAU,QAAQ,cAAiB;AAAA,MACrD,WACS,OAAO,WAAW,cAAc,OAAO,KAAK;AAEpD,eAAO,CAAC,QAAQ,GAAG,OAAO;AAAA,MAC3B,OACK;AAEJ,gBAAQ,KAAK,QAAQ;AAAA,MACtB;AAAA,IACD,GAAE,SAAM,SAAU,UAAU;AAE3B,OAAC,SAAUI,OAAM;AAEb,YAAI,IAAI;AACR,YAAI,QAAQ,EAAE;AACd,YAAI,YAAY,MAAM;AACtB,YAAI,SAAS,MAAM;AACnB,YAAI,SAAS,EAAE;AAGf,YAAI,IAAI,CAAC;AACT,YAAI,IAAI,CAAC;AAGT,SAAC,WAAY;AACT,mBAAS,QAAQC,IAAG;AAChB,gBAAI,QAAQD,MAAK,KAAKC,EAAC;AACvB,qBAAS,SAAS,GAAG,UAAU,OAAO,UAAU;AAC5C,kBAAI,EAAEA,KAAI,SAAS;AACf,uBAAO;AAAA,cACX;AAAA,YACJ;AAEA,mBAAO;AAAA,UACX;AAEA,mBAAS,kBAAkBA,IAAG;AAC1B,oBAASA,MAAKA,KAAI,MAAM,aAAe;AAAA,UAC3C;AAEA,cAAIA,KAAI;AACR,cAAI,SAAS;AACb,iBAAO,SAAS,IAAI;AAChB,gBAAI,QAAQA,EAAC,GAAG;AACZ,kBAAI,SAAS,GAAG;AACZ,kBAAE,MAAM,IAAI,kBAAkBD,MAAK,IAAIC,IAAG,IAAI,CAAC,CAAC;AAAA,cACpD;AACA,gBAAE,MAAM,IAAI,kBAAkBD,MAAK,IAAIC,IAAG,IAAI,CAAC,CAAC;AAEhD;AAAA,YACJ;AAEA,YAAAA;AAAA,UACJ;AAAA,QACJ,GAAE;AAGF,YAAI,IAAI,CAAC;AAKT,YAAI,SAAS,OAAO,SAAS,OAAO,OAAO;AAAA,UACvC,UAAU,WAAY;AAClB,iBAAK,QAAQ,IAAI,UAAU,KAAK,EAAE,MAAM,CAAC,CAAC;AAAA,UAC9C;AAAA,UAEA,iBAAiB,SAAU,GAAG,QAAQ;AAElC,gBAAIC,KAAI,KAAK,MAAM;AAGnB,gBAAIC,KAAID,GAAE,CAAC;AACX,gBAAIE,KAAIF,GAAE,CAAC;AACX,gBAAIG,KAAIH,GAAE,CAAC;AACX,gBAAII,KAAIJ,GAAE,CAAC;AACX,gBAAIK,KAAIL,GAAE,CAAC;AACX,gBAAIM,KAAIN,GAAE,CAAC;AACX,gBAAIO,KAAIP,GAAE,CAAC;AACX,gBAAIQ,KAAIR,GAAE,CAAC;AAGX,qBAASS,KAAI,GAAGA,KAAI,IAAIA,MAAK;AACzB,kBAAIA,KAAI,IAAI;AACR,kBAAEA,EAAC,IAAI,EAAE,SAASA,EAAC,IAAI;AAAA,cAC3B,OAAO;AACH,oBAAI,UAAU,EAAEA,KAAI,EAAE;AACtB,oBAAI,UAAY,WAAW,KAAO,YAAY,MAC9B,WAAW,KAAO,YAAY,MAC9B,YAAY;AAE5B,oBAAI,UAAU,EAAEA,KAAI,CAAC;AACrB,oBAAI,UAAY,WAAW,KAAO,YAAY,OAC9B,WAAW,KAAO,YAAY,MAC9B,YAAY;AAE5B,kBAAEA,EAAC,IAAI,SAAS,EAAEA,KAAI,CAAC,IAAI,SAAS,EAAEA,KAAI,EAAE;AAAA,cAChD;AAEA,kBAAI,KAAOJ,KAAIC,KAAM,CAACD,KAAIE;AAC1B,kBAAI,MAAON,KAAIC,KAAMD,KAAIE,KAAMD,KAAIC;AAEnC,kBAAI,UAAWF,MAAK,KAAOA,OAAM,MAAQA,MAAK,KAAOA,OAAM,OAASA,MAAK,KAAOA,OAAM;AACtF,kBAAI,UAAWI,MAAK,KAAOA,OAAM,MAAQA,MAAK,KAAOA,OAAM,OAASA,MAAK,IAAOA,OAAM;AAEtF,kBAAI,KAAKG,KAAI,SAAS,KAAK,EAAEC,EAAC,IAAI,EAAEA,EAAC;AACrC,kBAAI,KAAK,SAAS;AAElB,cAAAD,KAAID;AACJ,cAAAA,KAAID;AACJ,cAAAA,KAAID;AACJ,cAAAA,KAAKD,KAAI,KAAM;AACf,cAAAA,KAAID;AACJ,cAAAA,KAAID;AACJ,cAAAA,KAAID;AACJ,cAAAA,KAAK,KAAK,KAAM;AAAA,YACpB;AAGA,YAAAD,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAIC,KAAK;AACpB,YAAAD,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAIE,KAAK;AACpB,YAAAF,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAIG,KAAK;AACpB,YAAAH,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAII,KAAK;AACpB,YAAAJ,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAIK,KAAK;AACpB,YAAAL,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAIM,KAAK;AACpB,YAAAN,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAIO,KAAK;AACpB,YAAAP,GAAE,CAAC,IAAKA,GAAE,CAAC,IAAIQ,KAAK;AAAA,UACxB;AAAA,UAEA,aAAa,WAAY;AAErB,gBAAI,OAAO,KAAK;AAChB,gBAAI,YAAY,KAAK;AAErB,gBAAI,aAAa,KAAK,cAAc;AACpC,gBAAI,YAAY,KAAK,WAAW;AAGhC,sBAAU,cAAc,CAAC,KAAK,OAAS,KAAK,YAAY;AACxD,uBAAa,YAAY,OAAQ,KAAM,KAAK,EAAE,IAAIV,MAAK,MAAM,aAAa,UAAW;AACrF,uBAAa,YAAY,OAAQ,KAAM,KAAK,EAAE,IAAI;AAClD,iBAAK,WAAW,UAAU,SAAS;AAGnC,iBAAK,SAAS;AAGd,mBAAO,KAAK;AAAA,UAChB;AAAA,UAEA,OAAO,WAAY;AACf,gBAAI,QAAQ,OAAO,MAAM,KAAK,IAAI;AAClC,kBAAM,QAAQ,KAAK,MAAM,MAAM;AAE/B,mBAAO;AAAA,UACX;AAAA,QACJ,CAAC;AAgBD,UAAE,SAAS,OAAO,cAAc,MAAM;AAgBtC,UAAE,aAAa,OAAO,kBAAkB,MAAM;AAAA,MAClD,GAAE,IAAI;AAGN,aAAO,SAAS;AAAA,IAEjB,CAAC;AAAA;AAAA;;;ACtMD;AAAA;AAAA;AAEA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAC5D,YAAQ,QAAQ,QAAQ,gBAAgB,QAAQ,MAAM,QAAQ,gBAAgB,QAAQ,MAAM,QAAQ,OAAO,QAAQ,UAAU,QAAQ,SAAS,QAAQ,cAAc,QAAQ,YAAY,QAAQ,YAAY,QAAQ,eAAe,QAAQ,SAAS,QAAQ,YAAY,QAAQ,SAAS,QAAQ,kBAAkB,QAAQ,YAAY,QAAQ,SAAS,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,eAAe;AAChZ,aAAS,aAAaY,IAAG;AACrB,UAAI,CAAC,OAAO,cAAcA,EAAC;AACvB,cAAM,IAAI,MAAM,kBAAkBA,IAAG;AAAA,IAC7C;AACA,YAAQ,eAAe;AACvB,aAAS,SAAS,MAAM;AACpB,YAAM,OAAO,CAACC,IAAGC,OAAM,CAACC,OAAMF,GAAEC,GAAEC,EAAC,CAAC;AACpC,YAAM,SAAS,MAAM,KAAK,IAAI,EACzB,QAAQ,EACR,OAAO,CAAC,KAAKC,OAAO,MAAM,KAAK,KAAKA,GAAE,MAAM,IAAIA,GAAE,QAAS,MAAS;AACzE,YAAM,SAAS,KAAK,OAAO,CAAC,KAAKA,OAAO,MAAM,KAAK,KAAKA,GAAE,MAAM,IAAIA,GAAE,QAAS,MAAS;AACxF,aAAO,EAAE,QAAQ,OAAO;AAAA,IAC5B;AACA,aAAS,SAASC,WAAU;AACxB,aAAO;AAAA,QACH,QAAQ,CAAC,WAAW;AAChB,cAAI,CAAC,MAAM,QAAQ,MAAM,KAAM,OAAO,UAAU,OAAO,OAAO,CAAC,MAAM;AACjE,kBAAM,IAAI,MAAM,qDAAqD;AACzE,iBAAO,OAAO,IAAI,CAACD,OAAM;AACrB,yBAAaA,EAAC;AACd,gBAAIA,KAAI,KAAKA,MAAKC,UAAS;AACvB,oBAAM,IAAI,MAAM,iCAAiCD,iBAAgBC,UAAS,SAAS;AACvF,mBAAOA,UAASD,EAAC;AAAA,UACrB,CAAC;AAAA,QACL;AAAA,QACA,QAAQ,CAAC,UAAU;AACf,cAAI,CAAC,MAAM,QAAQ,KAAK,KAAM,MAAM,UAAU,OAAO,MAAM,CAAC,MAAM;AAC9D,kBAAM,IAAI,MAAM,kDAAkD;AACtE,iBAAO,MAAM,IAAI,CAAC,WAAW;AACzB,gBAAI,OAAO,WAAW;AAClB,oBAAM,IAAI,MAAM,uCAAuC,QAAQ;AACnE,kBAAM,QAAQC,UAAS,QAAQ,MAAM;AACrC,gBAAI,UAAU;AACV,oBAAM,IAAI,MAAM,oBAAoB,qBAAqBA,WAAU;AACvE,mBAAO;AAAA,UACX,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,KAAK,YAAY,IAAI;AAC1B,UAAI,OAAO,cAAc;AACrB,cAAM,IAAI,MAAM,iCAAiC;AACrD,aAAO;AAAA,QACH,QAAQ,CAAC,SAAS;AACd,cAAI,CAAC,MAAM,QAAQ,IAAI,KAAM,KAAK,UAAU,OAAO,KAAK,CAAC,MAAM;AAC3D,kBAAM,IAAI,MAAM,8CAA8C;AAClE,mBAASD,MAAK;AACV,gBAAI,OAAOA,OAAM;AACb,oBAAM,IAAI,MAAM,iCAAiCA,IAAG;AAC5D,iBAAO,KAAK,KAAK,SAAS;AAAA,QAC9B;AAAA,QACA,QAAQ,CAAC,OAAO;AACZ,cAAI,OAAO,OAAO;AACd,kBAAM,IAAI,MAAM,oCAAoC;AACxD,iBAAO,GAAG,MAAM,SAAS;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,QAAQ,MAAM,MAAM,KAAK;AAC9B,mBAAa,IAAI;AACjB,UAAI,OAAO,QAAQ;AACf,cAAM,IAAI,MAAM,8BAA8B;AAClD,aAAO;AAAA,QACH,OAAO,MAAM;AACT,cAAI,CAAC,MAAM,QAAQ,IAAI,KAAM,KAAK,UAAU,OAAO,KAAK,CAAC,MAAM;AAC3D,kBAAM,IAAI,MAAM,iDAAiD;AACrE,mBAASA,MAAK;AACV,gBAAI,OAAOA,OAAM;AACb,oBAAM,IAAI,MAAM,oCAAoCA,IAAG;AAC/D,iBAAQ,KAAK,SAAS,OAAQ;AAC1B,iBAAK,KAAK,GAAG;AACjB,iBAAO;AAAA,QACX;AAAA,QACA,OAAO,OAAO;AACV,cAAI,CAAC,MAAM,QAAQ,KAAK,KAAM,MAAM,UAAU,OAAO,MAAM,CAAC,MAAM;AAC9D,kBAAM,IAAI,MAAM,iDAAiD;AACrE,mBAASA,MAAK;AACV,gBAAI,OAAOA,OAAM;AACb,oBAAM,IAAI,MAAM,oCAAoCA,IAAG;AAC/D,cAAI,MAAM,MAAM;AAChB,cAAK,MAAM,OAAQ;AACf,kBAAM,IAAI,MAAM,2DAA2D;AAC/E,iBAAO,MAAM,KAAK,MAAM,MAAM,CAAC,MAAM,KAAK,OAAO;AAC7C,gBAAI,GAAI,MAAM,KAAK,OAAQ;AACvB,oBAAM,IAAI,MAAM,8CAA8C;AAAA,UACtE;AACA,iBAAO,MAAM,MAAM,GAAG,GAAG;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,UAAU,IAAI;AACnB,UAAI,OAAO,OAAO;AACd,cAAM,IAAI,MAAM,iCAAiC;AACrD,aAAO,EAAE,QAAQ,CAAC,SAAS,MAAM,QAAQ,CAAC,OAAO,GAAG,EAAE,EAAE;AAAA,IAC5D;AACA,aAAS,aAAa,MAAM,MAAM,IAAI;AAClC,UAAI,OAAO;AACP,cAAM,IAAI,MAAM,4BAA4B,kCAAkC;AAClF,UAAI,KAAK;AACL,cAAM,IAAI,MAAM,0BAA0B,gCAAgC;AAC9E,UAAI,CAAC,MAAM,QAAQ,IAAI;AACnB,cAAM,IAAI,MAAM,oCAAoC;AACxD,UAAI,CAAC,KAAK;AACN,eAAO,CAAC;AACZ,UAAI,MAAM;AACV,YAAM,MAAM,CAAC;AACb,YAAM,SAAS,MAAM,KAAK,IAAI;AAC9B,aAAO,QAAQ,CAACE,OAAM;AAClB,qBAAaA,EAAC;AACd,YAAIA,KAAI,KAAKA,MAAK;AACd,gBAAM,IAAI,MAAM,kBAAkBA,IAAG;AAAA,MAC7C,CAAC;AACD,aAAO,MAAM;AACT,YAAI,QAAQ;AACZ,YAAI,OAAO;AACX,iBAASF,KAAI,KAAKA,KAAI,OAAO,QAAQA,MAAK;AACtC,gBAAM,QAAQ,OAAOA,EAAC;AACtB,gBAAM,YAAY,OAAO,QAAQ;AACjC,cAAI,CAAC,OAAO,cAAc,SAAS,KAC9B,OAAO,QAAS,SAAS,SAC1B,YAAY,UAAU,OAAO,OAAO;AACpC,kBAAM,IAAI,MAAM,8BAA8B;AAAA,UAClD;AACA,kBAAQ,YAAY;AACpB,iBAAOA,EAAC,IAAI,KAAK,MAAM,YAAY,EAAE;AACrC,cAAI,CAAC,OAAO,cAAc,OAAOA,EAAC,CAAC,KAAK,OAAOA,EAAC,IAAI,KAAK,UAAU;AAC/D,kBAAM,IAAI,MAAM,8BAA8B;AAClD,cAAI,CAAC;AACD;AAAA,mBACK,CAAC,OAAOA,EAAC;AACd,kBAAMA;AAAA;AAEN,mBAAO;AAAA,QACf;AACA,YAAI,KAAK,KAAK;AACd,YAAI;AACA;AAAA,MACR;AACA,eAASA,KAAI,GAAGA,KAAI,KAAK,SAAS,KAAK,KAAKA,EAAC,MAAM,GAAGA;AAClD,YAAI,KAAK,CAAC;AACd,aAAO,IAAI,QAAQ;AAAA,IACvB;AACA,QAAM,MAAM,CAACH,IAAGC,OAAO,CAACA,KAAID,KAAI,IAAIC,IAAGD,KAAIC,EAAC;AAC5C,QAAM,cAAc,CAAC,MAAM,OAAO,QAAQ,KAAK,IAAI,MAAM,EAAE;AAC3D,aAAS,cAAc,MAAM,MAAM,IAAIK,UAAS;AAC5C,UAAI,CAAC,MAAM,QAAQ,IAAI;AACnB,cAAM,IAAI,MAAM,qCAAqC;AACzD,UAAI,QAAQ,KAAK,OAAO;AACpB,cAAM,IAAI,MAAM,6BAA6B,MAAM;AACvD,UAAI,MAAM,KAAK,KAAK;AAChB,cAAM,IAAI,MAAM,2BAA2B,IAAI;AACnD,UAAI,YAAY,MAAM,EAAE,IAAI,IAAI;AAC5B,cAAM,IAAI,MAAM,sCAAsC,WAAW,gBAAgB,YAAY,MAAM,EAAE,GAAG;AAAA,MAC5G;AACA,UAAI,QAAQ;AACZ,UAAI,MAAM;AACV,YAAM,OAAO,KAAK,KAAK;AACvB,YAAM,MAAM,CAAC;AACb,iBAAWP,MAAK,MAAM;AAClB,qBAAaA,EAAC;AACd,YAAIA,MAAK,KAAK;AACV,gBAAM,IAAI,MAAM,oCAAoCA,WAAU,MAAM;AACxE,gBAAS,SAAS,OAAQA;AAC1B,YAAI,MAAM,OAAO;AACb,gBAAM,IAAI,MAAM,qCAAqC,YAAY,MAAM;AAC3E,eAAO;AACP,eAAO,OAAO,IAAI,OAAO;AACrB,cAAI,MAAO,SAAU,MAAM,KAAO,UAAU,CAAC;AACjD,iBAAS,KAAK,MAAM;AAAA,MACxB;AACA,cAAS,SAAU,KAAK,MAAQ;AAChC,UAAI,CAACO,YAAW,OAAO;AACnB,cAAM,IAAI,MAAM,gBAAgB;AACpC,UAAI,CAACA,YAAW;AACZ,cAAM,IAAI,MAAM,qBAAqB,OAAO;AAChD,UAAIA,YAAW,MAAM;AACjB,YAAI,KAAK,UAAU,CAAC;AACxB,aAAO;AAAA,IACX;AACA,aAAS,MAAM,KAAK;AAChB,mBAAa,GAAG;AAChB,aAAO;AAAA,QACH,QAAQ,CAAC,UAAU;AACf,cAAI,EAAE,iBAAiB;AACnB,kBAAM,IAAI,MAAM,yCAAyC;AAC7D,iBAAO,aAAa,MAAM,KAAK,KAAK,GAAG,KAAK,GAAG,GAAG;AAAA,QACtD;AAAA,QACA,QAAQ,CAAC,WAAW;AAChB,cAAI,CAAC,MAAM,QAAQ,MAAM,KAAM,OAAO,UAAU,OAAO,OAAO,CAAC,MAAM;AACjE,kBAAM,IAAI,MAAM,+CAA+C;AACnE,iBAAO,WAAW,KAAK,aAAa,QAAQ,KAAK,KAAK,CAAC,CAAC;AAAA,QAC5D;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,OAAO,MAAM,aAAa,OAAO;AACtC,mBAAa,IAAI;AACjB,UAAI,QAAQ,KAAK,OAAO;AACpB,cAAM,IAAI,MAAM,mCAAmC;AACvD,UAAI,YAAY,GAAG,IAAI,IAAI,MAAM,YAAY,MAAM,CAAC,IAAI;AACpD,cAAM,IAAI,MAAM,wBAAwB;AAC5C,aAAO;AAAA,QACH,QAAQ,CAAC,UAAU;AACf,cAAI,EAAE,iBAAiB;AACnB,kBAAM,IAAI,MAAM,0CAA0C;AAC9D,iBAAO,cAAc,MAAM,KAAK,KAAK,GAAG,GAAG,MAAM,CAAC,UAAU;AAAA,QAChE;AAAA,QACA,QAAQ,CAAC,WAAW;AAChB,cAAI,CAAC,MAAM,QAAQ,MAAM,KAAM,OAAO,UAAU,OAAO,OAAO,CAAC,MAAM;AACjE,kBAAM,IAAI,MAAM,gDAAgD;AACpE,iBAAO,WAAW,KAAK,cAAc,QAAQ,MAAM,GAAG,UAAU,CAAC;AAAA,QACrE;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,cAAc,IAAI;AACvB,UAAI,OAAO,OAAO;AACd,cAAM,IAAI,MAAM,qCAAqC;AACzD,aAAO,YAAa,MAAM;AACtB,YAAI;AACA,iBAAO,GAAG,MAAM,MAAM,IAAI;AAAA,QAC9B,SACOC,IAAP;AAAA,QAAY;AAAA,MAChB;AAAA,IACJ;AACA,aAAS,SAAS,KAAK,IAAI;AACvB,mBAAa,GAAG;AAChB,UAAI,OAAO,OAAO;AACd,cAAM,IAAI,MAAM,gCAAgC;AACpD,aAAO;AAAA,QACH,OAAO,MAAM;AACT,cAAI,EAAE,gBAAgB;AAClB,kBAAM,IAAI,MAAM,6CAA6C;AACjE,gBAAMC,YAAW,GAAG,IAAI,EAAE,MAAM,GAAG,GAAG;AACtC,gBAAM,MAAM,IAAI,WAAW,KAAK,SAAS,GAAG;AAC5C,cAAI,IAAI,IAAI;AACZ,cAAI,IAAIA,WAAU,KAAK,MAAM;AAC7B,iBAAO;AAAA,QACX;AAAA,QACA,OAAO,MAAM;AACT,cAAI,EAAE,gBAAgB;AAClB,kBAAM,IAAI,MAAM,6CAA6C;AACjE,gBAAM,UAAU,KAAK,MAAM,GAAG,CAAC,GAAG;AAClC,gBAAM,cAAc,GAAG,OAAO,EAAE,MAAM,GAAG,GAAG;AAC5C,gBAAM,cAAc,KAAK,MAAM,CAAC,GAAG;AACnC,mBAASL,KAAI,GAAGA,KAAI,KAAKA;AACrB,gBAAI,YAAYA,EAAC,MAAM,YAAYA,EAAC;AAChC,oBAAM,IAAI,MAAM,kBAAkB;AAC1C,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,YAAQ,QAAQ,EAAE,UAAU,OAAO,UAAU,OAAO,QAAQ,MAAM,QAAQ;AAC1E,YAAQ,SAAS,MAAM,OAAO,CAAC,GAAG,SAAS,kBAAkB,GAAG,KAAK,EAAE,CAAC;AACxE,YAAQ,SAAS,MAAM,OAAO,CAAC,GAAG,SAAS,kCAAkC,GAAG,QAAQ,CAAC,GAAG,KAAK,EAAE,CAAC;AACpG,YAAQ,YAAY,MAAM,OAAO,CAAC,GAAG,SAAS,kCAAkC,GAAG,QAAQ,CAAC,GAAG,KAAK,EAAE,CAAC;AACvG,YAAQ,kBAAkB,MAAM,OAAO,CAAC,GAAG,SAAS,kCAAkC,GAAG,KAAK,EAAE,GAAG,UAAU,CAACM,OAAMA,GAAE,YAAY,EAAE,QAAQ,MAAM,GAAG,EAAE,QAAQ,SAAS,GAAG,CAAC,CAAC;AAC7K,YAAQ,SAAS,MAAM,OAAO,CAAC,GAAG,SAAS,kEAAkE,GAAG,QAAQ,CAAC,GAAG,KAAK,EAAE,CAAC;AACpI,YAAQ,YAAY,MAAM,OAAO,CAAC,GAAG,SAAS,kEAAkE,GAAG,QAAQ,CAAC,GAAG,KAAK,EAAE,CAAC;AACvI,QAAM,YAAY,CAAC,QAAQ,MAAM,MAAM,EAAE,GAAG,SAAS,GAAG,GAAG,KAAK,EAAE,CAAC;AACnE,YAAQ,SAAS,UAAU,4DAA4D;AACvF,YAAQ,eAAe,UAAU,4DAA4D;AAC7F,YAAQ,YAAY,UAAU,4DAA4D;AAC1F,QAAM,gBAAgB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE;AAClD,YAAQ,YAAY;AAAA,MAChB,OAAO,MAAM;AACT,YAAI,MAAM;AACV,iBAASN,KAAI,GAAGA,KAAI,KAAK,QAAQA,MAAK,GAAG;AACrC,gBAAM,QAAQ,KAAK,SAASA,IAAGA,KAAI,CAAC;AACpC,iBAAO,QAAQ,OAAO,OAAO,KAAK,EAAE,SAAS,cAAc,MAAM,MAAM,GAAG,GAAG;AAAA,QACjF;AACA,eAAO;AAAA,MACX;AAAA,MACA,OAAO,KAAK;AACR,YAAI,MAAM,CAAC;AACX,iBAASA,KAAI,GAAGA,KAAI,IAAI,QAAQA,MAAK,IAAI;AACrC,gBAAM,QAAQ,IAAI,MAAMA,IAAGA,KAAI,EAAE;AACjC,gBAAM,WAAW,cAAc,QAAQ,MAAM,MAAM;AACnD,gBAAM,QAAQ,QAAQ,OAAO,OAAO,KAAK;AACzC,mBAAS,IAAI,GAAG,IAAI,MAAM,SAAS,UAAU,KAAK;AAC9C,gBAAI,MAAM,CAAC,MAAM;AACb,oBAAM,IAAI,MAAM,0BAA0B;AAAA,UAClD;AACA,gBAAM,IAAI,OAAO,MAAM,KAAK,MAAM,MAAM,MAAM,SAAS,QAAQ,CAAC,CAAC;AAAA,QACrE;AACA,eAAO,WAAW,KAAK,GAAG;AAAA,MAC9B;AAAA,IACJ;AACA,QAAM,cAAc,CAAC,WAAW,MAAM,SAAS,GAAG,CAAC,SAAS,OAAO,OAAO,IAAI,CAAC,CAAC,GAAG,QAAQ,MAAM;AACjG,YAAQ,cAAc;AACtB,QAAM,gBAAgB,MAAM,SAAS,kCAAkC,GAAG,KAAK,EAAE,CAAC;AAClF,QAAM,qBAAqB,CAAC,WAAY,WAAY,WAAY,YAAY,SAAU;AACtF,aAAS,cAAc,KAAK;AACxB,YAAMF,KAAI,OAAO;AACjB,UAAI,OAAO,MAAM,aAAc;AAC/B,eAASE,KAAI,GAAGA,KAAI,mBAAmB,QAAQA,MAAK;AAChD,aAAMF,MAAKE,KAAK,OAAO;AACnB,iBAAO,mBAAmBA,EAAC;AAAA,MACnC;AACA,aAAO;AAAA,IACX;AACA,aAAS,aAAa,QAAQ,OAAO,gBAAgB,GAAG;AACpD,YAAM,MAAM,OAAO;AACnB,UAAI,MAAM;AACV,eAASA,KAAI,GAAGA,KAAI,KAAKA,MAAK;AAC1B,cAAMD,KAAI,OAAO,WAAWC,EAAC;AAC7B,YAAID,KAAI,MAAMA,KAAI;AACd,gBAAM,IAAI,MAAM,mBAAmB,SAAS;AAChD,cAAM,cAAc,GAAG,IAAKA,MAAK;AAAA,MACrC;AACA,YAAM,cAAc,GAAG;AACvB,eAASC,KAAI,GAAGA,KAAI,KAAKA;AACrB,cAAM,cAAc,GAAG,IAAK,OAAO,WAAWA,EAAC,IAAI;AACvD,eAASO,MAAK;AACV,cAAM,cAAc,GAAG,IAAIA;AAC/B,eAASP,KAAI,GAAGA,KAAI,GAAGA;AACnB,cAAM,cAAc,GAAG;AAC3B,aAAO;AACP,aAAO,cAAc,OAAO,cAAc,CAAC,MAAM,KAAK,EAAE,GAAG,IAAI,GAAG,KAAK,CAAC;AAAA,IAC5E;AACA,aAAS,UAAU,UAAU;AACzB,YAAM,iBAAiB,aAAa,WAAW,IAAI;AACnD,YAAM,SAAS,OAAO,CAAC;AACvB,YAAM,YAAY,OAAO;AACzB,YAAM,UAAU,OAAO;AACvB,YAAM,kBAAkB,cAAc,SAAS;AAC/C,eAAS,OAAO,QAAQ,OAAO,QAAQ,IAAI;AACvC,YAAI,OAAO,WAAW;AAClB,gBAAM,IAAI,MAAM,8CAA8C,OAAO,QAAQ;AACjF,YAAI,CAAC,MAAM,QAAQ,KAAK,KAAM,MAAM,UAAU,OAAO,MAAM,CAAC,MAAM;AAC9D,gBAAM,IAAI,MAAM,uDAAuD,OAAO,OAAO;AACzF,cAAM,eAAe,OAAO,SAAS,IAAI,MAAM;AAC/C,YAAI,UAAU,SAAS,eAAe;AAClC,gBAAM,IAAI,UAAU,UAAU,8BAA8B,OAAO;AACvE,iBAAS,OAAO,YAAY;AAC5B,eAAO,GAAG,UAAU,cAAc,OAAO,KAAK,IAAI,aAAa,QAAQ,OAAO,cAAc;AAAA,MAChG;AACA,eAAS,OAAO,KAAK,QAAQ,IAAI;AAC7B,YAAI,OAAO,QAAQ;AACf,gBAAM,IAAI,MAAM,6CAA6C,OAAO,KAAK;AAC7E,YAAI,IAAI,SAAS,KAAM,UAAU,SAAS,IAAI,SAAS;AACnD,gBAAM,IAAI,UAAU,wBAAwB,IAAI,WAAW,sBAAsB,QAAQ;AAC7F,cAAM,UAAU,IAAI,YAAY;AAChC,YAAI,QAAQ,WAAW,QAAQ,IAAI,YAAY;AAC3C,gBAAM,IAAI,MAAM,uCAAuC;AAC3D,cAAM;AACN,cAAM,WAAW,IAAI,YAAY,GAAG;AACpC,YAAI,aAAa,KAAK,aAAa;AAC/B,gBAAM,IAAI,MAAM,yDAAyD;AAC7E,cAAM,SAAS,IAAI,MAAM,GAAG,QAAQ;AACpC,cAAMQ,UAAS,IAAI,MAAM,WAAW,CAAC;AACrC,YAAIA,QAAO,SAAS;AAChB,gBAAM,IAAI,MAAM,yCAAyC;AAC7D,cAAM,QAAQ,cAAc,OAAOA,OAAM,EAAE,MAAM,GAAG,EAAE;AACtD,cAAM,MAAM,aAAa,QAAQ,OAAO,cAAc;AACtD,YAAI,CAACA,QAAO,SAAS,GAAG;AACpB,gBAAM,IAAI,MAAM,uBAAuB,kBAAkB,MAAM;AACnE,eAAO,EAAE,QAAQ,MAAM;AAAA,MAC3B;AACA,YAAM,eAAe,cAAc,MAAM;AACzC,eAAS,cAAc,KAAK;AACxB,cAAM,EAAE,QAAQ,MAAM,IAAI,OAAO,KAAK,KAAK;AAC3C,eAAO,EAAE,QAAQ,OAAO,OAAO,UAAU,KAAK,EAAE;AAAA,MACpD;AACA,aAAO,EAAE,QAAQ,QAAQ,eAAe,cAAc,WAAW,iBAAiB,QAAQ;AAAA,IAC9F;AACA,YAAQ,SAAS,UAAU,QAAQ;AACnC,YAAQ,UAAU,UAAU,SAAS;AACrC,YAAQ,OAAO;AAAA,MACX,QAAQ,CAAC,SAAS,IAAI,YAAY,EAAE,OAAO,IAAI;AAAA,MAC/C,QAAQ,CAAC,QAAQ,IAAI,YAAY,EAAE,OAAO,GAAG;AAAA,IACjD;AACA,YAAQ,MAAM,MAAM,OAAO,CAAC,GAAG,SAAS,kBAAkB,GAAG,KAAK,EAAE,GAAG,UAAU,CAACF,OAAM;AACpF,UAAI,OAAOA,OAAM,YAAYA,GAAE,SAAS;AACpC,cAAM,IAAI,UAAU,oCAAoC,OAAOA,kBAAiBA,GAAE,QAAQ;AAC9F,aAAOA,GAAE,YAAY;AAAA,IACzB,CAAC,CAAC;AACF,QAAM,SAAS;AAAA,MACX,MAAM,QAAQ;AAAA,MAAM,KAAK,QAAQ;AAAA,MAAK,QAAQ,QAAQ;AAAA,MAAQ,QAAQ,QAAQ;AAAA,MAAQ,QAAQ,QAAQ;AAAA,MAAQ,WAAW,QAAQ;AAAA,MAAW,QAAQ,QAAQ;AAAA,MAAQ,WAAW,QAAQ;AAAA,IAC3L;AACA,QAAM,iBAAiB,2CAA2C,OAAO,KAAK,MAAM,EAAE,KAAK,IAAI;AAC/F,QAAM,gBAAgB,CAAC,MAAM,UAAU;AACnC,UAAI,OAAO,SAAS,YAAY,CAAC,OAAO,eAAe,IAAI;AACvD,cAAM,IAAI,UAAU,cAAc;AACtC,UAAI,EAAE,iBAAiB;AACnB,cAAM,IAAI,UAAU,oCAAoC;AAC5D,aAAO,OAAO,IAAI,EAAE,OAAO,KAAK;AAAA,IACpC;AACA,YAAQ,gBAAgB;AACxB,YAAQ,MAAM,QAAQ;AACtB,QAAM,gBAAgB,CAAC,MAAM,QAAQ;AACjC,UAAI,CAAC,OAAO,eAAe,IAAI;AAC3B,cAAM,IAAI,UAAU,cAAc;AACtC,UAAI,OAAO,QAAQ;AACf,cAAM,IAAI,UAAU,gCAAgC;AACxD,aAAO,OAAO,IAAI,EAAE,OAAO,GAAG;AAAA,IAClC;AACA,YAAQ,gBAAgB;AACxB,YAAQ,QAAQ,QAAQ;AAAA;AAAA;;;AChZxB;AAAA;AAAA,QAAM,EAAC,QAAQ,KAAK,KAAI,IAAI;AAG5B,QAAM,iBAAiB;AAAA;AAAA,MAErB,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,sBAAsB,CAAC,CAAC;AAAA,IAC1B;AACA,QAAM,cAAc;AAAA,MAClB,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,sBAAsB,CAAC,CAAC;AAAA,IAC1B;AACA,QAAM,iBAAiB;AAAA,MACrB,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,sBAAsB,CAAC,CAAC;AAAA,IAC1B;AACA,QAAM,aAAa;AAAA,MACjB,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,sBAAsB,CAAC,CAAC;AAAA,IAC1B;AAEA,QAAM,mBAAmB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,QAAM,WAAW;AAAA,MACf,GAAG,OAAO,GAAG;AAAA,MACb,GAAG,OAAO,GAAG;AAAA,MACb,GAAG,OAAO,GAAG;AAAA,MACb,GAAG,OAAO,IAAI;AAAA,IAChB;AAEA,QAAM,gBAAgB,OAAO,qBAAqB;AAElD,QAAM,oBAAoB,OAAO,IAAI;AAErC,QAAM,WAAW;AAAA,MACf,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,OAAO;AAAA,MACP,kBAAkB;AAAA;AAAA,MAClB,QAAQ;AAAA;AAAA,MACR,uBAAuB;AAAA;AAAA,MACvB,kBAAkB;AAAA,MAClB,YAAY;AAAA;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,IACZ;AAGA,QAAM,WAAW,CAAC;AAClB,aAASG,KAAI,GAAG,OAAO,OAAO,KAAK,QAAQ,GAAGA,KAAI,KAAK,QAAQA,MAAK;AAClE,YAAM,cAAc,KAAKA,EAAC;AAC1B,YAAM,cAAc,SAAS,KAAKA,EAAC,CAAC,EAAE,SAAS;AAC/C,eAAS,WAAW,IAAI;AAAA,IAC1B;AAEA,QAAM,aAAa;AAAA,MACjB,GAAG,WAAS,IAAI,OAAO,OAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA,MACpD,IAAI,WAAS,IAAI,OAAO,OAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA,MACrD,IAAI,WAAS,KAAK,OAAO,OAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA,MACtD,IAAI,WAAS,IAAI,OAAO,OAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA,MACrD,IAAI,WAAS,IAAI,OAAO,OAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA,MACrD,IAAI,WAAS,IAAI,OAAO,OAAO,gBAAgB,KAAK,CAAC;AAAA;AAAA,MACrD,GAAG;AAAA;AAAA,MACH,IAAI;AAAA;AAAA,MACJ,GAAG;AAAA;AAAA,MACH,GAAG;AAAA;AAAA,IACL;AAEA,aAAS,iBAAiB,SAAS;AACjC,aAAO,YAAU;AAAA,QACf,SAAS,SAAS,OAAO;AAAA,QACzB,OAAO,OAAO,OAAO,WAAW,OAAO,OAAO,gBAAgB;AAAA,MAChE;AAAA,IACF;AAEA,aAAS,aAAa,OAAO;AAC3B,aAAO,MAAM,QAAQ,EAAE,OAAO,CAAC,OAAO,MAAM,UAAU;AACpD,eAAO,QAAQ,OAAO,KAAK,IAAI,IAAI,KAAK;AAAA,MAC1C,GAAG,CAAC;AAAA,IACN;AAIA,aAAS,kBAAkB,OAAO;AAChC,YAAM,SAAS,CAAC;AAChB,UAAI,QACF,gBACA,cACA,2BACA;AACF,UAAI,eAAe,OAAO,gBAAgB,KAAK;AAC/C,aAAO,aAAa,SAAS,GAAG;AAC9B,iBAAS,IAAI,OAAO,aAAa,MAAM,GAAG,EAAE,CAAC;AAC7C,yBAAiB,IAAI,OAAO,aAAa,MAAM,IAAI,EAAE,CAAC;AACtD,uBAAe,SAAS,IAAI,OAAO,aAAa,MAAM,IAAI,EAAE,CAAC,GAAG,EAAE;AAClE,oCAA4B;AAAA,UAC1B,IAAI,OAAO,aAAa,MAAM,IAAI,EAAE,CAAC;AAAA,UACrC;AAAA,QACF;AACA,0BAAkB,SAAS,IAAI,OAAO,aAAa,MAAM,IAAI,EAAE,CAAC,GAAG,EAAE;AAErE,uBAAe,aAAa,MAAM,EAAE;AAEpC,eAAO,KAAK;AAAA,UACV;AAAA,UACA,kBAAkB;AAAA,UAClB,eAAe;AAAA,UACf,6BAA6B;AAAA,UAC7B,mBAAmB;AAAA,QACrB,CAAC;AAAA,MACH;AACA,aAAO;AAAA,IACT;AAEA,aAAS,kBAAkB,OAAO;AAChC,YAAM,QAAQ,MACX,MAAM,EACN,QAAQ,EACR,IAAI,UAAQ;AAAA,QACX,CAAC,EAAE,OAAO;AAAA,QACV,CAAC,EAAE,OAAO;AAAA,QACV,CAAC,EAAE,OAAO;AAAA,QACV,CAAC,EAAE,OAAO;AAAA,QACV,CAAC,EAAE,OAAO;AAAA,MACZ,CAAC,EACA,OAAO,CAAC,UAAU,YAAY,SAAS,OAAO,OAAO,GAAG,CAAC,CAAC;AAC7D,aAAO,MAAM,SAAS,iBAAiB,SAAS,GAAG;AACjD,cAAM,KAAK,KAAK;AAAA,MAClB;AAEA,YAAM,cAAc,CAAC;AAErB,uBAAiB,QAAQ,CAAC,aAAa,UAAU;AAC/C,YAAI;AACJ,YAAI,MAAM,QAAQ,CAAC,GAAG;AACpB,mBAAS;AAAA,QACX,WAAW,MAAM,QAAQ,IAAI,CAAC,GAAG;AAC/B,mBAAS;AAAA,QACX,OAAO;AACL,mBAAS;AAAA,QACX;AACA,oBAAY,WAAW,IAAI;AAAA,MAC7B,CAAC;AAED,YAAM,YAAY,MAAM,MAAM,iBAAiB,SAAS,CAAC;AACzD,kBAAY,aAAa;AAAA,QACvB,WAAW,iBAAiB,SAAS;AAAA,QACrC,MAAM;AAAA,QACN,cAAc,UAAU;AAAA,UACtB,CAAC,QAAQ,KAAK,UACZ,QAAQ,MAAM,IAAI,UAAU,QAAQ,UAAU;AAAA,UAChD;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,cAAc,WAAW,cAAc;AAC9C,UAAI,SAAS;AACb,UAAI,UAAU,MAAM,EAAE,EAAE,MAAM,UAAU,GAAG;AACzC,kBAAU,UAAU,MAAM,EAAE;AAC5B,gBAAQ,UAAU,MAAM,GAAG,EAAE;AAAA,MAC/B,WAAW,UAAU,MAAM,EAAE,EAAE,MAAM,cAAc,GAAG;AACpD,cAAM,IAAI,MAAM,uCAAuC;AAAA,MACzD,OAAO;AACL,gBAAQ;AAAA,MACV;AAEA,UAAI,CAAC,MAAM,MAAM,OAAO;AACtB,cAAM,IAAI,MAAM,mCAAmC;AAErD,YAAM,UAAU,OAAO,KAAK;AAE5B,YAAM,kBAAkB,UACnB,UAAU,oBAAqB,SAAS,OAAO,IAChD,UAAU;AAEd,UACG,YAAY,OAAO,EAAE,UAAU,OAAO,EAAE,MAAM,OAAO,CAAC,MACvD,kBAAkB,eAClB;AACA,cAAM,IAAI,MAAM,kCAAkC;AAAA,MACpD;AAEA,aAAO,eAAe,gBAAgB,SAAS,IAAI;AAAA,IACrD;AAIA,aAAS,OAAO,gBAAgB,SAAS;AACvC,UAAI,OAAO,mBAAmB;AAC5B,cAAM,IAAI,MAAM,0CAA0C;AAC5D,UAAI,eAAe,MAAM,GAAG,CAAC,EAAE,YAAY,MAAM;AAC/C,cAAM,IAAI,MAAM,wCAAwC;AAE1D,YAAM,WAAW,CAAC;AAClB,YAAM,UAAU,OAAO,OAAO,gBAAgB,OAAO,gBAAgB;AACrE,uBAAiB,eAAe,YAAY;AAC5C,YAAM,SAAS,QAAQ;AACvB,UAAI,QAAQ,QAAQ;AACpB,UAAI,UAAU,eAAe,MAAM,OAAO,SAAS,CAAC;AACpD,UAAI,WAAW,MAAM,MAAM,IAAI;AAC/B,cAAQ,MAAM,MAAM,GAAG,IAAI;AAO3B,UAAI,gBAAgB,OAAO,MAAM,4BAA4B;AAC7D,UAAI,iBAAiB,CAAC,cAAc,CAAC;AACnC,wBAAgB,OAAO,MAAM,WAAW;AAC1C,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI,MAAM,wCAAwC;AAAA,MAC1D;AAGA,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAGD,YAAM,eAAe,cAAc,CAAC;AACpC,UAAI;AACJ,UAAI,CAAC,SAAS;AACZ,gBAAQ,cAAc;AAAA,UACpB,KAAK,eAAe;AAClB,0BAAc;AACd;AAAA,UACF,KAAK,YAAY;AACf,0BAAc;AACd;AAAA,UACF,KAAK,eAAe;AAClB,0BAAc;AACd;AAAA,UACF,KAAK,WAAW;AACd,0BAAc;AACd;AAAA,QACJ;AAAA,MACF,OAAO;AACL,YACE,QAAQ,WAAW,UACnB,QAAQ,eAAe,UACvB,QAAQ,eAAe,UACvB,CAAC,MAAM,QAAQ,QAAQ,oBAAoB;AAE3C,gBAAM,IAAI,MAAM,iBAAiB;AACnC,sBAAc;AAAA,MAChB;AACA,UAAI,CAAC,eAAe,YAAY,WAAW,cAAc;AACvD,cAAM,IAAI,MAAM,4BAA4B;AAAA,MAC9C;AACA,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAO;AAAA,MACT,CAAC;AAGD,YAAM,QAAQ,cAAc,CAAC;AAC7B,UAAI;AACJ,UAAI,OAAO;AACT,cAAM,UAAU,cAAc,CAAC;AAC/B,wBAAgB,cAAc,QAAQ,SAAS,IAAI;AACnD,iBAAS,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,SAAS,cAAc,CAAC,IAAI,cAAc,CAAC;AAAA,UAC3C,OAAO;AAAA,QACT,CAAC;AAAA,MACH,OAAO;AACL,wBAAgB;AAAA,MAClB;AAGA,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAGD,YAAM,YAAY,aAAa,MAAM,MAAM,GAAG,CAAC,CAAC;AAChD,cAAQ,MAAM,MAAM,CAAC;AACrB,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS,QAAQ,MAAM,GAAG,CAAC;AAAA,QAC3B,OAAO;AAAA,MACT,CAAC;AACD,gBAAU,QAAQ,MAAM,CAAC;AAEzB,UAAI,SAAS,QAAQ,WAAW;AAGhC,aAAO,MAAM,SAAS,GAAG;AACvB,cAAM,UAAU,MAAM,CAAC,EAAE,SAAS;AAClC,kBAAU,SAAS,OAAO,KAAK;AAC/B,iBAAS,WAAW,OAAO,KAAK,iBAAiB,OAAO;AACxD,gBAAQ,MAAM,MAAM,CAAC;AAErB,oBAAY,aAAa,MAAM,MAAM,GAAG,CAAC,CAAC;AAC1C,gBAAQ,MAAM,MAAM,CAAC;AAErB,mBAAW,MAAM,MAAM,GAAG,SAAS;AACnC,gBAAQ,MAAM,MAAM,SAAS;AAE7B,iBAAS,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,KAAK,QAAQ,CAAC;AAAA,UACd,SAAS,QAAQ,MAAM,GAAG,IAAI,IAAI,SAAS;AAAA,UAC3C,OAAO,OAAO,QAAQ;AAAA;AAAA,QACxB,CAAC;AACD,kBAAU,QAAQ,MAAM,IAAI,IAAI,SAAS;AAAA,MAC3C;AAGA,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS,QAAQ,MAAM,GAAG,GAAG;AAAA,QAC7B,OAAO,IAAI,OAAO,OAAO,gBAAgB,QAAQ,CAAC;AAAA,MACpD,CAAC;AACD,gBAAU,QAAQ,MAAM,GAAG;AAG3B,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAED,UAAI,SAAS;AAAA,QACX;AAAA,QACA;AAAA,QAEA,IAAI,SAAS;AACX,cAAI,MAAM,SAAS,KAAK,CAAAC,OAAKA,GAAE,SAAS,QAAQ;AAChD,cAAI;AAAK,mBAAO,SAAS,WAAW,IAAI,IAAI;AAAA,QAC9C;AAAA,QAEA,IAAI,cAAc;AAChB,iBAAO,SAAS,OAAO,CAAAA,OAAKA,GAAE,SAAS,YAAY,EAAE,IAAI,CAAAA,OAAKA,GAAE,KAAK;AAAA,QACvE;AAAA,MACF;AAEA,eAAS,QAAQ,UAAU;AACzB,YAAI,SAAS,cAAc;AAEzB;AAAA,QACF;AAEA,eAAO,eAAe,QAAQ,MAAM;AAAA,UAClC,MAAM;AACJ,mBAAO,SAAS,IAAI;AAAA,UACtB;AAAA,QACF,CAAC;AAAA,MACH;AAEA,aAAO;AAEP,eAAS,SAAS,MAAM;AACtB,YAAI,UAAU,SAAS,KAAK,CAAAA,OAAKA,GAAE,SAAS,IAAI;AAChD,eAAO,UAAU,QAAQ,QAAQ;AAAA,MACnC;AAAA,IACF;AAEA,WAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;;;;;ACnYA,IAAMC,IAAN,MAAMA;EAGJC,YAAYC,IAAAA;AAAaC,SAFzBC,UAAAA,QAGED,KAAKC,UAAUF,MAAW,CAAA;EAC5B;EAEAG,QAAQC,IAAAA;AACN,WAAA,KAAYF,QAAQE,EAAAA;EACtB;EAEAC,QAAQD,IAAKE,IAAAA;AACXL,SAAKC,QAAQE,EAAAA,IAAOE;EACtB;AAAA;ACTWC,IAAAA,IAAgBC,OAAOC,IAAaC,IAAgCC,OAAAA;AAC1EA,EAAAA,OACHA,KAAU,CAAA;AAEZ,QAAMC,KAAuBD,GAAQC,SAASC,WAAWD;AACzD,MAAA,CAAKA;AACH,UAAUE,IAAAA,MAAM,kBAAA;AAElB,MAASC,KAAGJ,GAAQI,SAAS,IAAmBjB;AAC3CY,EAAAA,OACHA,KAAY,CAAA,IAEdA,GAAUM,QAAQ,YAClBN,GAAUO,OAAO,QACZP,GAAUQ,YACbR,GAAUQ,UAAU,CAAA;AAEtB,QAAMC,KAAiBJ,GAAMZ,QAAQM,EAAAA;AACrC,MAAIU,IAAgB;AAClB,UAAMC,KAAOC,KAAKC,MAAMH,EAAAA;AAExB,WADAT,GAAUQ,QAAuB,gBAAI,QAAQE,GAAKG,OAAOH,GAAKI,YAAAA,UAAAA,mBAAAA,SAC3Cf,IAAKC,EAAAA;EACzB;AAEDA,EAAAA,GAAUQ,QAAQ,qBAAA,IAAyB;AAC3C,QAAcO,KAAAA,UAAcC,mBAAAA,SAACjB,IAAKC,EAAAA,GAC5BiB,KAASF,GAASP,QAAQU,IAAI,kBAAA;AACpC,MAAA,CAAKD;AACH,WAAOF;AAGT,QAAWI,KAAGF,GAAOG,MAAM,GAAA,GAClBP,KAAGM,GAAM,CAAA,EAAGE,QAAQ,kBAAkB,EAAA,EAAIC,KAAAA,GAC7CC,KAAMJ,GAAM,CAAA,EAAGE,QAAQ,YAAY,EAAA,EAAIC,KAAAA;AAAAA,QAElCpB,GAACsB,OAAAA;AACZ,QAAMC,KAAAA,MAAgBvB,GAAMwB,YAAYH,EAAAA;AAQxC,SANAlB,GAAMV,QAAQI,IAAKY,KAAKgB,UAAU,EAChCd,KAAOA,IACPC,UAAYW,GAAQX,SAAAA,CAAAA,CAAAA,GAGtBd,GAAUQ,QAAuB,gBAAY,QAAAK,MAAOY,GAAQX,YAAAA,UAC/CE,mBAAAA,SAAMjB,IAAKC,EAAAA;AAAS;AAAA,IAAA,IAAA,EAAA,WAAA,MAAA,eAAA,GAAA,SAAA,EAAA;ACdtB4B,IAAAA,IAAQ9B,OAAO+B,IAAsB5B,OAAAA;AAChD,MAAA,EAAI2B,OAAEA,IAAKE,QAAEA,GAAAA,IAAWD;AACnB5B,EAAAA,OACHA,KAAU,CACX;AACD,QAAWC,KAAkBD,GAAQC,SAASC,WAAWD;AACpD4B,EAAAA,OACHA,KAASC,KAAKC,MAAMJ,GAAMK,aAAa,GAAA;AAGzC,MAAeC,KAAqB,EAClCC,aAAaN,GAAKM,aAClBL,QAAQA,IACRM,eAAe,EACb,SAAWzB,KAAKgB,UAAUC,EAAAA,EAAAA,EAAAA;AAQ9B,SALIC,GAAKQ,aAAaR,GAAKS,gBACzBJ,GAAYE,cAAcP,GAAKQ,SAAAA,IAAaR,GAAKS,cAAAA,MAE7CpC,GAAMsB,OAAAA,GAAAA,MACWtB,GAAMqC,QAAQL,EAAAA;AAC9BM;AAAAA,IAAAA,IAAAA,EAAAA,WAAAA,MAAAA,OAAAA,GAAAA,SAAAA,EAAAA;AAAAA,SAAAA,IAAAA;AAAAA,SAAAA,IAAAA,OAAAA,SAAAA,OAAAA,OAAAA,KAAAA,IAAAA,SAAAA,IAAAA;AAAAA,aAAAA,KAAAA,GAAAA,KAAAA,UAAAA,QAAAA,MAAAA;AAAAA,UAAAA,KAAAA,UAAAA,EAAAA;AAAAA,eAAAA,MAAAA;AAAAA,eAAAA,UAAAA,eAAAA,KAAAA,IAAAA,EAAAA,MAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA;IAAAA;AAAAA,WAAAA;EAAAA,GAAAA,EAAAA,MAAAA,MAAAA,SAAAA;AAAAA;ACtDT,IAAA,ICGkB;ADHlB,ICGkB,IAEIzC,CAAAA,OAAAA,CAAAA,CACfA,MAAAA,EACY0C,KAAK1C,EAAAA;ADPxB,ICU0B2C,IAAG,CAAA,EAC3BZ,QAAAA,IACAa,KAAAA,IACAC,KAAAA,GAAAA,MAAAA;AAMA,QAAaC,KAAGf,KAAS,KAAKA,MAAUa,MAAOb,MAAUc;AAEzD,SAAcC,MADEF,OAAQC,KACId,OAAWa,KAAME;AAAAA;ACjB1BC,IAAAA,IAAAA,MAAAA;EAMnBzD,YAAYwC,IAAAA;AALZkB,QAAAA,IAAAA;AAAAA,SAAAA,iBAAAA,QACAC,KAAAA,cAAAA,QACAlC,KAAAA,WAAAA,QAAAA,KACAmC,SAAAA,QAGE1D,KAAKwD,iBAAiBlB,GAAKqB,IAC3B3D,KAAKyD,eCZ0BG,CAAAA,OAAAA;AACjC,UAAA,CAAKA;AAAS,eAAA;AAEd,UAAA;AACE,cAAAC,SAAgBC,4BAAAA,QAAOF,EAAAA;AACvB,YAAA,CAAKG,MAAAA,CAAYA,GAAQC;AAAU,iBAAA;AAEnC,cAAaC,KAAGF,GAAQC,SAASE,KAC9B7D,CAAAA,OAAyB,mBAAfA,GAAM8D,IAAAA;AAEnB,eAAKF,MAAYA,GAAQ5D,QAAAA,GAEVA,MAAM+D,SAAAA,IAAAA;MAGtB,SAFCC,IAAA;AACA,eAAO;MACR;IAAA,GDHuCrE,KAAKwD,cAAAA,GAC3CxD,KAAK0D,SAAwB,SAAlBY,KAAGhC,GAAKoB,UAAUY,KAAA,MAC7BtE,KAAKuB,WAAwB,SAAAgD,KAAbjC,GAAKf,YAAQiD,KAAI;EACnC;EAEAjE,MAAAA,SAAAA;AACE,QAAIP,KAAKuB;AACP,aAAWvB,KAACyE,iBAAiBzE,KAAKuB,QAAAA;AAC/B,QAAIvB,KAAK0D;AACZ,aAAA,MAAiB1D,KAAC0E,cAAAA;AAElB,UAAA,IAAe7D,MAAC,0BAAA;EAEpB;EAEA4D,iBAAiBlD,IAAAA;AACf,QAAA,CAAKA,MAAAA,CAAavB,KAAKyD;AAAa,aAAA;AAEpC,QAAA;AACE,YAAMkB,SAAeC,cAAAA,SAAOC,eAAAA,QAAIxD,MAAME,EAAAA,CAAAA,EAAW6C,SAASS,eAAAA,OAAAA;AAC1D,aAAW7E,KAACyD,gBAAgBkB;IAG7B,SAFON,IAAN;AACA,aAAA;IACD;EACH;EAEA9D,MAAAA,gBAAAA;AACE,QAAA,CAAKP,KAAK0D;AAAQ,YAAM,IAAS7C,MAAC,4BAAA;AAElC,UAAMiE,KAAAA,UAAAA,mBAAAA,SAAqB9E,KAAK0D,MAAAA,GACtBqB,KAAAA,MAASD,GAAOC,KAAAA;AAK1B,WAJIA,GAAKxD,aACPvB,KAAKuB,WAAWwD,GAAKxD,WAGhBwD,GAAKC;EACd;AAAA;AAAA,eE9CoCC,EAAAA,EAACC,SACrCA,IAAOC,SAAEA,IAAOC,GAAEA,IAACvB,GAAEA,IAACwB,QAAEA,GAAAA,GACd3E,KAAsB,CAAA,GAAA;AAChC,QAAW4E,KAAG5E,GAAQ4E,SAAS1E,WAAW0E;AAC1C,MAAA,CAAKA;AACH,UAAM,IAAA,MAAU,+CAAA;AAGlB,QAAAC,KAAkB,CAChB,CAAC,UAAA,GAAaF,EAAAA,GACd,CAAC,UAAUH,GAAQd,SAAAA,CAAAA,CAAAA;AAEjBgB,EAAAA,MACFI,GAAUC,KAAK,CAAC,KAAKL,EAAAA,CAAAA,GAEnBvB,MACF2B,GAAUC,KAAK,CAAC,KAAK5B,EAAAA,CAAAA;AAGvB,QAEM6B,KAAoB,EACxBC,QAAAA,MAHmBL,GAAMM,aAAAA,GAIzBC,YAAYrD,KAAKC,MAAMqD,KAAKC,IAAAA,IAAQ,GAAA,GACpCC,MAAM,MACNC,MAAMT,IACNU,SAAAA,QAASf,KAAAA,KAAW,GAAA;AAItB,SADAO,GAAWS,KAAKC,EAAaV,EAAAA,GAAAA,MAChBJ,GAAMe,UAAUX,EAAAA;AAC/B;AAEM,SAAA,EAAwBY,IAAAA;AAC5B,MAA6B,YAAA,OAAAC,GAAZL;AAAsB,WAAA;AACvC,MAAgC,YAAA,OAAhBI,GAACT;AAAyB,WAAA;AAK1C,MAAA,CAAKW,MAAMC,QAAQH,GAAML,IAAAA;AAAO,WAAA;AAChC,WAAUV,KAAG,GAAGA,KAAIe,GAAML,KAAKS,QAAQnB,MAAK;AAC1C,UAAMoB,KAAML,GAAML,KAAKV,EAAAA;AACvB,QAAA,CAAKiB,MAAMC,QAAQE,EAAAA;AAAM,aAAA;AACzB,aAASC,KAAI,GAAGA,KAAID,GAAID,QAAQE;AAC9B,UAAsB,YAAA,OAAXD,GAAIC,EAAAA;AAAiB,eAAA;EAEnC;AAED,SAAA;AACF;AAEgBC,SAAAA,EAAeC,IAAAA;AAC7B,MAAA,CAAKC,EAAcD,EAAAA;AACjB,UAAM,IAAA,MAAU,wDAAA;AAElB,SAAO1F,KAAKgB,UAAU,CACpB,GACA0E,GAAInB,QACJmB,GAAIjB,YACJiB,GAAId,MACJc,GAAIb,MACJa,GAAIZ,OAAAA,CAAAA;AAER;AAEgBE,SAAAA,EAAaE,IAAAA;AAC3B,aAAa1B,cAAAA,SAACiC,EAAeP,EAAAA,CAAAA,EAAQlC,SAASS,eAAAA,OAAAA;AAChD;AAEgB,SAAA,EAAmBmC,IAA0BC,IAAAA;AAC3D,MAAIC,IACiCC;AACV,MAAAC,IAAAC;AAK3B,SALIJ,MAAYD,OACdE,KAAc,SAAAF,KAAAA,GAAUM,SAAAA,SAAVF,GAAkBH,EAAAA,GAChCE,KAAcD,KAA8B,SAAAK,KAAhBP,GAAU3B,UAAAA,SAAVgC,GAAmBH,EAAAA,IAAAA,SAG1C,CAACF,IAAWE,IAAaC,EAAAA;AAClC;AAAA,IAAA,IAAA,EAAA,WAAA,MAAA,kBAAA,GAAA,eAAA,GAAA,gBAAA,GAAA,cAAA,GAAA,oBAAA,EAAA;ACxEA,IAAMK,IACJ;AASY,IAAuBC,IAAvB,MAAuBA;EAanC3H,YAAY4H,IAAiBhH,IAAAA;AAAiCV,SAZ9D0H,UAAAA,QAAO1H,KACPU,UAAAA,QAAOV,KACPiH,WAAAA,QAAQjH,KACR2H,SAAAA,QACAhC,KAAAA,SAAAA,QACAiC,KAAAA,aAAAA,QACAC,KAAAA,cAAAA,QACAb,KAAAA,YAAAA,QACAE,KAAAA,cAAAA,QACAC,KAAAA,cAAAA,QACAxG,KAAAA,QAAAA,QAGEX,KAAK0H,UAAUA,IACf1H,KAAKU,UAAU,EAAEoH,OAtBQ,sCAsBcnH,OAAOC,WAAWD,MAAAA,GACzDX,KAAKU,UAAUqH,OAAOC,OAAOhI,KAAKU,SAASA,EAAAA,GAC3CV,KAAKqB,MAAAA,GACLrB,KAAKW,QAAQX,KAAKU,QAAQC;EAC5B;EAEAU,QAAAA;AACE,UAAMyD,KAAS0C,EAAiBS,KAAKjI,KAAK0H,QAAQQ,YAAAA,CAAAA;AAC9CpD,IAAAA,OACF9E,KAAKiH,WAAWnC,GAAO,CAAA,GACvB9E,KAAK2H,SAAS7C,GAAO,CAAA;EAEzB;EAEAvE,MAAAA,QAAAA;AACE,WAAIP,KAAKU,QAAQoH,QAAAA,KACHK,eAAAA,IAELnI,KAAKoI,kBAAAA;EAEhB;EAEA7H,MAAAA,iBAAAA;AACE,UAAYuE,KAAAA,UAASrD,mBAAAA,SAAM,GAAGzB,KAAKU,QAAQoH,mCAAmC,IAAIO,gBAAgB,EAAEC,IAAItI,KAAK0H,QAAAA,CAAAA,EAAWtD,SAAAA,GAAAA,GAC9GW,KAAAA,MAASD,GAAOC,KAAAA;AAE1B/E,SAAKuI,cAAcxD,GAAKyD,QAAQzD,GAAK/B,SAAS+B,GAAKO,KAAAA;EACrD;EAEA/E,MAAAA,oBAAAA;AACE,QAAA,CAAKP,KAAK2H,UAAAA,CAAW3H,KAAKiH;AACxB;AAEF,UAAMwB,KAAAA,UAAyBhH,mBAAAA,SAACzB,KAAK0I,UAAAA,CAAAA,GAC/BC,KAAAA,UAAsBlH,mBAAAA,SAAMzB,KAAK4I,WAAAA,CAAAA,GACjCC,KAAAA,UAAyBpH,mBAAAA,SAACzB,KAAK8I,SAAAA,CAAAA;AAErC,QAAiDC,IAIElB,IAI/Cb;AAPAyB,IAAAA,GAAYO,OACdD,KAAAA,MAAkBN,GAAY1D,KAAAA,IAG5B4D,GAAcK,OAChBnB,KAAAA,MAAiCc,GAAC5D,KAAAA,IAGhC8D,GAAYG,OACdhC,KAAAA,MAA6B6B,GAAC9D,KAAAA,IAGhC/E,KAAKuI,cAAcQ,IAAWlB,IAAab,EAAAA;EAC7C;EAEA0B,YAAAA;AACE,WAAO,WAAW1I,KAAK2H,6BAA6B3H,KAAKiH;EAC3D;EAEA2B,aAAAA;AACE,WAAO,WAAW5I,KAAK2H,8BAA8B3H,KAAKiH;EAC5D;EAEA6B,WAAAA;AACE,WAAO,WAAW9I,KAAK2H,sCAAsC3H,KAAKiH;EACpE;EAEA1G,MAAAA,gBAAsB0I,IAAAA;AACpB,QAAI9H;AACJ,QAAInB,KAAKU,QAAQoH,OAAO;AACtB,YAAMoB,KAAAA,UAA2BzH,mBAAAA,SAAC,GAAGzB,KAAKU,QAAQoH,0BAA0B,IAAIO,gBAAAA,EAAAA,EAAkBC,IAAItI,KAAK0H,QAAAA,GAAYuB,EAAAA,CAAAA,EAAU7E,SAAAA,GAAAA;AAEjIjD,MAAAA,MAAAA,MADmB+H,GAAcnE,KAAAA,GACrBnB;IACb,OAAM;AACL,UAAA,CAAK5D,KAAK4H;AACR,cAAU/G,IAAAA,MAAM,qDAAA;AAElB,UAAA,CAAKb,KAAK4H,WAAWuB,YAAAA,CAAaC,EAAMpJ,KAAK4H,WAAWuB,QAAAA;AAAW,cAAM,IAAStI,MAAC,6CAAA;AACnF,YAAMwI,KAAc,IAAOC,IAACtJ,KAAK4H,WAAWuB,QAAAA;AAC5CE,MAAAA,GAAYE,SAAS,IAAmBlB,gBAACY,EAAAA,EAAQ7E,SAAAA;AACjD,YAAmB8E,KAAAA,UAASzH,mBAAAA,SAAM4H,EAAAA;AAClClI,MAAAA,KAAAA,MAA0B+H,GAACnE,KAAAA;IAC5B;AAED,UAAoBvB,KAAGrC,MAAQA,GAAKwC,MAAMxC,GAAKwC,GAAGS,SAAAA;AAClD,QAAA,CAAKZ;AAAgB,YAAU3C,IAAAA,MAAM,6BAAA;AAErC,UAAiB2I,KAAgB,EAAE7F,IAAIH,GAAAA;AAGvC,WAFIrC,MAAQA,GAAKuC,WAAQ8F,GAAY9F,SAASvC,GAAKuC,OAAOU,SAAAA,IAEnD,IAAWb,EAACiG,EAAAA;EACrB;EAEAjJ,MAAAA,eAAqB+B,IAAAA;AACnB,QAAA,CAAKtC,KAAK4H;AACR,YAAU/G,IAAAA,MAAM,qDAAA;AAElB,UAAU4I,KAAkB,MAAfnH,GAAK4C,SAAAA,EACZwE,gBAAEA,IAActG,KAAEA,IAAGC,KAAEA,GAAAA,IAAQrD,KAAK4H;AAE1C,QAAA,CAAKzE,EAAc,EAAEZ,QAAQkH,IAAMrG,KAAAA,IAAKC,KAAAA,GAAAA,CAAAA;AACtC,YAAUxC,IAAAA,MAAM,gBAAA;AAClB,QAAIyB,GAAK6C,WAAWuE,MAAkBA,KAAiB,KAAKpH,GAAK6C,QAAQuB,SAASgD;AAChF,YAAU7I,IAAAA,MAAAA,8BACsB6I,wBAAAA;AAGlC,UAAmBC,KAA6D,EAAEpH,QAAQkH,GAAKrF,SAAAA,EAAAA;AAI/F,WAHI9B,GAAK6C,YAASwE,GAAcxE,UAAU7C,GAAK6C,UAC3C7C,GAAKsH,cAAWD,GAAcC,YAAYxI,KAAKgB,UAAUE,GAAKsH,SAAAA,IAE3D5J,KAAK6J,gBAAgBF,EAAAA;EAC9B;EAEApJ,MAAAA,MAAY8B,IAAcE,KAAiB,GAAA;AACzC,QAAA,CAAKvC,KAAK6H;AACR,YAAUhH,IAAAA,MAAM,sDAAA;AAElB,UAAA,EAAM+B,aAAEA,IAAWE,WAAEA,IAASC,aAAEA,GAAAA,IAAgB/C,KAAK6H;AACrD,WAAciC,EAAC,EACblH,aAAAA,IACAE,WAAAA,IACAC,aAAAA,IACAR,QAAAA,IAAMF,OACNA,GAAAA,GACC,EACD1B,OAAOX,KAAKW,MAAAA,CAAAA;EAEhB;EAEAJ,MAAAA,WAAAA,EAAiB2E,SACfA,IAAOC,SAAEA,IAAOE,QAAEA,IAAMxB,GAAEA,GAAAA,GAChBnD,KAAsB,CAAA,GAAA;AAChC,QAAA,CAAKV,KAAK4H;AACR,YAAM,IAAS/G,MAAC,qDAAA;AAElB,QAAA,CAAKb,KAAKkH;AACR,YAAUrG,IAAAA,MAAM,yBAAA;AAElB,UAAOuE,KAAGpF,KAAKkH,aACTuC,KAAiB,MAAVvE,IAAAA,EACP6E,aAAEA,IAAW3G,KAAEA,IAAGC,KAAEA,GAAAA,IAAQrD,KAAK4H;AAEvC,QAAA,CAAKzE,EAAc,EAAEZ,QAAQkH,IAAMrG,KAAAA,IAAKC,KAAAA,GAAAA,CAAAA;AACtC,YAAM,IAASxC,MAAC,gBAAA;AAClB,QAAA,CAAKkJ;AAAa,YAAM,IAASlJ,MAAC,qCAAA;AAElC,UAAMyF,KAAAA,MAA8BrB,EAAC,EACnCC,SAASuE,IAAMtE,SAAAA,IAASC,GAAAA,IAAGvB,GAAAA,IAAGwB,QAAAA,GAAAA,GAC7B3E,EAAAA,GAAAA,KACkD,EACnD6B,QAAQkH,GAAKrF,SAAAA,GACbkB,OAAOlE,KAAKgB,UAAUkE,EAAAA,EAAAA;AAIxB,WAAA,MADsBtG,KAAK6J,gBAAgBG,EAAAA;EAE7C;EAEAzJ,MAAAA,IAAU+B,IAAe5B,KAAsB,CAAE,GAAA;AAC/C,UAAMkD,KAAU5D,KAAKiK,WAAW3H,IAAM5B,EAAAA;AACtC,QAAA,CAAKV,KAAKW;AAER,YAAM,IAASE,MAAC,qBAAA;AAIlB,WAAA,MAFMb,KAAKW,MAAMsB,OAAAA,GACAjC,KAAKW,MAAMwB,aAAAA,MAAmByB,IAASJ,cAAAA;EAE1D;EAEQ+E,cAAcX,IAAgDC,IAAiDb,IAAAA;AACjHY,IAAAA,OACF5H,KAAK4H,cJhLTzG,CAAAA,OAAAA;AAEA,UANsB,iBAMlBA,GAAKwF;AAAyB,cAAA,IAAe9F,MAAC,4BAAA;AAElD,YAAcsI,MAAIhI,GAAKgI,WAAW,IAAIpH,KAAAA;AACtC,UAAA,CAAKqH,EAAMD,EAAAA;AAAW,cAAM,IAAA,MAAU,8BAAA;AAEtC,YAAAe,KAAY1H,KAAK2H,KAAKC,OAAOjJ,GAAKkJ,eAAe,CAAA,CAAA,GACxChH,KAAGb,KAAKC,MAAM2H,OAAOjJ,GAAKmJ,WAAAA,CAAAA;AACnC,UAAA,CAAMlH,MAAAA,CAAOC,MAAQD,KAAMC;AAAK,cAAM,IAASxC,MAAC,4BAAA;AAEhD,UAAI0J,IACAC;AACJ,UAAA;AACED,QAAAA,KAAWnJ,KAAKC,MAAMF,GAAKoJ,WAAW,EAAA,GACtCC,SAAe5F,cAAAA,SAAOzD,GAAKoJ,WAAW,EAAA,EAAInG,SAASS,eAAAA,OAAAA;MAIpD,SAHC0B,IAAA;AACAgE,QAAAA,KAAW,CAAA,GACXC,SAAe5F,cAAAA,SAAO,IAAA,EAAMR,SAASS,eAAAA,OAAAA;MACtC;AAED,UAAS4F,KAAG,IACRC,KAAc,IACJC,KAAG;AACjB,eAAUpF,KAAG,GAAGA,KAAIgF,GAAS7D,QAAQnB,MAAK;AACxC,cAAA,CAAOqF,IAAGC,EAAAA,IAAKN,GAAShF,EAAAA;AACxB,gBAAQqF,IAAAA;UACN,KAAK;AACHF,YAAAA,KAAcG;AACd;UACF,KAAK;AACHF,YAAAA,KAAaE;AACb;UACF,KAAK;UACL,KAAK;AACHJ,YAAAA,KAAQ,UAAUG,KAAI,MAAMC;QAAAA;MAGjC;AACD,UAAAC,IAAIC,KAAY5J,GAAK4J;AAGrB,UAAA;AACEpD,QAAAA,KAAS,IAAO2B,IAACH,EAAAA,EAAU6B;MAK7B,SAJEC,IAAA;MAIF;AAAA,aAAO,EACL9B,UAAAA,IACA+B,OAAO9H,OAAQC,IACfD,KAAAA,IACAC,KAAAA,IACAsE,QAAAA,IACA4C,UAAAA,IACAC,cAAAA,IACAG,YAAAA,IACAD,aAAAA,IACAD,OAAAA,IACAM,WAAAA,IACArB,gBAAgBU,OAAOjJ,GAAKuI,cAAAA,KAAmB,GAC/CyB,SAAShK,IACT4I,aAAa5I,GAAK4I,eAAAA,MAAe;IAAA,GIkHSnC,EAAAA,IAEtCC,OACF7H,KAAK6H,eL5MT1G,CAAAA,OAAAA;AAEA,UALkB,cAKdA,GAAKwF;AAAqB,cAAA,IAAe9F,MAAC,wBAAA;AAC9C,UAAoB,SAAhBM,GAAKiK;AAAiB,cAAM,IAAA,MAAU,uBAAA;AAE1C,UAAA,EAAM,eAAejK,GAAKkK,WAAW,CAAA,MAA0C,YAAnClK,GAAKkK,WAAW,CAAA,EAAc;AACxE,cAAA,IAAexK,MAAC,0BAAA;AAElB,UAAA,EAAM,iBAAA0F,GAAsB8E,WAAW,CAAA,MAAA,CAAQlK,GAAKkK,WAAW,CAAA,EAAgB;AAC7E,cAAUxK,IAAAA,MAAM,4BAAA;AAElB,UAAA,CAAKM,GAAKwE;AACR,cAAM,IAAA,MAAU,uBAAA;AAMlB,aAAO,EACL/C,aALmBzB,GAAKwE,QAMxB7C,WALgB3B,GAAKkK,WAAW,CAAA,EAAc,WAM9CtI,aALkB5B,GAAKkK,WAAW,CAAA,EAAgB,YAAA;IAAA,GK4LRxD,EAAAA,IAEtCb,OAAAA,CACDhH,KAAKgH,WAAWhH,KAAKkH,aAAalH,KAAKmH,WAAAA,IAAemE,EAAmBtE,IAAWhH,KAAKiH,QAAAA;EAE9F;AAAA;ACpNF,IAE2BsE,IAAGhL,OAAAA,OAAAA;AAC5B,QAAMC,KAAM,mCAAmCgL,GAAStD,YAAAA,IAAgB,SAC1DjF,KAAAA,UAAcxB,mBAAAA,SAACjB,EAAAA;AAG7B,UAAA,MAFmByC,GAAS8B,KAAAA,GAEhB0G,aAPO;AAOMC;AAP3B,IAO2BA,IAGCnL,OAAAA,EAAS2E,SAAAA,IAASsG,UAAAA,GAAAA,MAAAA;AAC5C,QAAAjH,KAAA,MAAA,EAAkCiH,EAAAA;AAElC,SAAapB,OAAClF,EAAAA,IAAWyG;AAAAA;AAAAA,IAAAA,IAAAA,EAAAA,WAAAA,MAAAA,gBAAAA,GAAAA,cAAAA,GAAAA,iBAGIpL,OAAAA,EAASgC,QAAAA,IAAQiJ,UAAAA,GAAAA,MAAAA;AAC9C,QAAAjH,KAAA,MAAA,EAAkCiH,EAAAA;AAElC,SAAWhJ,KAACC,MAAM2H,OAAO7H,EAAAA,IAAUoJ,EAAAA;AAAI,GAAA,uBAGJpL,OAAAA,EAAS2E,SAAAA,IAASsG,UAAAA,IAAUI,QAAAA,GAAAA,OAC1DA,OACHA,KAAS,QAAA,MAEaC,EAAa,EAAE3G,SAAAA,IAASsG,UAAAA,GAAAA,CAAAA,GAC/BM,eAAeF,IAAQ,EACtCG,OAAO,YACPP,UAAAA,GAAAA,CAAAA,GAAAA;",
  "names": ["global", "self", "exports", "e", "i", "Math", "undefined", "i", "e", "Math", "n", "H", "a", "b", "c", "d", "e", "f", "g", "h", "i", "n", "a", "b", "c", "i", "alphabet", "d", "padding", "e", "checksum", "s", "v", "_words", "i", "s", "MemoryStorage", "constructor", "initial", "this", "storage", "getItem", "key", "setItem", "value", "fetchWithLsat", "async", "url", "fetchArgs", "options", "webln", "globalThis", "Error", "store", "cache", "mode", "headers", "cachedLsatData", "data", "JSON", "parse", "mac", "preimage", "initResp", "fetch", "header", "get", "parts", "split", "replace", "trim", "inv", "enable", "invResp", "sendPayment", "stringify", "boost", "args", "amount", "Math", "floor", "value_msat", "weblnParams", "destination", "customRecords", "customKey", "customValue", "keysend", "response", "test", "isValidAmount", "min", "max", "isValid", "Invoice", "paymentRequest", "paymentHash", "verify", "pr", "invoice", "e", "decode", "decoded", "sections", "hashTag", "find", "name", "toString", "_unused", "_args$verify", "a", "_args$preimage", "validatePreimage", "verifyPayment", "preimageHash", "sha256", "Hex", "result", "json", "settled", "generateZapEvent", "satoshi", "comment", "p", "relays", "nostr", "i", "nostrTags", "push", "nostrEvent", "pubkey", "getPublicKey", "created_at", "Date", "now", "kind", "tags", "content", "id", "getEventHash", "signEvent", "event", "t", "Array", "isArray", "length", "tag", "j", "serializeEvent", "evt", "validateEvent", "nostrData", "username", "nostrPubkey", "nostrRelays", "_nostrData$names", "_nostrData$relays", "names", "n", "LN_ADDRESS_REGEX", "LightningAddress", "address", "domain", "lnurlpData", "keysendData", "proxy", "Object", "assign", "exec", "toLowerCase", "fetchWithProxy", "fetchWithoutProxy", "URLSearchParams", "ln", "parseResponse", "lnurlp", "lnurlResult", "lnurlpUrl", "keysendResult", "keysendUrl", "nostrResult", "nostrUrl", "lnurlData", "ok", "params", "invoiceResult", "callback", "isUrl", "callbackUrl", "URL", "search", "invoiceArgs", "msat", "commentAllowed", "invoiceParams", "payerdata", "generateInvoice", "booster", "allowsNostr", "zapParams", "zapInvoice", "s", "ceil", "Number", "minSendable", "maxSendable", "metadata", "metadataHash", "image", "description", "identifier", "k", "v", "m", "payerData", "hostname", "_unused2", "fixed", "rawData", "status", "customData", "parseNostrResponse", "getFiatBtcRate", "currency", "rate_float", "numSatsInBtc", "rate", "locale", "getFiatValue", "toLocaleString", "style"]
}
