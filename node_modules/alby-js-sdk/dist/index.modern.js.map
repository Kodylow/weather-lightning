{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/AlbyResponseError.ts","../src/request.ts","../src/OAuth2User.ts","../src/OAuth2Bearer.ts","../src/webln/NostrWeblnProvider.ts","../src/helpers.ts","../src/client.ts","../src/webln/OauthWeblnProvider.ts"],"sourcesContent":["// https://stackoverflow.com/a/62969380\nexport function buildQueryString(query: Record<string, any>): string {\n  return Object.entries(query)\n    .map(([key, value]) =>\n      key && value\n        ? `${key}=${value}`\n        : \"\"\n    )\n    .join(\"&\");\n}\n\nexport function basicAuthHeader(client_id: string, client_secret: string | undefined) {\n  return `Basic ${btoa(`${client_id}:${client_secret}`)}`;\n}\n","export class AlbyResponseError extends Error {\n  status: number;\n  statusText: string;\n  headers: Record<string, any>;\n  error: any; // todo: typeable?\n  constructor(\n    status: number,\n    statusText: string,\n    headers: Headers,\n    error: any\n  ) {\n    let message = status.toString();\n    if (statusText) {\n      message += ` ${statusText}`;\n    }\n    message += \": \";\n    if (error.message) {\n      message += error.message;\n    }\n    else {\n      message += JSON.stringify(error);\n    }\n\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n    this.headers = headers;\n    this.error = error;\n  }\n}","import { buildQueryString } from \"./utils\";\nimport {\n  AlbyResponseError,\n  AuthClient,\n} from \"./types\";\n\nconst BASE_URL = \"https://api.getalby.com\";\n\nexport interface RequestOptions extends Omit<RequestInit, \"body\"> {\n  auth?: AuthClient;\n  endpoint: string;\n  params?: Record<string, any>;\n  user_agent?: string;\n  request_body?: Record<string, any>;\n  method?: string;\n  max_retries?: number;\n  base_url?: string;\n}\n\nasync function fetchWithRetries(\n  url: RequestInfo,\n  init: RequestInit,\n  max_retries = 0\n): Promise<Response> {\n  const res = await fetch(url, init);\n  if (res.status === 429 && max_retries > 0) {\n    const rateLimitReset = Number(res.headers.get(\"x-rate-limit-reset\"));\n    const rateLimitRemaining = Number(res.headers.get(\"x-rate-limit-remaining\"));\n    const timeTillReset = rateLimitReset * 1000 - Date.now();\n    let timeToWait = 1000;\n    if (rateLimitRemaining === 0)\n      timeToWait = timeTillReset;\n    await new Promise((resolve) => setTimeout(resolve, timeToWait));\n    return fetchWithRetries(url, init, max_retries - 1);\n  }\n  return res;\n}\n\nexport async function request({\n  auth,\n  endpoint,\n  params: query = {},\n  request_body,\n  method,\n  max_retries,\n  base_url = BASE_URL,\n  user_agent,\n  headers,\n  ...options\n}: RequestOptions): Promise<Response> {\n  const url = new URL(base_url + endpoint);\n  url.search = buildQueryString(query);\n  const isPost = method === \"POST\" && !!request_body;\n  const authHeader = auth\n    ? await auth.getAuthHeader(url.href, method)\n    : undefined;\n  const response = await fetchWithRetries(\n    url.toString(),\n    {\n      headers: {\n        ...(isPost\n          ? { \"Content-Type\": \"application/json; charset=utf-8\" }\n          : undefined),\n        ...authHeader,\n        ...headers,\n        ...{\n          \"User-Agent\": user_agent ?? \"alby-js-api\",\n          \"X-User-Agent\": user_agent ?? \"alby-js-api\"\n        },\n      },\n      method,\n      body: isPost ? JSON.stringify(request_body) : undefined,\n      ...options,\n    },\n    max_retries\n  );\n  if (!response.ok) {\n    const error = await response.json();\n    throw new AlbyResponseError(\n      response.status,\n      response.statusText,\n      response.headers,\n      error\n    );\n  }\n  return response;\n}\n\nexport async function rest<T = any>(\n  args: RequestOptions\n): Promise<T> {\n  const response = await request(args);\n  return response.json() as any;\n}\n","import CryptoJS from 'crypto-js';\nimport { buildQueryString, basicAuthHeader } from \"./utils\";\nimport { OAuthClient, AuthHeader, GetTokenResponse, Token, GenerateAuthUrlOptions } from \"./types\";\nimport { RequestOptions, rest } from \"./request\";\n\nconst AUTHORIZE_URL = \"https://getalby.com/oauth\";\n\nexport type OAuth2Scopes =\n  | \"account:read\"\n  | \"invoices:create\"\n  | \"invoices:read\"\n  | \"transactions:read\"\n  | \"balance:read\"\n  | \"payments:send\";\n\nexport interface OAuth2UserOptions {\n  client_id: string;\n  client_secret?: string;\n  callback: string;\n  scopes: OAuth2Scopes[];\n  request_options?: Partial<RequestOptions>;\n  user_agent: string;\n  token?: Token;\n}\n\nfunction processTokenResponse(token: GetTokenResponse): Token {\n  const { expires_in, ...rest } = token;\n  return {\n    ...rest,\n    ...(!!expires_in && {\n      expires_at: Date.now() + expires_in * 1000,\n    }),\n  };\n}\n\nexport class OAuth2User implements OAuthClient {\n  token?: Token;\n  options: OAuth2UserOptions;\n  code_verifier?: string;\n  code_challenge?: string;\n  private _refreshAccessTokenPromise: Promise<{token: Token}> | null;\n  constructor(options: OAuth2UserOptions) {\n    const { token, ...defaultOptions } = options;\n    this.options = {client_secret: '', ...defaultOptions};\n    this.token = token;\n    this._refreshAccessTokenPromise = null;\n  }\n\n  /**\n   * Refresh the access token\n   */\n  async refreshAccessToken(): Promise<{ token: Token }> {\n    if (this._refreshAccessTokenPromise) {\n      return this._refreshAccessTokenPromise;\n    }\n    this._refreshAccessTokenPromise = new Promise(async (resolve, reject) => {\n      try {\n        const refresh_token = this.token?.refresh_token;\n        const { client_id, client_secret, request_options, user_agent } = this.options;\n        if (!client_id) {\n          throw new Error(\"client_id is required\");\n        }\n        if (!refresh_token) {\n          throw new Error(\"refresh_token is required\");\n        }\n        const data = await rest<GetTokenResponse>({\n          ...request_options,\n          endpoint: `/oauth/token`,\n          params: {\n            client_id,\n            grant_type: \"refresh_token\",\n            refresh_token,\n          },\n          user_agent,\n          method: \"POST\",\n          headers: {\n            ...request_options?.headers,\n            \"Content-type\": \"application/x-www-form-urlencoded\",\n            ...{\n              Authorization: basicAuthHeader(client_id, client_secret),\n            },\n          },\n        });\n        const token = processTokenResponse(data);\n        this.token = token;\n        resolve({token});\n      }\n      catch(error) {\n        reject(error);\n      }\n      finally {\n        this._refreshAccessTokenPromise = null;\n      }\n    })\n    return this._refreshAccessTokenPromise;\n  }\n\n  /**\n   * Check if an access token is expired\n   */\n  isAccessTokenExpired(): boolean {\n    const refresh_token = this.token?.refresh_token;\n    const expires_at = this.token?.expires_at;\n    if (!expires_at) return true;\n    return !!refresh_token && expires_at <= Date.now() + 1000;\n  }\n\n  /**\n   * Request an access token\n   */\n  async requestAccessToken(code?: string): Promise<{ token: Token }> {\n    const { client_id, client_secret, callback, request_options, user_agent } =\n      this.options;\n    const code_verifier = this.code_verifier;\n    if (!client_id) {\n      throw new Error(\"client_id is required\");\n    }\n    if (!callback) {\n      throw new Error(\"callback is required\");\n    }\n    const params = {\n      code,\n      grant_type: \"authorization_code\",\n      code_verifier,\n      client_id,\n      redirect_uri: callback,\n    };\n    const data = await rest<GetTokenResponse>({\n      ...request_options,\n      endpoint: `/oauth/token`,\n      params,\n      user_agent,\n      method: \"POST\",\n      headers: {\n        ...request_options?.headers,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        ...{\n          Authorization: basicAuthHeader(client_id, client_secret),\n        },\n      },\n    });\n    const token = processTokenResponse(data);\n    this.token = token;\n    return { token };\n  }\n\n  generateAuthURL(options?: GenerateAuthUrlOptions): string {\n    if (!options) { options = {}; }\n    console.log(options);\n    const { client_id, callback, scopes } = this.options;\n    if (!callback) throw new Error(\"callback required\");\n    if (!scopes) throw new Error(\"scopes required\");\n    let code_challenge_method;\n    if (options.code_challenge_method === \"S256\") {\n      const code_verifier = CryptoJS.lib.WordArray.random(64);\n      this.code_verifier = code_verifier.toString();\n      this.code_challenge = CryptoJS.SHA256(this.code_verifier).toString(CryptoJS.enc.Base64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=+$/, '')\n      code_challenge_method = \"S256\";\n    } else if (options.code_challenge_method === \"plain\" && options.code_challenge) {\n      this.code_challenge = options.code_challenge;\n      this.code_verifier = options.code_challenge;\n      code_challenge_method = \"plain\";\n    }\n    const code_challenge = this.code_challenge;\n    const url = new URL(AUTHORIZE_URL);\n    url.search = buildQueryString({\n      ...options,\n      client_id,\n      scope: scopes.join(\" \"),\n      response_type: \"code\",\n      redirect_uri: callback,\n      code_challenge_method,\n      code_challenge,\n    });\n    return url.toString();\n  }\n\n  async getAuthHeader(): Promise<AuthHeader> {\n    if (!this.token?.access_token) throw new Error(\"access_token is required\");\n    if (this.isAccessTokenExpired()) await this.refreshAccessToken();\n    return {\n      Authorization: `Bearer ${this.token.access_token}`,\n    };\n  }\n}\n","import { AuthClient, AuthHeader } from \"./types\";\n\nexport class OAuth2Bearer implements AuthClient {\n  private bearer_token: string;\n\n  constructor(bearer_token: string) {\n    this.bearer_token = bearer_token;\n  }\n\n  getAuthHeader(): AuthHeader {\n    return {\n      Authorization: `Bearer ${this.bearer_token}`,\n    };\n  }\n}\n","import {\n  nip04,\n  relayInit,\n  getEventHash,\n  nip19,\n  generatePrivateKey,\n  getPublicKey,\n  Relay,\n  Event,\n  UnsignedEvent,\n  finishEvent,\n  Kind\n} from 'nostr-tools';\nimport { KeysendArgs, RequestInvoiceArgs, RequestInvoiceResponse, RequestMethod, SendPaymentResponse, SignMessageResponse, WebLNNode, WebLNProvider } from \"@webbtc/webln-types\";\nimport { GetInfoResponse } from '@webbtc/webln-types';\nimport { GetNWCAuthorizationUrlOptions } from '../types';\n\nconst NWCs: Record<string,NostrWebLNOptions> = {\n  alby: {\n    authorizationUrl: \"https://nwc.getalby.com/apps/new\",\n    relayUrl: \"wss://relay.getalby.com/v1\",\n    walletPubkey: '69effe7b49a6dd5cf525bd0905917a5005ffe480b58eeb8e861418cf3ae760d9'\n  }\n};\n\ninterface NostrWebLNOptions {\n  authorizationUrl?: string; // the URL to the NWC interface for the user to confirm the session\n  relayUrl: string;\n  walletPubkey: string;\n  secret?: string;\n};\n\ntype Nip07Provider = {\n  getPublicKey(): Promise<string>;\n  signEvent(event: UnsignedEvent): Promise<Event>;\n}\n\nexport class NostrWebLNProvider implements WebLNProvider, Nip07Provider {\n  relay: Relay;\n  relayUrl: string;\n  secret: string | undefined;\n  walletPubkey: string;\n  options: NostrWebLNOptions;\n  subscribers: Record<string, (payload: any) => void>;\n\n  static parseWalletConnectUrl(walletConnectUrl: string) {\n    walletConnectUrl = walletConnectUrl.replace('nostrwalletconnect://', 'http://').replace('nostr+walletconnect://', 'http://'); // makes it possible to parse with URL in the different environments (browser/node/...)\n    const url = new URL(walletConnectUrl);\n    const options = {} as NostrWebLNOptions;\n    options.walletPubkey = url.host;\n    const secret = url.searchParams.get('secret');\n    const relayUrl = url.searchParams.get('relay');\n    if (secret) {\n      options.secret = secret;\n    }\n    if (relayUrl) {\n      options.relayUrl = relayUrl;\n    }\n    return options;\n  }\n\n  static withNewSecret(options?: ConstructorParameters<typeof NostrWebLNProvider>[0]) {\n    options = options || {};\n    options.secret = generatePrivateKey();\n    return new NostrWebLNProvider(options);\n  }\n\n  constructor(options?: { providerName?: string, authorizationUrl?: string, relayUrl?: string, secret?: string, walletPubkey?: string, nostrWalletConnectUrl?: string }) {\n    if (options && options.nostrWalletConnectUrl) {\n      options = {\n        ...NostrWebLNProvider.parseWalletConnectUrl(options.nostrWalletConnectUrl), ...options\n      };\n    }\n    const providerOptions = NWCs[options?.providerName || 'alby'] as NostrWebLNOptions;\n    this.options = { ...providerOptions, ...(options || {}) } as NostrWebLNOptions;\n    this.relayUrl = this.options.relayUrl;\n    this.relay = relayInit(this.relayUrl);\n    if (this.options.secret) {\n      this.secret = (this.options.secret.toLowerCase().startsWith('nsec') ? nip19.decode(this.options.secret).data : this.options.secret) as string;\n    }\n    this.walletPubkey = (this.options.walletPubkey.toLowerCase().startsWith('npub') ? nip19.decode(this.options.walletPubkey).data : this.options.walletPubkey) as string;\n    this.subscribers = {};\n\n    // @ts-ignore\n    if(globalThis.WebSocket === undefined) {\n      console.error(\"WebSocket is undefined. Make sure to `import websocket-polyfill` for nodejs environments\");\n    }\n  }\n\n  on(name: string, callback: () => void) {\n    this.subscribers[name] = callback;\n  }\n\n  notify(name: string, payload?: any) {\n    const callback = this.subscribers[name];\n    if (callback) {\n      callback(payload);\n    }\n  }\n\n  getNostrWalletConnectUrl(includeSecret = true) {\n    let url = `nostr+walletconnect://${this.walletPubkey}?relay=${this.relayUrl}&pubkey=${this.publicKey}`;\n    if (includeSecret) {\n      url = `${url}&secret=${this.secret}`;\n    }\n    return url;\n  }\n\n  get nostrWalletConnectUrl() {\n    return this.getNostrWalletConnectUrl();\n  }\n\n  get connected() {\n    return this.relay.status === 1;\n  }\n\n  get publicKey() {\n    if (!this.secret) {\n      throw new Error(\"Missing secret key\");\n    }\n    return getPublicKey(this.secret);\n  }\n\n  getPublicKey(): Promise<string> {\n    return Promise.resolve(this.publicKey);\n  }\n\n  signEvent(event: UnsignedEvent): Promise<Event> {\n    if (!this.secret) {\n      throw new Error(\"Missing secret key\");\n    }\n    \n    return Promise.resolve(finishEvent(event, this.secret));\n  }\n\n  getEventHash(event: Event) {\n    return getEventHash(event);\n  }\n\n  async enable() {\n    if (this.connected) {\n      return Promise.resolve();\n    }\n    await this.relay.connect();\n  }\n\n  close() {\n    return this.relay.close();\n  }\n\n  async encrypt(pubkey: string, content: string) {\n    if (!this.secret) {\n      throw new Error('Missing secret');\n    }\n    const encrypted = await nip04.encrypt(this.secret, pubkey, content);\n    return encrypted;\n  }\n\n  async decrypt(pubkey: string, content: string) {\n    if (!this.secret) {\n      throw new Error('Missing secret');\n    }\n    const decrypted = await nip04.decrypt(this.secret, pubkey, content);\n    return decrypted;\n  }\n\n  // WebLN compatible response\n  // TODO: use NIP-47 get_info call\n  async getInfo(): Promise<GetInfoResponse> {\n    return {\n      methods: [\"getInfo\", \"sendPayment\"],\n      node: {} as WebLNNode,\n      supports: [\"lightning\"],\n      version: \"NWC\"\n    }\n  }\n\n  sendPayment(invoice: string) {\n    this.checkConnected();\n\n    return new Promise<SendPaymentResponse>(async (resolve, reject) => {\n      const command = {\n        \"method\": \"pay_invoice\",\n        \"params\": {\n          \"invoice\": invoice\n        }\n      };\n      const encryptedCommand = await this.encrypt(this.walletPubkey, JSON.stringify(command));\n      const unsignedEvent: UnsignedEvent = {\n        kind: 23194 as Kind,\n        created_at: Math.floor(Date.now() / 1000),\n        tags: [['p', this.walletPubkey]],\n        content: encryptedCommand,\n        pubkey: this.publicKey\n      };\n\n      const event = await this.signEvent(unsignedEvent);\n      // subscribe to NIP_47_SUCCESS_RESPONSE_KIND and NIP_47_ERROR_RESPONSE_KIND\n      // that reference the request event (NIP_47_REQUEST_KIND)\n      let sub = this.relay.sub([\n        {\n          kinds: [23195],\n          authors: [this.walletPubkey],\n          \"#e\": [event.id],\n        }\n      ]);\n\n      function replyTimeout() {\n        sub.unsub();\n        //console.error(`Reply timeout: event ${event.id} `);\n        reject({error: `reply timeout: event ${event.id}`, code: \"INTERNAL\"});\n      }\n\n      let replyTimeoutCheck = setTimeout(replyTimeout, 60000);\n\n      sub.on('event', async (event) => {\n        //console.log(`Received reply event: `, event);\n        clearTimeout(replyTimeoutCheck);\n        sub.unsub();\n        const decryptedContent = await this.decrypt(this.walletPubkey, event.content);\n        let response;\n        try {\n          response = JSON.parse(decryptedContent);\n        } catch(e) {\n          reject({ error: \"invalid response\", code: \"INTERNAL\" });\n          return;\n        }\n        // @ts-ignore // event is still unknown in nostr-tools\n        if (event.kind == 23195 && response.result?.preimage) {\n          resolve({ preimage: response.result.preimage });\n          this.notify('sendPayment', response.result);\n        } else {\n          reject({ error: response.error?.message, code: response.error?.code });\n        }\n      });\n\n      let pub = this.relay.publish(event);\n\n      function publishTimeout() {\n        //console.error(`Publish timeout: event ${event.id}`);\n        reject({ error: `Publish timeout: event ${event.id}` });\n      }\n      let publishTimeoutCheck = setTimeout(publishTimeout, 5000);\n\n      pub.on('failed', (reason: unknown) => {\n        //console.debug(`failed to publish to ${this.relay.url}: ${reason}`)\n        clearTimeout(publishTimeoutCheck)\n        reject({ error: `Failed to publish request: ${reason}` });\n      });\n\n      pub.on('ok', () => {\n        //console.debug(`Event ${event.id} for ${invoice} published`);\n        clearTimeout(publishTimeoutCheck);\n      });\n    });\n  }\n\n  // not-yet implemented WebLN interface methods\n  keysend(args: KeysendArgs): Promise<SendPaymentResponse> {\n    throw new Error('Method not implemented.');\n  }\n  lnurl(lnurl: string): Promise<{ status: 'OK'; } | { status: 'ERROR'; reason: string; }> {\n    throw new Error('Method not implemented.');\n  }\n  makeInvoice(args: string | number | RequestInvoiceArgs): Promise<RequestInvoiceResponse> {\n    throw new Error('Method not implemented.');\n  }\n  request(method: RequestMethod, args?: unknown): Promise<unknown> {\n    throw new Error('Method not implemented.');\n  }\n  signMessage(message: string): Promise<SignMessageResponse> {\n    throw new Error('Method not implemented.');\n  }\n  verifyMessage(signature: string, message: string): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  getAuthorizationUrl(options?: GetNWCAuthorizationUrlOptions) {\n    if (!this.options.authorizationUrl) {\n      throw new Error(\"Missing authorizationUrl option\");\n    }\n    const url = new URL(this.options.authorizationUrl);\n    if (options?.name) {\n      url.searchParams.set('c', options?.name);\n    }\n    url.searchParams.set('pubkey', this.publicKey);\n    if (options?.returnTo) {\n      url.searchParams.set('return_to', options.returnTo);\n    }\n\n    if (options?.budgetRenewal) {\n      url.searchParams.set(\"budget_renewal\", options.budgetRenewal)\n    }\n    if (options?.expiresAt) {\n      url.searchParams.set(\"expires_at\", Math.floor(options.expiresAt.getTime() / 1000).toString())\n    }\n    if (options?.maxAmount) {\n      url.searchParams.set(\"max_amount\", options.maxAmount.toString())\n    }\n    if (options?.editable !== undefined) {\n      url.searchParams.set(\"editable\", options.editable.toString())\n    }\n\n    return url;\n  }\n\n  \n\n  initNWC(options: GetNWCAuthorizationUrlOptions = {}) {\n    // here we assume an browser context and window/document is available\n    // we set the location.host as a default name if none is given\n    if (!options.name) {\n      options.name = document.location.host;\n    }\n    const url = this.getAuthorizationUrl(options);\n    const height = 600;\n    const width = 400;\n    const top = window.outerHeight / 2 + window.screenY - height / 2;\n    const left = window.outerWidth / 2 + window.screenX - width / 2;\n\n    return new Promise((resolve, reject) => {\n      const popup = window.open(\n        url.toString(),\n        `${document.title} - Wallet Connect`,\n        `height=${height},width=${width},top=${top},left=${left}`\n      );\n      if (!popup) { reject(); return; } // only for TS?\n\n      const checkForPopup = () => {\n        if (popup && popup.closed) {\n          reject();\n          clearInterval(popupChecker);\n          window.removeEventListener('message', onMessage);\n        }\n      };\n\n      const onMessage = (message: { data: any, origin: string }) => {\n        const data = message.data;\n        if (data && data.type === 'nwc:success' && message.origin === `${url.protocol}//${url.host}`) {\n          resolve(data);\n          clearInterval(popupChecker);\n          window.removeEventListener('message', onMessage);\n          if (popup) {\n            popup.close(); // close the popup\n          }\n        }\n      };\n      const popupChecker = setInterval(checkForPopup, 500);\n      window.addEventListener('message', onMessage);\n    });\n  }\n\n  private checkConnected() {\n    if (!this.connected) {\n      throw new Error(\"please call enable() and await the promise before calling this function\")\n    }\n  }\n}\n\nexport const NWC = NostrWebLNProvider;\n","import {\n  SendBoostagramRequestParams,\n} from \"./types\";\n\n\nexport function keysendParamsFromBoostagram(boostagramParams: SendBoostagramRequestParams) {\n  const customRecords: Record<string, string> = {};\n  if (boostagramParams.recipient.customKey && boostagramParams.recipient.customValue) {\n    customRecords[boostagramParams.recipient.customKey] = boostagramParams.recipient.customValue;\n  }\n  // https://github.com/lightning/blips/blob/master/blip-0010.md\n  customRecords['7629169'] = JSON.stringify(boostagramParams.boostagram);\n\n  return {\n    destination: boostagramParams.recipient.address,\n    amount: boostagramParams.amount,\n    customRecords: customRecords,\n  };\n}","import { rest, RequestOptions } from \"./request\";\nimport {\n  AuthClient,\n  CreateWebhookEndpointParams,\n  InvoiceRequestParams,\n  KeysendRequestParams,\n  SendPaymentRequestParams,\n  SendBoostagramRequestParams,\n  SendToAlbyRequestParams,\n  CreateWebhookEndpointResponse,\n  BaseWebhookEndpointResponse,\n  SendPaymentResponse,\n  Invoice,\n  GetAccountBalanceResponse,\n  GetAccountInformationResponse\n} from \"./types\";\nimport { keysendParamsFromBoostagram } from \"./helpers\";\nimport { OAuth2Bearer } from \"./auth\";\n\n\nexport class Client {\n  auth: AuthClient;\n  defaultRequestOptions?: Partial<RequestOptions>;\n\n  constructor(\n    auth: string | AuthClient,\n    requestOptions?: Partial<RequestOptions>\n  ) {\n    this.auth = typeof auth === \"string\" ? new OAuth2Bearer(auth) : auth;\n    this.defaultRequestOptions = {\n      ...requestOptions,\n      user_agent: requestOptions?.user_agent\n    };\n  }\n\n  accountBalance(params: {}, request_options?: Partial<RequestOptions>): Promise<GetAccountBalanceResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/balance`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountSummary(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/summary`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountInformation(params: {}, request_options?: Partial<RequestOptions>): Promise<GetAccountInformationResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/me`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountValue4Value(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/value4value`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  incomingInvoices(params: {}, request_options?: Partial<RequestOptions>): Promise<Invoice[]> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/incoming`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  outgoingInvoices(params: {}, request_options?: Partial<RequestOptions>): Promise<Invoice[]> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/outgoing`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  getInvoice(paymentHash: string, request_options?: Partial<RequestOptions>): Promise<Invoice> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/${paymentHash}`,\n      method: \"GET\",\n    });\n  }\n\n  createInvoice(invoice: InvoiceRequestParams, request_options?: Partial<RequestOptions>): Promise<Invoice> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices`,\n      request_body: invoice,\n      method: \"POST\",\n    });\n  }\n\n  keysend(args: KeysendRequestParams | KeysendRequestParams[], request_options?: Partial<RequestOptions>): Promise<SendPaymentResponse> {\n    let endpoint, request_body;\n    if (Array.isArray(args)) {\n      endpoint = \"/payments/keysend/multi\";\n      request_body = { keysends: args };\n    } else {\n      endpoint = \"/payments/keysend\";\n      request_body = args;\n    }\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint,\n      request_body,\n      method: \"POST\",\n    });\n  }\n\n  sendPayment(params: SendPaymentRequestParams, request_options?: Partial<RequestOptions>): Promise<SendPaymentResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/payments/bolt11`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n  sendBoostagram(args: SendBoostagramRequestParams | SendBoostagramRequestParams[], request_options?: Partial<RequestOptions>) {\n    let endpoint, request_body;\n    if (Array.isArray(args)) {\n      endpoint = \"/payments/keysend/multi\";\n      const keysends = args.map((b) => keysendParamsFromBoostagram(b));\n      request_body = { keysends };\n    } else {\n      endpoint = \"/payments/keysend\";\n      request_body = keysendParamsFromBoostagram(args);\n    }\n\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint,\n      request_body,\n      method: \"POST\",\n    });\n  }\n\n  sendToAlbyAccount(args: SendToAlbyRequestParams, request_options?: Partial<RequestOptions>) {\n    const params = {\n      destination: \"030a58b8653d32b99200a2334cfe913e51dc7d155aa0116c176657a4f1722677a3\",\n      customRecords: {\n        \"696969\": args.account,\n      },\n      amount: args.amount,\n      memo: args.memo,\n    };\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/payments/keysend`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n  createWebhookEndpoint(params: CreateWebhookEndpointParams, request_options?: Partial<RequestOptions>): Promise<CreateWebhookEndpointResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/webhook_endpoints`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n  deleteWebhookEndpoint(id: string, request_options?: Partial<RequestOptions>): Promise<BaseWebhookEndpointResponse>  {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/webhook_endpoints/${id}`,\n      method: \"DELETE\",\n    });\n  }\n\n}\n","import { Client } from '../client';\nimport {\n  OAuthClient,\n  KeysendRequestParams,\n} from \"../types\";\n\ninterface RequestInvoiceArgs {\n  amount: string | number;\n  defaultMemo?: string;\n}\n\nconst isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nexport class OauthWeblnProvider {\n  client: Client;\n  auth: OAuthClient;\n  oauth: boolean;\n  subscribers: Record<string, (payload: any) => void>;\n  isExecuting: boolean;\n\n  constructor(options: { auth: OAuthClient }) {\n    this.auth = options.auth;\n    this.client = new Client(options.auth);\n    this.oauth = true;\n    this.subscribers = {};\n    this.isExecuting = false;\n  }\n\n  on(name: string, callback: () => void) {\n    this.subscribers[name] = callback;\n  }\n\n  notify(name: string, payload?: any) {\n    const callback = this.subscribers[name];\n    if (callback) {\n      callback(payload);\n    }\n  }\n\n  async enable() {\n    if (this.isExecuting) { return; }\n    if (this.auth.token?.access_token) {\n      return { enabled: true };\n    }\n    if (isBrowser()) {\n      try {\n        this.isExecuting = true;\n        const result = await this.openAuthorization();\n      } finally {\n        this.isExecuting = false;\n      }\n    } else {\n      throw new Error(\"Missing access token\");\n    }\n  }\n\n  async sendPayment(invoice: string) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.sendPayment({ invoice });\n      this.notify('sendPayment', result);\n      return {\n        preimage: result.payment_preimage\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  async keysend(params: KeysendRequestParams) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.keysend(params);\n      this.notify('keysend', result);\n      return {\n        preimage: result.payment_preimage\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  async getInfo() {\n    return {\n      alias: \"Alby\"\n    };\n  }\n\n  async makeInvoice(params: RequestInvoiceArgs) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.createInvoice({\n        amount: parseInt(params.amount.toString()),\n        description: params.defaultMemo\n      });\n      this.notify('makeInvoice', result);\n      return {\n        paymentRequest: result.payment_request\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  openAuthorization() {\n    const height = 700;\n    const width = 600;\n    const top = window.outerHeight / 2 + window.screenY - height / 2;\n    const left = window.outerWidth / 2 + window.screenX - width / 2;\n    const url = this.auth.generateAuthURL({ code_challenge_method: \"S256\" });\n\n    return new Promise((resolve, reject) => {\n      const popup = window.open(\n        url,\n        `${document.title} - WebLN enable`,\n        `height=${height},width=${width},top=${top},left=${left}`\n      );\n      let processingCode = false;\n      window.addEventListener('message', async (message) => {\n        const data = message.data;\n        if (data && data.type === 'alby:oauth:success' && message.origin === `${document.location.protocol}//${document.location.host}` && !processingCode) {\n          processingCode = true; // make sure we request the access token only once\n          console.info(\"Processing OAuth code response\");\n          const code = data.payload.code;\n          try {\n            await this.auth.requestAccessToken(code);\n            this.client = new Client(this.auth); // just to make sure we got a client with the correct auth and not the access token\n            if (popup) {\n              popup.close();\n            }\n            this.notify('enable');\n            resolve({ enabled: true });\n          } catch (e) {\n            console.error(e);\n            reject({ enabled: false });\n          }\n        }\n      });\n    });\n  }\n}\n"],"names":["buildQueryString","query","Object","entries","map","key","value","join","basicAuthHeader","client_id","client_secret","btoa","Error","constructor","status","statusText","headers","error","message","toString","JSON","stringify","super","this","_excluded","async","fetchWithRetries","url","init","max_retries","fetch","res","rateLimitReset","Number","get","rateLimitRemaining","timeTillReset","Date","now","timeToWait","resolve","setTimeout","request","_ref","auth","endpoint","params","request_body","method","base_url","BASE_URL","user_agent","options","_objectWithoutPropertiesLoose","URL","search","getAuthHeader","href","undefined","response","_extends","isPost","authHeader","body","ok","json","args","_excluded2","processTokenResponse","token","expires_in","expires_at","OAuth2Bearer","bearer_token","Authorization","code_verifier","code_challenge","_refreshAccessTokenPromise","defaultOptions","_this","Promise","reject","_this$token","refresh_token","request_options","grant_type","isAccessTokenExpired","_this$token2","_this$token3","code","callback","redirect_uri","rest","generateAuthURL","console","log","scopes","code_challenge_method","CryptoJS","lib","WordArray","random","SHA256","enc","Base64","replace","scope","response_type","_this$token4","access_token","refreshAccessToken","NWCs","alby","authorizationUrl","relayUrl","walletPubkey","NostrWebLNProvider","static","walletConnectUrl","host","secret","searchParams","generatePrivateKey","_options","relay","subscribers","nostrWalletConnectUrl","parseWalletConnectUrl","providerOptions","providerName","relayInit","toLowerCase","startsWith","nip19","decode","data","globalThis","WebSocket","on","name","notify","payload","getNostrWalletConnectUrl","includeSecret","publicKey","connected","getPublicKey","signEvent","event","finishEvent","getEventHash","connect","close","pubkey","content","encrypt","nip04","decrypt","methods","node","supports","version","sendPayment","invoice","checkConnected","command","unsignedEvent","kind","created_at","Math","floor","tags","encryptedCommand","sub","kinds","authors","id","replyTimeoutCheck","unsub","clearTimeout","parse","decryptedContent","e","_response$error","_response$error2","result","_response$result","preimage","pub","publish","publishTimeoutCheck","reason","keysend","lnurl","makeInvoice","signMessage","verifyMessage","signature","getAuthorizationUrl","set","returnTo","budgetRenewal","expiresAt","getTime","maxAmount","editable","initNWC","document","location","top","window","outerHeight","screenY","height","left","outerWidth","screenX","width","popup","open","title","onMessage","type","origin","protocol","clearInterval","popupChecker","removeEventListener","setInterval","closed","addEventListener","NWC","keysendParamsFromBoostagram","boostagramParams","customRecords","recipient","customKey","customValue","boostagram","destination","address","amount","Client","requestOptions","defaultRequestOptions","accountBalance","accountSummary","accountInformation","accountValue4Value","incomingInvoices","outgoingInvoices","getInvoice","paymentHash","createInvoice","Array","isArray","keysends","sendBoostagram","b","sendToAlbyAccount","account","memo","createWebhookEndpoint","deleteWebhookEndpoint","OauthWeblnProvider","client","oauth","isExecuting","_this$auth$token","enabled","openAuthorization","payment_preimage","alias","parseInt","description","defaultMemo","paymentRequest","payment_request","processingCode","info","requestAccessToken"],"mappings":"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"}