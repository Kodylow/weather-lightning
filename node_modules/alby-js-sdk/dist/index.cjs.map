{"version":3,"file":"index.cjs","sources":["../src/utils.ts","../src/AlbyResponseError.ts","../src/types.ts","../src/request.ts","../src/OAuth2User.ts","../src/OAuth2Bearer.ts","../src/webln/NostrWeblnProvider.ts","../src/helpers.ts","../src/client.ts","../src/webln/OauthWeblnProvider.ts"],"sourcesContent":["// https://stackoverflow.com/a/62969380\nexport function buildQueryString(query: Record<string, any>): string {\n  return Object.entries(query)\n    .map(([key, value]) =>\n      key && value\n        ? `${key}=${value}`\n        : \"\"\n    )\n    .join(\"&\");\n}\n\nexport function basicAuthHeader(client_id: string, client_secret: string | undefined) {\n  return `Basic ${btoa(`${client_id}:${client_secret}`)}`;\n}\n","export class AlbyResponseError extends Error {\n  status: number;\n  statusText: string;\n  headers: Record<string, any>;\n  error: any; // todo: typeable?\n  constructor(\n    status: number,\n    statusText: string,\n    headers: Headers,\n    error: any\n  ) {\n    let message = status.toString();\n    if (statusText) {\n      message += ` ${statusText}`;\n    }\n    message += \": \";\n    if (error.message) {\n      message += error.message;\n    }\n    else {\n      message += JSON.stringify(error);\n    }\n\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n    this.headers = headers;\n    this.error = error;\n  }\n}","import { AlbyResponseError } from \"./AlbyResponseError\";\n\nexport type SuccessStatus = 200 | 201;\nexport type ResponseType = \"application/json\";\n\nexport interface AuthHeader {\n  Authorization: string;\n}\n\nexport interface GetTokenResponse {\n  /** Allows an application to obtain a new access token without prompting the user via the refresh token flow. */\n  refresh_token?: string;\n  /** Access tokens are the token that applications use to make API requests on behalf of a user.  */\n  access_token?: string;\n  token_type?: string;\n  expires_in?: number;\n  /** Comma-separated list of scopes for the token  */\n  scope?: string;\n}\n\nexport interface Token extends Omit<GetTokenResponse, \"expires_in\"> {\n  /** Date that the access_token will expire at.  */\n  expires_at?: number;\n}\n\n\nexport type GenerateAuthUrlOptions =\n  | {\n      code_challenge_method?: string;\n      code_challenge?: string;\n    }\n  | {\n      /** A random string you provide to verify against CSRF attacks.  The length of this string can be up to 500 characters. */\n      state?: string;\n      /** Specifies the method you are using to make a request (S256 OR plain). */\n      code_challenge_method: \"S256\";\n    }\n  | {\n      /** A random string you provide to verify against CSRF attacks.  The length of this string can be up to 500 characters. */\n      state: string;\n      /** A PKCE parameter, a random secret for each request you make. */\n      code_challenge: string;\n      /** Specifies the method you are using to make a request (S256 OR plain). */\n      code_challenge_method?: \"plain\";\n    };\n\nexport abstract class OAuthClient implements AuthClient {\n  abstract token?: Token;\n  abstract generateAuthURL(options: GenerateAuthUrlOptions): string;\n  abstract requestAccessToken(code?: string): Promise<{ token: Token }>\n  abstract getAuthHeader(\n    url?: string,\n    method?: string\n  ): Promise<AuthHeader> | AuthHeader;\n}\n\nexport abstract class AuthClient {\n  abstract getAuthHeader(\n    url?: string,\n    method?: string\n  ): Promise<AuthHeader> | AuthHeader;\n}\n\n// https://stackoverflow.com/a/50375286\nexport type UnionToIntersection<U> = (\n  U extends any ? (k: U) => void : never\n) extends (k: infer I) => void\n  ? I\n  : never;\n\nexport type GetSuccess<T> = {\n  [K in SuccessStatus & keyof T]: GetContent<T[K]>;\n}[SuccessStatus & keyof T];\n\nexport type AlbyResponse<T> = UnionToIntersection<ExtractAlbyResponse<T>>;\n\nexport type GetContent<T> = \"content\" extends keyof T\n  ? ResponseType extends keyof T[\"content\"]\n    ? T[\"content\"][ResponseType]\n    : never\n  : never;\n\nexport type ExtractAlbyResponse<T> = \"responses\" extends keyof T\n  ? GetSuccess<T[\"responses\"]>\n  : never;\n\nexport type InvoiceRequestParams = {\n  description?: string,\n  description_hash?: string,\n  amount: number,\n}\n\nexport type KeysendRequestParams = {\n  amount: number,\n  destination: string,\n  memo?: string,\n  customRecords?: Record<string, string>\n}\n\nexport type SendPaymentRequestParams = {\n  invoice: string,\n  amount?: number,\n}\n\nexport type SendBoostagramRequestParams = {\n  recipient: {\n    address: string,\n    customKey?: string,\n    customValue?: string,\n  },\n  boostagram: unknown,\n  amount: number,\n}\n\n\nexport type SendToAlbyRequestParams = {\n  account: string;\n  amount: number;\n  memo?: string;\n}\n\nexport type CreateWebhookEndpointParams = {\n  url: string;\n  description?: string;\n  filter_types: string[];\n}\n\nexport type BaseWebhookEndpointResponse = {\n  url: string;\n  description?: string;\n  filter_types: string[];\n  created_at: string,\n  id: string,\n}\n\nexport type CreateWebhookEndpointResponse = BaseWebhookEndpointResponse & {\n  endpoint_secret: string;\n}\n\nexport type Invoice = {\n  amount: number;\n  boostagram?: {\n    podcast: string;\n    feedID?: number;\n    itemID: number;\n    episode: string;\n    ts: number;\n    action: string;\n    app_name: string;\n    app_version: string;\n    value_msat: number;\n    value_msat_total: number;\n    name: string;\n    message: string;\n    sender_name: string;\n    episode_guid?: string;\n    boost_link?: string;\n    url?: string;\n    guid?: string;\n  } & Record<string, unknown>;\n  comment?: string;\n  created_at: string;\n  creation_date: number;\n  currency: string;\n  custom_records: Record<string, string>;\n  description_hash: null;\n  expires_at: string;\n  expiry: number;\n  fiat_currency: string;\n  fiat_in_cents: number;\n  identifier: string;\n  keysend_message?: string;\n  memo: string;\n  payer_name: string;\n  payer_pubkey?: string;\n  payment_hash: string;\n  payment_request: string;\n  r_hash_str: string;\n  settled: boolean;\n  settled_at: string;\n  state: string;\n  type: string;\n  value: number;\n  metadata?: {\n    // TODO: add typings\n    payer_data?: unknown;\n    zap_request?: unknown;\n  }\n} & Record<string, unknown>;\n\nexport type GetNWCAuthorizationUrlOptions = {\n  name?: string;\n  returnTo?: string;\n  expiresAt?: Date;\n  maxAmount?: number;\n  budgetRenewal?: \"never\" | \"daily\" | \"weekly\" | \"monthly\" | \"yearly\";\n  editable?: boolean;\n};\n\nexport type SendPaymentResponse = {\n  amount: number;\n  description: string;\n  destination: string;\n  fee: number;\n  payment_hash: string;\n  payment_preimage: string;\n  payment_request: string;\n}\n\nexport type GetAccountBalanceResponse = {\n  balance: number;\n  currency: string;\n  unit: string;\n}\n\nexport type GetAccountInformationResponse = {\n  identifier: string;\n  email: string;\n  name?: string;\n  avatar?: string;\n  keysend_custom_key: string;\n  keysend_custom_value: string;\n  keysend_pubkey: string;\n  lightning_address?: string;\n  nostr_pubkey?: string;\n}\n\nexport { AlbyResponseError };","import { buildQueryString } from \"./utils\";\nimport {\n  AlbyResponseError,\n  AuthClient,\n} from \"./types\";\n\nconst BASE_URL = \"https://api.getalby.com\";\n\nexport interface RequestOptions extends Omit<RequestInit, \"body\"> {\n  auth?: AuthClient;\n  endpoint: string;\n  params?: Record<string, any>;\n  user_agent?: string;\n  request_body?: Record<string, any>;\n  method?: string;\n  max_retries?: number;\n  base_url?: string;\n}\n\nasync function fetchWithRetries(\n  url: RequestInfo,\n  init: RequestInit,\n  max_retries = 0\n): Promise<Response> {\n  const res = await fetch(url, init);\n  if (res.status === 429 && max_retries > 0) {\n    const rateLimitReset = Number(res.headers.get(\"x-rate-limit-reset\"));\n    const rateLimitRemaining = Number(res.headers.get(\"x-rate-limit-remaining\"));\n    const timeTillReset = rateLimitReset * 1000 - Date.now();\n    let timeToWait = 1000;\n    if (rateLimitRemaining === 0)\n      timeToWait = timeTillReset;\n    await new Promise((resolve) => setTimeout(resolve, timeToWait));\n    return fetchWithRetries(url, init, max_retries - 1);\n  }\n  return res;\n}\n\nexport async function request({\n  auth,\n  endpoint,\n  params: query = {},\n  request_body,\n  method,\n  max_retries,\n  base_url = BASE_URL,\n  user_agent,\n  headers,\n  ...options\n}: RequestOptions): Promise<Response> {\n  const url = new URL(base_url + endpoint);\n  url.search = buildQueryString(query);\n  const isPost = method === \"POST\" && !!request_body;\n  const authHeader = auth\n    ? await auth.getAuthHeader(url.href, method)\n    : undefined;\n  const response = await fetchWithRetries(\n    url.toString(),\n    {\n      headers: {\n        ...(isPost\n          ? { \"Content-Type\": \"application/json; charset=utf-8\" }\n          : undefined),\n        ...authHeader,\n        ...headers,\n        ...{\n          \"User-Agent\": user_agent ?? \"alby-js-api\",\n          \"X-User-Agent\": user_agent ?? \"alby-js-api\"\n        },\n      },\n      method,\n      body: isPost ? JSON.stringify(request_body) : undefined,\n      ...options,\n    },\n    max_retries\n  );\n  if (!response.ok) {\n    const error = await response.json();\n    throw new AlbyResponseError(\n      response.status,\n      response.statusText,\n      response.headers,\n      error\n    );\n  }\n  return response;\n}\n\nexport async function rest<T = any>(\n  args: RequestOptions\n): Promise<T> {\n  const response = await request(args);\n  return response.json() as any;\n}\n","import CryptoJS from 'crypto-js';\nimport { buildQueryString, basicAuthHeader } from \"./utils\";\nimport { OAuthClient, AuthHeader, GetTokenResponse, Token, GenerateAuthUrlOptions } from \"./types\";\nimport { RequestOptions, rest } from \"./request\";\n\nconst AUTHORIZE_URL = \"https://getalby.com/oauth\";\n\nexport type OAuth2Scopes =\n  | \"account:read\"\n  | \"invoices:create\"\n  | \"invoices:read\"\n  | \"transactions:read\"\n  | \"balance:read\"\n  | \"payments:send\";\n\nexport interface OAuth2UserOptions {\n  client_id: string;\n  client_secret?: string;\n  callback: string;\n  scopes: OAuth2Scopes[];\n  request_options?: Partial<RequestOptions>;\n  user_agent: string;\n  token?: Token;\n}\n\nfunction processTokenResponse(token: GetTokenResponse): Token {\n  const { expires_in, ...rest } = token;\n  return {\n    ...rest,\n    ...(!!expires_in && {\n      expires_at: Date.now() + expires_in * 1000,\n    }),\n  };\n}\n\nexport class OAuth2User implements OAuthClient {\n  token?: Token;\n  options: OAuth2UserOptions;\n  code_verifier?: string;\n  code_challenge?: string;\n  private _refreshAccessTokenPromise: Promise<{token: Token}> | null;\n  constructor(options: OAuth2UserOptions) {\n    const { token, ...defaultOptions } = options;\n    this.options = {client_secret: '', ...defaultOptions};\n    this.token = token;\n    this._refreshAccessTokenPromise = null;\n  }\n\n  /**\n   * Refresh the access token\n   */\n  async refreshAccessToken(): Promise<{ token: Token }> {\n    if (this._refreshAccessTokenPromise) {\n      return this._refreshAccessTokenPromise;\n    }\n    this._refreshAccessTokenPromise = new Promise(async (resolve, reject) => {\n      try {\n        const refresh_token = this.token?.refresh_token;\n        const { client_id, client_secret, request_options, user_agent } = this.options;\n        if (!client_id) {\n          throw new Error(\"client_id is required\");\n        }\n        if (!refresh_token) {\n          throw new Error(\"refresh_token is required\");\n        }\n        const data = await rest<GetTokenResponse>({\n          ...request_options,\n          endpoint: `/oauth/token`,\n          params: {\n            client_id,\n            grant_type: \"refresh_token\",\n            refresh_token,\n          },\n          user_agent,\n          method: \"POST\",\n          headers: {\n            ...request_options?.headers,\n            \"Content-type\": \"application/x-www-form-urlencoded\",\n            ...{\n              Authorization: basicAuthHeader(client_id, client_secret),\n            },\n          },\n        });\n        const token = processTokenResponse(data);\n        this.token = token;\n        resolve({token});\n      }\n      catch(error) {\n        reject(error);\n      }\n      finally {\n        this._refreshAccessTokenPromise = null;\n      }\n    })\n    return this._refreshAccessTokenPromise;\n  }\n\n  /**\n   * Check if an access token is expired\n   */\n  isAccessTokenExpired(): boolean {\n    const refresh_token = this.token?.refresh_token;\n    const expires_at = this.token?.expires_at;\n    if (!expires_at) return true;\n    return !!refresh_token && expires_at <= Date.now() + 1000;\n  }\n\n  /**\n   * Request an access token\n   */\n  async requestAccessToken(code?: string): Promise<{ token: Token }> {\n    const { client_id, client_secret, callback, request_options, user_agent } =\n      this.options;\n    const code_verifier = this.code_verifier;\n    if (!client_id) {\n      throw new Error(\"client_id is required\");\n    }\n    if (!callback) {\n      throw new Error(\"callback is required\");\n    }\n    const params = {\n      code,\n      grant_type: \"authorization_code\",\n      code_verifier,\n      client_id,\n      redirect_uri: callback,\n    };\n    const data = await rest<GetTokenResponse>({\n      ...request_options,\n      endpoint: `/oauth/token`,\n      params,\n      user_agent,\n      method: \"POST\",\n      headers: {\n        ...request_options?.headers,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        ...{\n          Authorization: basicAuthHeader(client_id, client_secret),\n        },\n      },\n    });\n    const token = processTokenResponse(data);\n    this.token = token;\n    return { token };\n  }\n\n  generateAuthURL(options?: GenerateAuthUrlOptions): string {\n    if (!options) { options = {}; }\n    console.log(options);\n    const { client_id, callback, scopes } = this.options;\n    if (!callback) throw new Error(\"callback required\");\n    if (!scopes) throw new Error(\"scopes required\");\n    let code_challenge_method;\n    if (options.code_challenge_method === \"S256\") {\n      const code_verifier = CryptoJS.lib.WordArray.random(64);\n      this.code_verifier = code_verifier.toString();\n      this.code_challenge = CryptoJS.SHA256(this.code_verifier).toString(CryptoJS.enc.Base64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=+$/, '')\n      code_challenge_method = \"S256\";\n    } else if (options.code_challenge_method === \"plain\" && options.code_challenge) {\n      this.code_challenge = options.code_challenge;\n      this.code_verifier = options.code_challenge;\n      code_challenge_method = \"plain\";\n    }\n    const code_challenge = this.code_challenge;\n    const url = new URL(AUTHORIZE_URL);\n    url.search = buildQueryString({\n      ...options,\n      client_id,\n      scope: scopes.join(\" \"),\n      response_type: \"code\",\n      redirect_uri: callback,\n      code_challenge_method,\n      code_challenge,\n    });\n    return url.toString();\n  }\n\n  async getAuthHeader(): Promise<AuthHeader> {\n    if (!this.token?.access_token) throw new Error(\"access_token is required\");\n    if (this.isAccessTokenExpired()) await this.refreshAccessToken();\n    return {\n      Authorization: `Bearer ${this.token.access_token}`,\n    };\n  }\n}\n","import { AuthClient, AuthHeader } from \"./types\";\n\nexport class OAuth2Bearer implements AuthClient {\n  private bearer_token: string;\n\n  constructor(bearer_token: string) {\n    this.bearer_token = bearer_token;\n  }\n\n  getAuthHeader(): AuthHeader {\n    return {\n      Authorization: `Bearer ${this.bearer_token}`,\n    };\n  }\n}\n","import {\n  nip04,\n  relayInit,\n  getEventHash,\n  nip19,\n  generatePrivateKey,\n  getPublicKey,\n  Relay,\n  Event,\n  UnsignedEvent,\n  finishEvent,\n  Kind\n} from 'nostr-tools';\nimport { KeysendArgs, RequestInvoiceArgs, RequestInvoiceResponse, RequestMethod, SendPaymentResponse, SignMessageResponse, WebLNNode, WebLNProvider } from \"@webbtc/webln-types\";\nimport { GetInfoResponse } from '@webbtc/webln-types';\nimport { GetNWCAuthorizationUrlOptions } from '../types';\n\nconst NWCs: Record<string,NostrWebLNOptions> = {\n  alby: {\n    authorizationUrl: \"https://nwc.getalby.com/apps/new\",\n    relayUrl: \"wss://relay.getalby.com/v1\",\n    walletPubkey: '69effe7b49a6dd5cf525bd0905917a5005ffe480b58eeb8e861418cf3ae760d9'\n  }\n};\n\ninterface NostrWebLNOptions {\n  authorizationUrl?: string; // the URL to the NWC interface for the user to confirm the session\n  relayUrl: string;\n  walletPubkey: string;\n  secret?: string;\n};\n\ntype Nip07Provider = {\n  getPublicKey(): Promise<string>;\n  signEvent(event: UnsignedEvent): Promise<Event>;\n}\n\nexport class NostrWebLNProvider implements WebLNProvider, Nip07Provider {\n  relay: Relay;\n  relayUrl: string;\n  secret: string | undefined;\n  walletPubkey: string;\n  options: NostrWebLNOptions;\n  subscribers: Record<string, (payload: any) => void>;\n\n  static parseWalletConnectUrl(walletConnectUrl: string) {\n    walletConnectUrl = walletConnectUrl.replace('nostrwalletconnect://', 'http://').replace('nostr+walletconnect://', 'http://'); // makes it possible to parse with URL in the different environments (browser/node/...)\n    const url = new URL(walletConnectUrl);\n    const options = {} as NostrWebLNOptions;\n    options.walletPubkey = url.host;\n    const secret = url.searchParams.get('secret');\n    const relayUrl = url.searchParams.get('relay');\n    if (secret) {\n      options.secret = secret;\n    }\n    if (relayUrl) {\n      options.relayUrl = relayUrl;\n    }\n    return options;\n  }\n\n  static withNewSecret(options?: ConstructorParameters<typeof NostrWebLNProvider>[0]) {\n    options = options || {};\n    options.secret = generatePrivateKey();\n    return new NostrWebLNProvider(options);\n  }\n\n  constructor(options?: { providerName?: string, authorizationUrl?: string, relayUrl?: string, secret?: string, walletPubkey?: string, nostrWalletConnectUrl?: string }) {\n    if (options && options.nostrWalletConnectUrl) {\n      options = {\n        ...NostrWebLNProvider.parseWalletConnectUrl(options.nostrWalletConnectUrl), ...options\n      };\n    }\n    const providerOptions = NWCs[options?.providerName || 'alby'] as NostrWebLNOptions;\n    this.options = { ...providerOptions, ...(options || {}) } as NostrWebLNOptions;\n    this.relayUrl = this.options.relayUrl;\n    this.relay = relayInit(this.relayUrl);\n    if (this.options.secret) {\n      this.secret = (this.options.secret.toLowerCase().startsWith('nsec') ? nip19.decode(this.options.secret).data : this.options.secret) as string;\n    }\n    this.walletPubkey = (this.options.walletPubkey.toLowerCase().startsWith('npub') ? nip19.decode(this.options.walletPubkey).data : this.options.walletPubkey) as string;\n    this.subscribers = {};\n\n    // @ts-ignore\n    if(globalThis.WebSocket === undefined) {\n      console.error(\"WebSocket is undefined. Make sure to `import websocket-polyfill` for nodejs environments\");\n    }\n  }\n\n  on(name: string, callback: () => void) {\n    this.subscribers[name] = callback;\n  }\n\n  notify(name: string, payload?: any) {\n    const callback = this.subscribers[name];\n    if (callback) {\n      callback(payload);\n    }\n  }\n\n  getNostrWalletConnectUrl(includeSecret = true) {\n    let url = `nostr+walletconnect://${this.walletPubkey}?relay=${this.relayUrl}&pubkey=${this.publicKey}`;\n    if (includeSecret) {\n      url = `${url}&secret=${this.secret}`;\n    }\n    return url;\n  }\n\n  get nostrWalletConnectUrl() {\n    return this.getNostrWalletConnectUrl();\n  }\n\n  get connected() {\n    return this.relay.status === 1;\n  }\n\n  get publicKey() {\n    if (!this.secret) {\n      throw new Error(\"Missing secret key\");\n    }\n    return getPublicKey(this.secret);\n  }\n\n  getPublicKey(): Promise<string> {\n    return Promise.resolve(this.publicKey);\n  }\n\n  signEvent(event: UnsignedEvent): Promise<Event> {\n    if (!this.secret) {\n      throw new Error(\"Missing secret key\");\n    }\n    \n    return Promise.resolve(finishEvent(event, this.secret));\n  }\n\n  getEventHash(event: Event) {\n    return getEventHash(event);\n  }\n\n  async enable() {\n    if (this.connected) {\n      return Promise.resolve();\n    }\n    await this.relay.connect();\n  }\n\n  close() {\n    return this.relay.close();\n  }\n\n  async encrypt(pubkey: string, content: string) {\n    if (!this.secret) {\n      throw new Error('Missing secret');\n    }\n    const encrypted = await nip04.encrypt(this.secret, pubkey, content);\n    return encrypted;\n  }\n\n  async decrypt(pubkey: string, content: string) {\n    if (!this.secret) {\n      throw new Error('Missing secret');\n    }\n    const decrypted = await nip04.decrypt(this.secret, pubkey, content);\n    return decrypted;\n  }\n\n  // WebLN compatible response\n  // TODO: use NIP-47 get_info call\n  async getInfo(): Promise<GetInfoResponse> {\n    return {\n      methods: [\"getInfo\", \"sendPayment\"],\n      node: {} as WebLNNode,\n      supports: [\"lightning\"],\n      version: \"NWC\"\n    }\n  }\n\n  sendPayment(invoice: string) {\n    this.checkConnected();\n\n    return new Promise<SendPaymentResponse>(async (resolve, reject) => {\n      const command = {\n        \"method\": \"pay_invoice\",\n        \"params\": {\n          \"invoice\": invoice\n        }\n      };\n      const encryptedCommand = await this.encrypt(this.walletPubkey, JSON.stringify(command));\n      const unsignedEvent: UnsignedEvent = {\n        kind: 23194 as Kind,\n        created_at: Math.floor(Date.now() / 1000),\n        tags: [['p', this.walletPubkey]],\n        content: encryptedCommand,\n        pubkey: this.publicKey\n      };\n\n      const event = await this.signEvent(unsignedEvent);\n      // subscribe to NIP_47_SUCCESS_RESPONSE_KIND and NIP_47_ERROR_RESPONSE_KIND\n      // that reference the request event (NIP_47_REQUEST_KIND)\n      let sub = this.relay.sub([\n        {\n          kinds: [23195],\n          authors: [this.walletPubkey],\n          \"#e\": [event.id],\n        }\n      ]);\n\n      function replyTimeout() {\n        sub.unsub();\n        //console.error(`Reply timeout: event ${event.id} `);\n        reject({error: `reply timeout: event ${event.id}`, code: \"INTERNAL\"});\n      }\n\n      let replyTimeoutCheck = setTimeout(replyTimeout, 60000);\n\n      sub.on('event', async (event) => {\n        //console.log(`Received reply event: `, event);\n        clearTimeout(replyTimeoutCheck);\n        sub.unsub();\n        const decryptedContent = await this.decrypt(this.walletPubkey, event.content);\n        let response;\n        try {\n          response = JSON.parse(decryptedContent);\n        } catch(e) {\n          reject({ error: \"invalid response\", code: \"INTERNAL\" });\n          return;\n        }\n        // @ts-ignore // event is still unknown in nostr-tools\n        if (event.kind == 23195 && response.result?.preimage) {\n          resolve({ preimage: response.result.preimage });\n          this.notify('sendPayment', response.result);\n        } else {\n          reject({ error: response.error?.message, code: response.error?.code });\n        }\n      });\n\n      let pub = this.relay.publish(event);\n\n      function publishTimeout() {\n        //console.error(`Publish timeout: event ${event.id}`);\n        reject({ error: `Publish timeout: event ${event.id}` });\n      }\n      let publishTimeoutCheck = setTimeout(publishTimeout, 5000);\n\n      pub.on('failed', (reason: unknown) => {\n        //console.debug(`failed to publish to ${this.relay.url}: ${reason}`)\n        clearTimeout(publishTimeoutCheck)\n        reject({ error: `Failed to publish request: ${reason}` });\n      });\n\n      pub.on('ok', () => {\n        //console.debug(`Event ${event.id} for ${invoice} published`);\n        clearTimeout(publishTimeoutCheck);\n      });\n    });\n  }\n\n  // not-yet implemented WebLN interface methods\n  keysend(args: KeysendArgs): Promise<SendPaymentResponse> {\n    throw new Error('Method not implemented.');\n  }\n  lnurl(lnurl: string): Promise<{ status: 'OK'; } | { status: 'ERROR'; reason: string; }> {\n    throw new Error('Method not implemented.');\n  }\n  makeInvoice(args: string | number | RequestInvoiceArgs): Promise<RequestInvoiceResponse> {\n    throw new Error('Method not implemented.');\n  }\n  request(method: RequestMethod, args?: unknown): Promise<unknown> {\n    throw new Error('Method not implemented.');\n  }\n  signMessage(message: string): Promise<SignMessageResponse> {\n    throw new Error('Method not implemented.');\n  }\n  verifyMessage(signature: string, message: string): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n\n  getAuthorizationUrl(options?: GetNWCAuthorizationUrlOptions) {\n    if (!this.options.authorizationUrl) {\n      throw new Error(\"Missing authorizationUrl option\");\n    }\n    const url = new URL(this.options.authorizationUrl);\n    if (options?.name) {\n      url.searchParams.set('c', options?.name);\n    }\n    url.searchParams.set('pubkey', this.publicKey);\n    if (options?.returnTo) {\n      url.searchParams.set('return_to', options.returnTo);\n    }\n\n    if (options?.budgetRenewal) {\n      url.searchParams.set(\"budget_renewal\", options.budgetRenewal)\n    }\n    if (options?.expiresAt) {\n      url.searchParams.set(\"expires_at\", Math.floor(options.expiresAt.getTime() / 1000).toString())\n    }\n    if (options?.maxAmount) {\n      url.searchParams.set(\"max_amount\", options.maxAmount.toString())\n    }\n    if (options?.editable !== undefined) {\n      url.searchParams.set(\"editable\", options.editable.toString())\n    }\n\n    return url;\n  }\n\n  \n\n  initNWC(options: GetNWCAuthorizationUrlOptions = {}) {\n    // here we assume an browser context and window/document is available\n    // we set the location.host as a default name if none is given\n    if (!options.name) {\n      options.name = document.location.host;\n    }\n    const url = this.getAuthorizationUrl(options);\n    const height = 600;\n    const width = 400;\n    const top = window.outerHeight / 2 + window.screenY - height / 2;\n    const left = window.outerWidth / 2 + window.screenX - width / 2;\n\n    return new Promise((resolve, reject) => {\n      const popup = window.open(\n        url.toString(),\n        `${document.title} - Wallet Connect`,\n        `height=${height},width=${width},top=${top},left=${left}`\n      );\n      if (!popup) { reject(); return; } // only for TS?\n\n      const checkForPopup = () => {\n        if (popup && popup.closed) {\n          reject();\n          clearInterval(popupChecker);\n          window.removeEventListener('message', onMessage);\n        }\n      };\n\n      const onMessage = (message: { data: any, origin: string }) => {\n        const data = message.data;\n        if (data && data.type === 'nwc:success' && message.origin === `${url.protocol}//${url.host}`) {\n          resolve(data);\n          clearInterval(popupChecker);\n          window.removeEventListener('message', onMessage);\n          if (popup) {\n            popup.close(); // close the popup\n          }\n        }\n      };\n      const popupChecker = setInterval(checkForPopup, 500);\n      window.addEventListener('message', onMessage);\n    });\n  }\n\n  private checkConnected() {\n    if (!this.connected) {\n      throw new Error(\"please call enable() and await the promise before calling this function\")\n    }\n  }\n}\n\nexport const NWC = NostrWebLNProvider;\n","import {\n  SendBoostagramRequestParams,\n} from \"./types\";\n\n\nexport function keysendParamsFromBoostagram(boostagramParams: SendBoostagramRequestParams) {\n  const customRecords: Record<string, string> = {};\n  if (boostagramParams.recipient.customKey && boostagramParams.recipient.customValue) {\n    customRecords[boostagramParams.recipient.customKey] = boostagramParams.recipient.customValue;\n  }\n  // https://github.com/lightning/blips/blob/master/blip-0010.md\n  customRecords['7629169'] = JSON.stringify(boostagramParams.boostagram);\n\n  return {\n    destination: boostagramParams.recipient.address,\n    amount: boostagramParams.amount,\n    customRecords: customRecords,\n  };\n}","import { rest, RequestOptions } from \"./request\";\nimport {\n  AuthClient,\n  CreateWebhookEndpointParams,\n  InvoiceRequestParams,\n  KeysendRequestParams,\n  SendPaymentRequestParams,\n  SendBoostagramRequestParams,\n  SendToAlbyRequestParams,\n  CreateWebhookEndpointResponse,\n  BaseWebhookEndpointResponse,\n  SendPaymentResponse,\n  Invoice,\n  GetAccountBalanceResponse,\n  GetAccountInformationResponse\n} from \"./types\";\nimport { keysendParamsFromBoostagram } from \"./helpers\";\nimport { OAuth2Bearer } from \"./auth\";\n\n\nexport class Client {\n  auth: AuthClient;\n  defaultRequestOptions?: Partial<RequestOptions>;\n\n  constructor(\n    auth: string | AuthClient,\n    requestOptions?: Partial<RequestOptions>\n  ) {\n    this.auth = typeof auth === \"string\" ? new OAuth2Bearer(auth) : auth;\n    this.defaultRequestOptions = {\n      ...requestOptions,\n      user_agent: requestOptions?.user_agent\n    };\n  }\n\n  accountBalance(params: {}, request_options?: Partial<RequestOptions>): Promise<GetAccountBalanceResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/balance`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountSummary(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/summary`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountInformation(params: {}, request_options?: Partial<RequestOptions>): Promise<GetAccountInformationResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/me`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  accountValue4Value(params: {}, request_options?: Partial<RequestOptions>) {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/user/value4value`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  incomingInvoices(params: {}, request_options?: Partial<RequestOptions>): Promise<Invoice[]> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/incoming`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  outgoingInvoices(params: {}, request_options?: Partial<RequestOptions>): Promise<Invoice[]> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/outgoing`,\n      params,\n      method: \"GET\",\n    });\n  }\n\n  getInvoice(paymentHash: string, request_options?: Partial<RequestOptions>): Promise<Invoice> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices/${paymentHash}`,\n      method: \"GET\",\n    });\n  }\n\n  createInvoice(invoice: InvoiceRequestParams, request_options?: Partial<RequestOptions>): Promise<Invoice> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/invoices`,\n      request_body: invoice,\n      method: \"POST\",\n    });\n  }\n\n  keysend(args: KeysendRequestParams | KeysendRequestParams[], request_options?: Partial<RequestOptions>): Promise<SendPaymentResponse> {\n    let endpoint, request_body;\n    if (Array.isArray(args)) {\n      endpoint = \"/payments/keysend/multi\";\n      request_body = { keysends: args };\n    } else {\n      endpoint = \"/payments/keysend\";\n      request_body = args;\n    }\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint,\n      request_body,\n      method: \"POST\",\n    });\n  }\n\n  sendPayment(params: SendPaymentRequestParams, request_options?: Partial<RequestOptions>): Promise<SendPaymentResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/payments/bolt11`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n  sendBoostagram(args: SendBoostagramRequestParams | SendBoostagramRequestParams[], request_options?: Partial<RequestOptions>) {\n    let endpoint, request_body;\n    if (Array.isArray(args)) {\n      endpoint = \"/payments/keysend/multi\";\n      const keysends = args.map((b) => keysendParamsFromBoostagram(b));\n      request_body = { keysends };\n    } else {\n      endpoint = \"/payments/keysend\";\n      request_body = keysendParamsFromBoostagram(args);\n    }\n\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint,\n      request_body,\n      method: \"POST\",\n    });\n  }\n\n  sendToAlbyAccount(args: SendToAlbyRequestParams, request_options?: Partial<RequestOptions>) {\n    const params = {\n      destination: \"030a58b8653d32b99200a2334cfe913e51dc7d155aa0116c176657a4f1722677a3\",\n      customRecords: {\n        \"696969\": args.account,\n      },\n      amount: args.amount,\n      memo: args.memo,\n    };\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/payments/keysend`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n  createWebhookEndpoint(params: CreateWebhookEndpointParams, request_options?: Partial<RequestOptions>): Promise<CreateWebhookEndpointResponse> {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/webhook_endpoints`,\n      request_body: params,\n      method: \"POST\",\n    });\n  }\n\n  deleteWebhookEndpoint(id: string, request_options?: Partial<RequestOptions>): Promise<BaseWebhookEndpointResponse>  {\n    return rest({\n      auth: this.auth,\n      ...this.defaultRequestOptions,\n      ...request_options,\n      endpoint: `/webhook_endpoints/${id}`,\n      method: \"DELETE\",\n    });\n  }\n\n}\n","import { Client } from '../client';\nimport {\n  OAuthClient,\n  KeysendRequestParams,\n} from \"../types\";\n\ninterface RequestInvoiceArgs {\n  amount: string | number;\n  defaultMemo?: string;\n}\n\nconst isBrowser = () => typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\nexport class OauthWeblnProvider {\n  client: Client;\n  auth: OAuthClient;\n  oauth: boolean;\n  subscribers: Record<string, (payload: any) => void>;\n  isExecuting: boolean;\n\n  constructor(options: { auth: OAuthClient }) {\n    this.auth = options.auth;\n    this.client = new Client(options.auth);\n    this.oauth = true;\n    this.subscribers = {};\n    this.isExecuting = false;\n  }\n\n  on(name: string, callback: () => void) {\n    this.subscribers[name] = callback;\n  }\n\n  notify(name: string, payload?: any) {\n    const callback = this.subscribers[name];\n    if (callback) {\n      callback(payload);\n    }\n  }\n\n  async enable() {\n    if (this.isExecuting) { return; }\n    if (this.auth.token?.access_token) {\n      return { enabled: true };\n    }\n    if (isBrowser()) {\n      try {\n        this.isExecuting = true;\n        const result = await this.openAuthorization();\n      } finally {\n        this.isExecuting = false;\n      }\n    } else {\n      throw new Error(\"Missing access token\");\n    }\n  }\n\n  async sendPayment(invoice: string) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.sendPayment({ invoice });\n      this.notify('sendPayment', result);\n      return {\n        preimage: result.payment_preimage\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  async keysend(params: KeysendRequestParams) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.keysend(params);\n      this.notify('keysend', result);\n      return {\n        preimage: result.payment_preimage\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  async getInfo() {\n    return {\n      alias: \"Alby\"\n    };\n  }\n\n  async makeInvoice(params: RequestInvoiceArgs) {\n    if (this.isExecuting) { return; }\n    try {\n      this.isExecuting = true;\n      const result = await this.client.createInvoice({\n        amount: parseInt(params.amount.toString()),\n        description: params.defaultMemo\n      });\n      this.notify('makeInvoice', result);\n      return {\n        paymentRequest: result.payment_request\n      }\n    } catch (error) {\n      let message = 'Unknown Error'\n      if (error instanceof Error) message = error.message\n      throw new Error(message);\n    } finally {\n      this.isExecuting = false;\n    }\n  }\n\n  openAuthorization() {\n    const height = 700;\n    const width = 600;\n    const top = window.outerHeight / 2 + window.screenY - height / 2;\n    const left = window.outerWidth / 2 + window.screenX - width / 2;\n    const url = this.auth.generateAuthURL({ code_challenge_method: \"S256\" });\n\n    return new Promise((resolve, reject) => {\n      const popup = window.open(\n        url,\n        `${document.title} - WebLN enable`,\n        `height=${height},width=${width},top=${top},left=${left}`\n      );\n      let processingCode = false;\n      window.addEventListener('message', async (message) => {\n        const data = message.data;\n        if (data && data.type === 'alby:oauth:success' && message.origin === `${document.location.protocol}//${document.location.host}` && !processingCode) {\n          processingCode = true; // make sure we request the access token only once\n          console.info(\"Processing OAuth code response\");\n          const code = data.payload.code;\n          try {\n            await this.auth.requestAccessToken(code);\n            this.client = new Client(this.auth); // just to make sure we got a client with the correct auth and not the access token\n            if (popup) {\n              popup.close();\n            }\n            this.notify('enable');\n            resolve({ enabled: true });\n          } catch (e) {\n            console.error(e);\n            reject({ enabled: false });\n          }\n        }\n      });\n    });\n  }\n}\n"],"names":["buildQueryString","query","Object","entries","map","_ref","key","value","join","basicAuthHeader","client_id","client_secret","btoa","_Error","AlbyResponseError","status","statusText","headers","error","_this","message","toString","JSON","stringify","this","Error","_excluded","rest","args","request","response","json","auth","endpoint","_ref$params","params","request_body","method","max_retries","base_url","_ref$base_url","BASE_URL","user_agent","options","_objectWithoutPropertiesLoose","authHeader","Promise","resolve","fetchWithRetries","url","isPost","undefined","body","ok","then","_temp","_result","search","getAuthHeader","href","e","reject","init","fetch","res","_exit2","_temp4","rateLimitReset","Number","get","rateLimitRemaining","timeTillReset","Date","now","timeToWait","setTimeout","token","expires_in","_extends","expires_at","OAuth2User","code_verifier","code_challenge","_refreshAccessTokenPromise","defaultOptions","_excluded2","_proto","prototype","refreshAccessToken","_this2","_this2$token","refresh_token","_this2$options","request_options","grant_type","Authorization","data","processTokenResponse","_catch","_finallyRethrows","_wasThrown","isAccessTokenExpired","_this$token","_this$token2","requestAccessToken","code","_this4","_this4$options","callback","redirect_uri","generateAuthURL","console","log","code_challenge_method","_this$options","scopes","CryptoJS","lib","WordArray","random","SHA256","enc","Base64","replace","URL","scope","response_type","_this6$token","_temp3","_this6","access_token","OAuth2Bearer","bearer_token","NWCs","alby","authorizationUrl","relayUrl","walletPubkey","NostrWebLNProvider","relay","secret","subscribers","nostrWalletConnectUrl","parseWalletConnectUrl","_options","providerName","providerOptions","relayInit","toLowerCase","startsWith","nip19","decode","globalThis","WebSocket","walletConnectUrl","host","searchParams","withNewSecret","generatePrivateKey","on","name","notify","payload","getNostrWalletConnectUrl","includeSecret","publicKey","getPublicKey","signEvent","event","finishEvent","getEventHash","enable","connected","connect","close","encrypt","pubkey","content","nip04","decrypt","getInfo","methods","node","supports","version","sendPayment","invoice","_this7","checkConnected","encryptedCommand","unsignedEvent","kind","created_at","Math","floor","tags","sub","kinds","authors","id","replyTimeoutCheck","unsub","clearTimeout","decryptedContent","_response$result","_response$error","_response$error2","parse","result","preimage","publish","publishTimeoutCheck","pub","reason","keysend","lnurl","makeInvoice","signMessage","verifyMessage","signature","getAuthorizationUrl","set","returnTo","budgetRenewal","expiresAt","getTime","maxAmount","editable","initNWC","document","location","top","window","outerHeight","screenY","height","left","outerWidth","screenX","width","open","title","popup","onMessage","type","origin","protocol","clearInterval","popupChecker","removeEventListener","setInterval","closed","addEventListener","NWC","keysendParamsFromBoostagram","boostagramParams","customRecords","recipient","customKey","customValue","boostagram","destination","address","amount","Client","requestOptions","defaultRequestOptions","accountBalance","accountSummary","accountInformation","accountValue4Value","incomingInvoices","outgoingInvoices","getInvoice","paymentHash","createInvoice","Array","isArray","keysends","sendBoostagram","b","sendToAlbyAccount","account","memo","createWebhookEndpoint","deleteWebhookEndpoint","client","oauth","isExecuting","OauthWeblnProvider","_this2$auth$token","enabled","isBrowser","_temp2","openAuthorization","payment_preimage","_wasThrown2","_result3","_wasThrown3","_result4","alias","_this8","parseInt","description","defaultMemo","paymentRequest","payment_request","_this9","processingCode","_temp5","info"],"mappings":"qqDACM,SAA0BA,EAACC,GAC/B,OAAOC,OAAOC,QAAQF,GACnBG,IAAI,SAAAC,GAAA,IAAKC,EAAAD,EAAA,GAAEE,EACVD,EAAAA,GAAAA,OAAAA,GAAOC,EACAD,MAAOC,EACV,EAAE,GAEPC,KAAK,IACV,CAEgBC,SAAAA,EAAgBC,EAAmBC,GACjD,MAAA,SAAgBC,KAAQF,EAAaC,IAAAA,EACvC,CCbA,mBAKE,SAAAE,WAAA,SAAAC,EACEC,EACAC,EACAC,EACAC,GAAU,IAAAC,EAECC,EAAGL,EAAOM,WAgBF,OAffL,IACFI,GAAeJ,IAAAA,GAEjBI,GAAW,KAETA,GADEF,EAAME,QACGF,EAAME,QAGNE,KAAKC,UAAUL,IAG5BC,EAAMC,EAAAA,KAAAA,KAAAA,IAASI,MAtBjBT,YACAC,EAAAA,EAAAA,oBACAC,aAAO,EAAAE,EACPD,WAoBE,EAAAC,EAAKJ,OAASA,EACdI,EAAKH,WAAaA,EAClBG,EAAKF,QAAUA,EACfE,EAAKD,MAAQA,EACfC,CAAA,CAAC,SAvBDN,KAAAC,2EAAA,gBALqCW,sCC8CN,WAAA,aAqLjC,WAAA,uBC3IAC,EAAA,CAAA,OAAA,WAAA,SAAA,eAAA,SAAA,cAAA,WAAA,aAAA,aAAsBC,SACpBC,0BAEuBC,EAAQD,kBAAzBE,GACN,OAAeA,EAACC,MAAc,EAChC,EAvDsBF,WAAOxB,GAAA,MAC3B2B,EAAAA,KACAC,EAAQ5B,EAAR4B,SAAQC,EAAA7B,EACR8B,OAAQlC,aAAQ,CAAA,IAChBmC,EAAY/B,EAAZ+B,aACAC,IAAAA,OACAC,EAAAA,EAAAA,gBACAC,SAAAA,OAAQ,IAAAC,EAAGC,EACXC,EAAAA,IAAAA,WACAzB,EAAAA,EAAAA,QACG0B,EAAOC,EAAAvC,EAAAqB,GAAA,mBAKJmB,GAAU,OAAAC,QAAAC,QAGOC,EACrBC,EAAI5B,WAEFJ,EAAAA,CAAAA,aACMiC,EACA,CAAE,eAAgB,wCAClBC,EACDN,EACA5B,EACA,CACD,aAAwB,MAAVyB,EAAAA,EAAc,cAC5B,eAA0B,MAAVA,EAAAA,EAAc,gBAGlCL,OAAAA,EACAe,KAAMF,EAAS5B,KAAKC,UAAUa,QAAgBe,GAC3CR,GAELL,IAlBIR,KAAAA,SAAAA,wBAoBDA,EAASuB,GAAE,OAAAP,QAAAC,QACMjB,EAASC,QAAMuB,KAAA,SAA7BpC,GACN,UAA2BJ,EACzBgB,EAASf,OACTe,EAASd,WACTc,EAASb,QACTC,EACA,EAAA,IAAA,OAAAqC,GAAAA,EAAAD,KAAAC,EAAAD,KAAA,SAAAE,GAAA,OAEG1B,CAAQ,GAARA,CAAQ,EAnCf,IAAY,QAAQS,EAAWN,GAC/BgB,EAAIQ,OAASzD,EAAiBC,GAC9B,IAAYiD,EAAc,SAAXb,KAAuBD,EAAa,OAAAU,QAAAC,QAChCf,EACTA,QAAAA,QAAAA,EAAK0B,cAAcT,EAAIU,KAAMtB,IACnCc,KAAAA,GAAAA,OAAAA,GA+BL,CAAA,MAAAS,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,IAnEcZ,SAAAA,EACbC,EACAa,EACAxB,QAAW,IAAXA,IAAAA,EAAc,GAAC,IAAA,OAAAQ,QAAAC,QAEGgB,MAAMd,EAAKa,kBAAvBE,GAAG,IAAAC,EAAAC,EAAA,WAAA,GACU,MAAfF,EAAIjD,QAAkBuB,EAAc,GACtC,IAAM6B,EAAiBC,OAAOJ,EAAI/C,QAAQoD,IAAI,uBACtBC,EAAGF,OAAOJ,EAAI/C,QAAQoD,IAAI,2BAC5CE,EAAiC,IAAjBJ,EAAwBK,KAAKC,MAC/CC,EAAa,IAEY,OADF,IAAvBJ,IACFI,EAAaH,GACTzB,QAAAC,QAAA,YAAY,SAACA,GAAY4B,OAAAA,WAAW5B,EAAS2B,EAAW,IACvD1B,KAAAA,WAAAA,IAAAA,EAAAA,EAAiBC,EAAKa,EAAMxB,EAAc,mBAT1C,kDAWF0B,CAAG,GAAAC,EAAAC,EAAHF,CAAG,GACX,oCA9BKvB,EAAW,uDCmBjB,WAA8BmC,GAC5B,IAAQC,EAAwBD,EAAxBC,WACR,OAAAC,EAAA,CAAA,EAD2BlC,EAAKgC,EAChClD,KAEQmD,GAAc,CAClBE,WAAYP,KAAKC,MAAqB,IAAbI,GAG/B,CAEA,IAAuBG,eAAA,WAMrB,SAAYrC,EAAAA,GALZiC,KAAAA,WACAjC,EAAAA,KAAAA,aACAsC,EAAAA,KAAAA,0BACAC,oBAAc,EAAA1D,KACN2D,gCAA0B,EAEhC,IAAQP,EAA6BjC,EAA7BiC,MAAUQ,EAAcxC,EAAKD,EACrC0C,GAAA7D,KAAKmB,QAAWhC,EAAAA,CAAAA,cAAe,IAAOyE,GACtC5D,KAAKoD,MAAQA,EACbpD,KAAK2D,2BAA6B,IACpC,CAAC,IAAAG,EAAAN,EAAAO,UAyIA,OAzIAD,EAKKE,mBAAkB,WAAA,UAClBhE,KAAJ,OAAIiE,EAAKN,6BAGTM,EAAKN,2BAA6B,IAAWrC,QAAA,SAAQC,EAASc,GAAU,IAAA,OAAAf,QAAAC,wDAAA,WAEpE,IAAA2C,EAAmBC,EAAa,OAAbD,EAAGD,EAAKb,YAAK,EAAVc,EAAYC,cAClCC,EAAkEH,EAAK9C,QAA/DjC,EAASkF,EAATlF,UAAWC,EAAAA,EAAAA,cAAekF,EAAAA,EAAAA,gBAAiBnD,EAAUkD,EAAVlD,WACnD,IAAKhC,EACH,MAAM,IAASe,MAAC,yBAElB,IAAKkE,EACH,MAAM,IAASlE,MAAC,6BACjB,OACkBE,QAAAA,QAAAA,EACdkE,EAAAA,GAAAA,EACH5D,CAAAA,wBACAE,OAAQ,CACNzB,UAAAA,EACAoF,WAAY,gBACZH,cAAAA,GAEFjD,WAAAA,EACAL,OAAQ,OACRpB,QAAO6D,EAAA,CAAA,EACFe,MAAAA,OAAAA,EAAAA,EAAiB5E,QACpB,CAAA,eAAgB,qCACb,CACD8E,cAAetF,EAAgBC,EAAWC,SAd1CqF,KAAAA,SAAAA,GAkBN,IAAWpB,EAAGqB,EAAqBD,GACnCP,EAAKb,MAAQA,EACb7B,EAAQ,CAAC6B,MAAAA,GAAQ,EAClB,6DA/BqEsB,CAAA,EA+BrE,SACKhF,GACJ2C,EAAO3C,EACR,4FAlCqEiF,CAAA,EAoCpE,SAAAC,EAAA5C,GAAuC,GAAvCiC,EAAKN,2BAA6B,0BAErC,CAAA,MAAAvB,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,IAxCQd,QAAAC,QAAA0C,EAAKN,2BA0Cf,CAAA,MAAAvB,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EAAA0B,EAKDe,qBAAA,WAAoB,IAAAC,EAAAC,EACCZ,EAAa,OAAbW,EAAG9E,KAAKoD,YAAK,EAAV0B,EAAYX,cAC5BZ,EAAuB,OAAVwB,EAAA/E,KAAKoD,YAAK,EAAV2B,EAAYxB,WAC/B,OAAKA,KACIY,GAAiBZ,GAAcP,KAAKC,MAAQ,GACvD,EAACa,EAKKkB,mBAAmBC,SAAAA,GAAa,IAAA,IAAAC,EAElClF,OAAAkF,EAAK/D,QADCjC,EAAAA,EAAAA,UAAWC,EAAagG,EAAbhG,cAAeiG,EAAQD,EAARC,SAAUf,EAAAA,EAAAA,gBAAiBnD,IAAAA,WAEvDuC,EAAgByB,EAAKzB,cAC3B,IAAKvE,EACH,MAAUe,IAAAA,MAAM,yBAElB,IAAKmF,EACH,MAAM,UAAU,wBAQhB,OAAA9D,QAAAC,QACiBpB,EAAImD,EAAA,CAAA,EAClBe,EAAe,CAClB5D,SAAwB,eACxBE,OAVa,CACbsE,KAAAA,EACAX,WAAY,qBACZb,cAAAA,EACAvE,UAAAA,EACAmG,aAAcD,GAMdlE,WAAAA,EACAL,OAAQ,OACRpB,QAAO6D,EAAA,CAAA,EACa,MAAfe,OAAe,EAAfA,EAAiB5E,QACpB,CAAA,eAAgB,qCACb,CACD8E,cAAetF,EAAgBC,EAAWC,SAG9C2C,KAAA,SAbI0C,GAcN,IAAWpB,EAAGqB,EAAqBD,GAEnC,OADAU,EAAK9B,MAAQA,EACN,CAAEA,MAAAA,EAAQ,GAClB,sCAEDkC,gBAAA,SAAgBnE,GACTA,IAAWA,EAAU,CAAK,GAC/BoE,QAAQC,IAAIrE,GACZ,IAGyBsE,EAHeC,EAAA1F,KAAKmB,QAArCjC,EAASwG,EAATxG,UAAWkG,EAAQM,EAARN,SAAUO,EAAAA,EAAAA,OAC7B,IAAKP,EAAU,MAAM,IAASnF,MAAC,qBAC/B,IAAK0F,EAAQ,MAAU1F,IAAAA,MAAM,mBAE7B,GAAsC,SAAlCkB,EAAQsE,sBAAkC,CAC5C,IAAmBhC,EAAGmC,EAAAA,QAASC,IAAIC,UAAUC,OAAO,IACpD/F,KAAKyD,cAAgBA,EAAc5D,WACnCG,KAAK0D,eAAiBkC,EAAQ,QAACI,OAAOhG,KAAKyD,eAAe5D,SAAS+F,EAAAA,QAASK,IAAIC,QAAQC,QAAQ,MAAO,KAAKA,QAAQ,MAAO,KAAKA,QAAQ,OAAQ,IAChJV,EAAwB,MACzB,KAA4C,UAAlCtE,EAAQsE,uBAAqCtE,EAAQuC,iBAC9D1D,KAAK0D,eAAiBvC,EAAQuC,eAC9B1D,KAAKyD,cAAgBtC,EAAQuC,eAC7B+B,EAAwB,SAE1B,IAAoB/B,EAAG1D,KAAK0D,eACnBjC,EAAG,IAAI2E,IA/JE,6BAyKlB,OATA3E,EAAIQ,OAASzD,EAAgB8E,EAAA,CAAA,EACxBnC,EAAO,CACVjC,UAAAA,EACAmH,MAAOV,EAAO3G,KAAK,KACnBsH,cAAe,OACfjB,aAAcD,EACdK,sBAAAA,EACA/B,eAAAA,KAEQjC,EAAC5B,UACb,EAACiE,EAEK5B,cAAa,WAAA,IAAA,IAAAqE,EAAAC,EAAA,WAGjB,MAAO,CACLjC,cAAa,UAAYkC,EAAKrD,MAAMsD,aACpC,EAJGD,EAAAzG,KAAL,GAAK,OAADuG,EAACE,EAAKrD,SAALmD,EAAYG,aAAc,MAAUzG,IAAAA,MAAM,4BAA4B,IAAAyC,EAAA,WAC3E,GAAI+D,EAAK5B,uBAA8B,OAAAvD,QAAAC,QAAAkF,EAAKzC,sBAAqBlC,KAAA,WAAA,EAAA,CADU,GACV,OAAAR,QAAAC,QAAAmB,GAAAA,EAAAZ,KAAAY,EAAAZ,KAAA0E,GAAAA,IAIlE,CAAA,MAAApE,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EAAAoB,CAAA,CApJoB,GCjCVmD,eAGX,WAAA,SAAAA,EAAYC,GAFJA,KAAAA,kBAGN,EAAA5G,KAAK4G,aAAeA,CACtB,CAMC,OANAD,EAAA5C,UAED7B,cAAA,WACE,MAAO,CACLqC,cAAa,UAAYvE,KAAK4G,aAElC,EAACD,CAAA,CARD,kDCYQE,EAAqC,CAC7CC,KAAM,CACJC,iBAAkB,mCAClBC,SAAU,6BACVC,aAAc,qEAgBLC,0BA8BX,WAAY/F,cA7BZgG,WAAK,EAAAnH,KACLgH,cACAI,EAAAA,KAAAA,YACAH,EAAAA,KAAAA,kBACA9F,EAAAA,KAAAA,oBACAkG,iBAAW,EAyBLlG,GAAWA,EAAQmG,wBACrBnG,EAAOmC,EAAA,CAAA,EACF4D,EAAmBK,sBAAsBpG,EAAQmG,uBAA2BnG,IAGnF,MAAwB0F,UAAK1F,EAAAA,UAAAqG,EAASC,eAAgB,QACtDzH,KAAKmB,QAAeuG,EAAAA,CAAAA,EAAAA,EAAqBvG,GAAW,CAAA,GACpDnB,KAAKgH,SAAWhH,KAAKmB,QAAQ6F,SAC7BhH,KAAKmH,MAAQQ,EAASA,UAAC3H,KAAKgH,UACxBhH,KAAKmB,QAAQiG,SACfpH,KAAKoH,OAAUpH,KAAKmB,QAAQiG,OAAOQ,cAAcC,WAAW,QAAUC,EAAAA,MAAMC,OAAO/H,KAAKmB,QAAQiG,QAAQ5C,KAAOxE,KAAKmB,QAAQiG,QAE9HpH,KAAKiH,aAAgBjH,KAAKmB,QAAQ8F,aAAaW,cAAcC,WAAW,QAAUC,EAAAA,MAAMC,OAAO/H,KAAKmB,QAAQ8F,cAAczC,KAAOxE,KAAKmB,QAAQ8F,aAC9IjH,KAAKqH,YAAc,CAAA,OAGS1F,IAAzBqG,WAAWC,WACZ1C,QAAQ7F,MAAM,2FAElB,GA1CO6H,sBAAP,SAA6BW,GAC3BA,EAAmBA,EAAiB/B,QAAQ,wBAAyB,WAAWA,QAAQ,yBAA0B,WAClH,MAAY,IAAOC,IAAC8B,GACd/G,EAAU,CAAuB,EACvCA,EAAQ8F,aAAexF,EAAI0G,KAC3B,MAAe1G,EAAI2G,aAAavF,IAAI,UAC9BmE,EAAWvF,EAAI2G,aAAavF,IAAI,SAOtC,OANIuE,IACFjG,EAAQiG,OAASA,GAEfJ,IACF7F,EAAQ6F,SAAWA,GAEd7F,CACT,EAAC+F,EAEMmB,cAAP,SAAqBlH,GAGnB,OAFAA,EAAUA,GAAW,CAAA,GACbiG,OAASkB,EAAAA,yBACYpB,EAAC/F,EAChC,EAsBC,QAEDoH,EAAAA,EAAAA,iBAAAA,EAAAA,GAAA,SAAGC,EAAcpD,GACfpF,KAAKqH,YAAYmB,GAAQpD,CAC3B,EAEAqD,EAAAA,OAAA,SAAOD,EAAcE,GACnB,IAActD,EAAGpF,KAAKqH,YAAYmB,GAC9BpD,GACFA,EAASsD,EAEb,EAEAC,EAAAA,yBAAA,SAAyBC,QAAa,IAAbA,IAAAA,GAAgB,GACvC,IAAInH,2BAA+BzB,KAAKiH,aAAsB,UAAAjH,KAAKgH,SAAQ,WAAWhH,KAAK6I,UAI3F,OAHID,IACFnH,EAASA,EAAc,WAAAzB,KAAKoH,QAGhC3F,CAAA,EAiBAqH,EAAAA,aAAA,WACE,OAAOxH,QAAQC,QAAQvB,KAAK6I,UAC9B,EAEAE,EAAAA,UAAA,SAAUC,GACR,IAAKhJ,KAAKoH,OACR,UAAenH,MAAC,sBAGlB,OAAcqB,QAACC,QAAQ0H,EAAAA,YAAYD,EAAOhJ,KAAKoH,QACjD,EAACtD,EAEDoF,aAAA,SAAaF,GACX,SAAmBE,aAACF,EACtB,EAAClF,EAEKqF,OAAM,WAAA,IACV,OAAInJ,KAAKoJ,UACO9H,QAACC,UAChBD,QAAAC,QAFGvB,KAGOmH,MAAMkC,WAASvH,KAAA,WAAA,EAG5BwH,CAFC,MAEDA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,MAAA,WACE,YAAYnC,MAAMmC,OACpB,EAEMC,EAAAA,QAAQC,SAAAA,EAAgBC,OAC5B,IAAKzJ,KAAKoH,OACR,MAAUnH,IAAAA,MAAM,kBACjB,OACuByJ,QAAAA,QAAAA,EAAAA,MAAMH,QAHzBvJ,KAGsCoH,OAAQoC,EAAQC,GAE5D,CAAA,MAAArH,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EAAA0B,EAEK6F,QAAQH,SAAAA,EAAgBC,GAAe,IAC3C,IAAKzJ,KAAKoH,OACR,MAAUnH,IAAAA,MAAM,kBACjB,OAAAqB,QAAAC,QACuBmI,EAAAA,MAAMC,QAHzB3J,KAGsCoH,OAAQoC,EAAQC,IAE5D,sCAIKG,QAAO,WAAA,IACX,OAAOtI,QAAAC,QAAA,CACLsI,QAAS,CAAC,UAAW,eACrBC,KAAM,CAAe,EACrBC,SAAU,CAAC,aACXC,QAAS,OAEZ,CAAA,MAAA5H,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EAAA0B,EAEDmG,YAAA,SAAYC,GAUuB,IAAAC,EAAAnK,KAPjC,OAFAA,KAAKoK,iBAEE,IAAW9I,QAAA,SAA6BC,EAASc,OAMpD,OAC6Bf,QAAAC,QAAA4I,EAAKZ,QAAQY,EAAKlD,aAAcnH,KAAKC,UANpD,CACdc,OAAU,cACVF,OAAU,CACRuJ,QAAWA,OAGwEpI,KAAA,SAAjFuI,GACN,IAAmBC,EAAkB,CACnCC,KAAM,MACNC,WAAYC,KAAKC,MAAM1H,KAAKC,MAAQ,KACpC0H,KAAM,CAAC,CAAC,IAAKR,EAAKlD,eAClBwC,QAASY,EACTb,OAAQW,EAAKtB,WACb,OAEkBvH,QAAAC,QAAA4I,EAAKpB,UAAUuB,IAAcxI,KAAA,SAA3CkH,GAGN,IAAI4B,EAAMT,EAAKhD,MAAMyD,IAAI,CACvB,CACEC,MAAO,CAAC,OACRC,QAAS,CAACX,EAAKlD,cACf,KAAM,CAAC+B,EAAM+B,OAUIC,EAAG7H,WANxB,WACEyH,EAAIK,QAEJ5I,EAAO,CAAC3C,8BAA+BsJ,EAAM+B,GAAM9F,KAAM,YAC3D,EAEiD,KAEjD2F,EAAIrC,GAAG,QAAO,SAASS,GAAS,IAGlB,OADZkC,aAAaF,GACbJ,EAAIK,QAAQ3J,QAAAC,QACmB4I,EAAKR,QAAQQ,EAAKlD,aAAc+B,EAAMS,UAAQ3H,KAAA,SAAvEqJ,GAAgB,IAAAC,EAClB9K,EAU0C+K,EAAAC,EAT9C,IACEhL,EAAWR,KAAKyL,MAAMJ,EAIvB,CAHC,MAAM/I,GAEN,YADAC,EAAO,CAAE3C,MAAO,mBAAoBuF,KAAM,YAE3C,CAEiB,OAAd+D,EAAMuB,MAAgC,OAAfjK,EAAAA,EAASkL,SAATJ,EAAiBK,UAC1ClK,EAAQ,CAAEkK,SAAUnL,EAASkL,OAAOC,WACpCtB,EAAK1B,OAAO,cAAenI,EAASkL,SAEpCnJ,EAAO,CAAE3C,MAAO,OAAAY,EAAAA,EAASZ,YAAT,EAAA2L,EAAgBzL,QAASqF,KAAM,SAAA3E,EAASZ,YAAT,EAAA4L,EAAgBrG,MAAQ,EAEzE,CAAD,MAAC7C,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,GAEF,MAAU+H,EAAKhD,MAAMuE,QAAQ1C,GAMN2C,EAAGxI,WAJ1B,WAEEd,EAAO,CAAE3C,MAAiCsJ,0BAAAA,EAAM+B,IAClD,EACqD,KAErDa,EAAIrD,GAAG,SAAU,SAACsD,GAEhBX,aAAaS,GACbtJ,EAAO,CAAE3C,oCAAqCmM,GAChD,GAEAD,EAAIrD,GAAG,KAAM,WAEX2C,aAAaS,EACf,EAAG,EACL,GAAC,oCACH,EAAC7H,EAGDgI,QAAA,SAAQ1L,GACN,MAAUH,IAAAA,MAAM,0BAClB,EACA8L,EAAAA,MAAA,SAAMA,GACJ,MAAM,UAAU,0BAClB,EAACjI,EACDkI,YAAA,SAAY5L,GACV,UAAeH,MAAC,0BAClB,EACAI,EAAAA,QAAA,SAAQQ,EAAuBT,GAC7B,UAAeH,MAAC,0BAClB,EAAC6D,EACDmI,YAAA,SAAYrM,GACV,MAAUK,IAAAA,MAAM,0BAClB,IACAiM,cAAA,SAAcC,EAAmBvM,GAC/B,MAAM,IAASK,MAAC,0BAClB,IAEAmM,oBAAA,SAAoBjL,GAClB,IAAKnB,KAAKmB,QAAQ4F,iBAChB,MAAU9G,IAAAA,MAAM,mCAElB,IAASwB,EAAG,IAAO2E,IAACpG,KAAKmB,QAAQ4F,kBAsBjC,OArBW,MAAP5F,GAAAA,EAASqH,MACX/G,EAAI2G,aAAaiE,IAAI,IAAKlL,MAAAA,OAAAA,EAAAA,EAASqH,MAErC/G,EAAI2G,aAAaiE,IAAI,SAAUrM,KAAK6I,WACzB,MAAP1H,GAAAA,EAASmL,UACX7K,EAAI2G,aAAaiE,IAAI,YAAalL,EAAQmL,UAGxCnL,MAAAA,GAAAA,EAASoL,eACX9K,EAAI2G,aAAaiE,IAAI,iBAAkBlL,EAAQoL,eAEtC,MAAPpL,GAAAA,EAASqL,WACX/K,EAAI2G,aAAaiE,IAAI,aAAc5B,KAAKC,MAAMvJ,EAAQqL,UAAUC,UAAY,KAAM5M,YAEhFsB,MAAAA,GAAAA,EAASuL,WACXjL,EAAI2G,aAAaiE,IAAI,aAAclL,EAAQuL,UAAU7M,iBAE7B8B,KAAf,MAAPR,OAAO,EAAPA,EAASwL,WACXlL,EAAI2G,aAAaiE,IAAI,WAAYlL,EAAQwL,SAAS9M,YAItD4B,CAAA,EAIAmL,EAAAA,QAAA,SAAQzL,YAAAA,IAAAA,EAAyC,CAAA,GAG1CA,EAAQqH,OACXrH,EAAQqH,KAAOqE,SAASC,SAAS3E,MAEnC,IAAS1G,EAAGzB,KAAKoM,oBAAoBjL,GAG5B4L,EAAGC,OAAOC,YAAc,EAAID,OAAOE,QAAUC,IAChDC,EAAOJ,OAAOK,WAAa,EAAIL,OAAOM,QAAUC,IAEtD,WAAkBjM,QAAC,SAACC,EAASc,GAC3B,MAAc2K,OAAOQ,KACnB/L,EAAI5B,WACDgN,SAASY,MACFN,oBAAAA,4BAA6BJ,EAAG,SAASK,GAErD,GAAKM,EAAL,CAEA,IAQeC,EAAG,SAAZA,EAAa/N,GACjB,MAAaA,EAAQ4E,KACjBA,GAAsB,gBAAdA,EAAKoJ,MAA0BhO,EAAQiO,SAAcpM,EAAIqM,SAAQ,KAAKrM,EAAI0G,OACpF5G,EAAQiD,GACRuJ,cAAcC,GACdhB,OAAOiB,oBAAoB,UAAWN,GAClCD,GACFA,EAAMpE,QAGZ,EACkB0E,EAAGE,YAnBC,WAChBR,GAASA,EAAMS,SACjB9L,IACA0L,cAAcC,GACdhB,OAAOiB,oBAAoB,UAAWN,GAE1C,EAagD,KAChDX,OAAOoB,iBAAiB,UAAWT,EAtBF,MAAnBtL,GAuBhB,EACF,EAACyB,EAEOsG,eAAA,WACN,IAAKpK,KAAKoJ,UACR,MAAM,UAAU,0EAEpB,IAAClC,KAAA,CAAA,CAAApI,IAAA,wBAAA+D,IAxPD,WACE,YAAY8F,0BACd,GAAC,CAAA7J,IAAA,YAAA+D,IAED,WACE,OAA6B,IAAtB7C,KAAKmH,MAAM5H,MACpB,GAEA,CAAAT,IAAA,YAAA+D,IAAA,WACE,IAAK7C,KAAKoH,OACR,MAAM,UAAU,sBAElB,OAAO0B,EAAYA,aAAC9I,KAAKoH,OAC3B,kPA8OciH,EAAGnH,EClWHoH,SAAAA,EAA4BC,GAC1C,IAAmBC,EAA2B,CAAA,EAO9C,OANID,EAAiBE,UAAUC,WAAaH,EAAiBE,UAAUE,cACrEH,EAAcD,EAAiBE,UAAUC,WAAaH,EAAiBE,UAAUE,aAGnFH,EAAc,SAAa1O,KAAKC,UAAUwO,EAAiBK,YAEpD,CACLC,YAAaN,EAAiBE,UAAUK,QACxCC,OAAQR,EAAiBQ,OACzBP,cAAeA,EAEnB,CCEaQ,IAAAA,0BAIX,SACExO,EAAAA,EACAyO,GALFzO,KAAAA,UACA0O,EAAAA,KAAAA,6BAMElP,KAAKQ,KAAuB,iBAALA,EAAgB,MAAiBA,GAAQA,EAChER,KAAKkP,2BACAD,EAAc,CACjB/N,WAAY+N,MAAAA,OAAAA,EAAAA,EAAgB/N,YAEhC,CAAC,IAEDiO,EAAAA,EAAAA,UAgLC,OAhLDA,EAAAA,eAAA,SAAexO,EAAY0D,GACzB,SACE7D,EAAAA,CAAAA,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EAAe,CAClB5D,SAAQ,WACRE,OAAAA,EACAE,OAAQ,QAEZ,IAEAuO,eAAA,SAAezO,EAAY0D,GACzB,OAAOlE,KACLK,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EACH5D,CAAAA,yBACAE,OAAAA,EACAE,OAAQ,QAEZ,EAEAwO,EAAAA,mBAAA,SAAmB1O,EAAY0D,GAC7B,SACE7D,EAAAA,CAAAA,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EAAe,CAClB5D,SAAoB,WACpBE,OAAAA,EACAE,OAAQ,QAEZ,EAEAyO,EAAAA,mBAAA,SAAmB3O,EAAY0D,GAC7B,OAAWlE,EAAAmD,EAAA,CACT9C,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EACH5D,CAAAA,6BACAE,OAAAA,EACAE,OAAQ,QAEZ,EAEA0O,EAAAA,iBAAA,SAAiB5O,EAAY0D,GAC3B,SACE7D,EAAAA,CAAAA,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,GACH5D,SAAQ,qBACRE,OAAAA,EACAE,OAAQ,QAEZ,EAACiD,EAED0L,iBAAA,SAAiB7O,EAAY0D,GAC3B,OAAWlE,EAAAmD,EAAA,CACT9C,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EACH5D,CAAAA,SAA8B,qBAC9BE,OAAAA,EACAE,OAAQ,QAEZ,EAEA4O,EAAAA,WAAA,SAAWC,EAAqBrL,GAC9B,OAAOlE,EACLK,EAAAA,CAAAA,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EAAe,CAClB5D,SAAuBiP,aAAAA,EACvB7O,OAAQ,QAEZ,EAACiD,EAED6L,cAAA,SAAczF,EAA+B7F,GAC3C,OAAWlE,EAAAmD,EAAA,CACT9C,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,GACH5D,SAAQ,YACRG,aAAcsJ,EACdrJ,OAAQ,SAEZ,EAACiD,EAEDgI,QAAA,SAAQ1L,EAAqDiE,GAC3D,IAAI5D,EAAUG,EAQd,OAPIgP,MAAMC,QAAQzP,IAChBK,EAAW,0BACXG,EAAe,CAAEkP,SAAU1P,KAE3BK,EAAW,oBACXG,EAAeR,GAEND,EAAAmD,EAAA,CACT9C,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EACH5D,CAAAA,SAAAA,EACAG,aAAAA,EACAC,OAAQ,SAEZ,EAEAoJ,EAAAA,YAAA,SAAYtJ,EAAkC0D,GAC5C,SACE7D,EAAAA,CAAAA,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,GACH5D,SAAQ,mBACRG,aAAcD,EACdE,OAAQ,SAEZ,EAACiD,EAEDiM,eAAA,SAAe3P,EAAmEiE,GAChF,IAAY5D,EAAEG,EAUd,OATIgP,MAAMC,QAAQzP,IAChBK,EAAW,0BAEXG,EAAe,CAAEkP,SADA1P,EAAKxB,IAAI,SAACoR,GAAM1B,OAAAA,EAA4B0B,EAAE,MAG/DvP,EAAW,oBACXG,EAAe0N,EAA4BlO,MAI3CI,EAAAA,CAAAA,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EAAe,CAClB5D,SAAAA,EACAG,aAAAA,EACAC,OAAQ,SAEZ,EAEAoP,EAAAA,kBAAA,SAAkB7P,EAA+BiE,GAS/C,OAAOlE,KACLK,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EACH5D,CAAAA,SAA6B,oBAC7BG,aAba,CACbiO,YAAa,qEACbL,cAAe,CACb,OAAUpO,EAAK8P,SAEjBnB,OAAQ3O,EAAK2O,OACboB,KAAM/P,EAAK+P,MAQXtP,OAAQ,SAEZ,EAEAuP,EAAAA,sBAAA,SAAsBzP,EAAqC0D,GACzD,SACE7D,EAAAA,CAAAA,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EAAe,CAClB5D,SAA8B,qBAC9BG,aAAcD,EACdE,OAAQ,SAEZ,EAACiD,EAEDuM,sBAAA,SAAsBtF,EAAY1G,GAChC,OAAWlE,EAAAmD,EAAA,CACT9C,KAAMR,KAAKQ,MACRR,KAAKkP,sBACL7K,EACH5D,CAAAA,+BAAgCsK,EAChClK,OAAQ,WAEZ,EAACmO,CAAA,kNCtMH,iFAA+B,WAO7B,SAAY7N,EAAAA,GANZmP,KAAAA,mBACA9P,UAAI,EAAAR,KACJuQ,WACAlJ,EAAAA,KAAAA,iBACAmJ,EAAAA,KAAAA,iBAGE,EAAAxQ,KAAKQ,KAAOW,EAAQX,KACpBR,KAAKsQ,OAAS,IAAItB,EAAO7N,EAAQX,MACjCR,KAAKuQ,OAAQ,EACbvQ,KAAKqH,YAAc,GACnBrH,KAAKwQ,aAAc,CACrB,CAAC,IAAA1M,EAAA2M,EAAA1M,UAgIA,OAhIAD,EAEDyE,GAAA,SAAGC,EAAcpD,GACfpF,KAAKqH,YAAYmB,GAAQpD,CAC3B,IAEAqD,OAAA,SAAOD,EAAcE,GACnB,MAAiB1I,KAAKqH,YAAYmB,GAC9BpD,GACFA,EAASsD,EAEb,IAEMS,OAAM,WAAA,IACN,IAAAuH,EAAAzM,EAAAjE,KAAJ,OAAIiE,EAAKuM,YAAwBlP,QAAAC,UAC7B,SAAA0C,EAAKzD,KAAK4C,QAAVsN,EAAiBhK,6BACZ,CAAEiK,SAAS,IAEhBC,QAAAA,QAAAA,WAAAA,GAjCkC,iCAA0C,IAApB5D,OAAOH,SAyCjE,MAAU5M,IAAAA,MAAM,wBAPZ,IAAA4Q,EAAAlM,EAAA,WACsB,OAAxBV,EAAKuM,aAAc,EAAKlP,QAAAC,QACH0C,EAAK6M,qBAAmBhP,KAAA,WAAA,EAC9C,EACC,SAAA8C,EAAA5C,GAAyB,GAAzBiC,EAAKuM,aAAc,EAGrB5L,EAAA,MAAA5C,EAAA,OAAAA,CAAA,GAAA,GAAA6O,GAAAA,EAAA/O,KAAA,OAAA+O,EAAA/O,KAAA,WAAA,EAEJ,CAVM8O,IAUL,sCAEK3G,YAAW,SAACC,GAAe,IAAA,IAAAhF,EAC3BlF,KAAJ,OAAIkF,EAAKsL,8BAAwBlP,QAAAC,QAAAoD,EAAA,WAAA,OAAAD,EAAA,WAEP,OAAxBQ,EAAKsL,aAAc,EAAKlP,QAAAC,QACH2D,EAAKoL,OAAOrG,YAAY,CAAEC,QAAAA,KAAzCsB,KAAAA,SAAAA,GAEN,OADAtG,EAAKuD,OAAO,cAAe+C,GACpB,CACLC,SAAUD,EAAOuF,iBAClB,EACF,WAAQrR,GACP,IAAWE,EAAG,gBAEd,MADIF,aAAiBO,QAAOL,EAAUF,EAAME,SAClCK,IAAAA,MAAML,EACjB,EACC,EAAA,SAAAoR,EAAAC,GAAyB,GAAzB/L,EAAKsL,aAAc,uBAEtB,CAAA,MAAApO,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EAAA0B,EAEKgI,QAAQnL,SAAAA,OACR,IAAA8F,EAAAzG,KAAJ,OAAIyG,EAAK+J,YAAelP,QAAAC,UAASD,QAAAC,QAAAoD,EAAA,WAAA,OAAAD,EAAA,WAEP,OAAxB+B,EAAK+J,aAAc,EAAKlP,QAAAC,QACHkF,EAAK6J,OAAOxE,QAAQnL,IAAOmB,KAAA,SAA1C0J,GAEN,OADA/E,EAAKgC,OAAO,UAAW+C,GAChB,CACLC,SAAUD,EAAOuF,iBAClB,EACF,WAAQrR,GACP,IAAIE,EAAU,gBAEd,MADIF,aAAiBO,QAAOL,EAAUF,EAAME,SACtC,IAASK,MAACL,EACjB,EACC,EAAA,SAAAsR,EAAAC,GAAyB,GAAzB1K,EAAK+J,aAAc,EAEvBU,EAAA,MAAAC,EAAA,OAAAA,CAAA,GAEMvH,CAFL,MAEKA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAO,WAAA,IACX,uBAAO,CACLwH,MAAO,QAEV,CAAA,MAAAhP,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EAAA0B,EAEKkI,YAAW,SAACrL,GAA0B,UACtCX,KAAJ,OAAIqR,EAAKb,YAAelP,QAAAC,UAASD,QAAAC,QAAAoD,EAAA,WAAA,OAAAD,EAAA,WAEP,OAAxB2M,EAAKb,aAAc,EACElP,QAAAC,QAAA8P,EAAKf,OAAOX,cAAc,CAC7CZ,OAAQuC,SAAS3Q,EAAOoO,OAAOlP,YAC/B0R,YAAa5Q,EAAO6Q,eAFhBhG,KAAAA,SAAAA,GAKN,OADA6F,EAAK5I,OAAO,cAAe+C,GACpB,CACLiG,eAAgBjG,EAAOkG,gBACxB,EACF,EAAA,SAAQhS,GACP,IAAWE,EAAG,gBAEd,MADIF,aAAsBO,QAAEL,EAAUF,EAAME,SAClCK,IAAAA,MAAML,EACjB,kBAC0B,GAAzByR,EAAKb,aAAc,uBAEtB,CAAA,MAAApO,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EAAA0B,EAEDgN,kBAAA,WAAiB,IAAAa,EAAA3R,KAGN+M,EAAGC,OAAOC,YAAc,EAAID,OAAOE,QAAUC,IAC5CC,EAAGJ,OAAOK,WAAa,EAAIL,OAAOM,QAAUC,IAChD9L,EAAMzB,KAAKQ,KAAK8E,gBAAgB,CAAEG,sBAAuB,SAE/D,OAAO,IAAWnE,QAAC,SAACC,EAASc,GAC3B,IAAMqL,EAAQV,OAAOQ,KACnB/L,EACGoL,SAASY,oDAC2BV,EAAYK,SAAAA,GAEnCwE,GAAG,EACrB5E,OAAOoB,iBAAiB,UAAS,SAASxO,GAAO,IAC/C,IAAM4E,EAAO5E,EAAQ4E,KAAKqN,EAAA,WAAA,GACtBrN,GAAsB,uBAAdA,EAAKoJ,MAAiChO,EAAQiO,SAAchB,SAASC,SAASgB,SAAQ,KAAKjB,SAASC,SAAS3E,OAAWyJ,EAAc,CAChJA,GAAiB,EACjBrM,QAAQuM,KAAK,kCACb,IAAM7M,EAAOT,EAAKkE,QAAQzD,oBAElB,OAAA3D,QAAAC,QAAAoQ,EAAKnR,KAAKwE,mBAAmBC,oBACnC0M,EAAKrB,OAAS,MAAWqB,EAAKnR,MAC1BkN,GACFA,EAAMpE,QAERqI,EAAKlJ,OAAO,UACZlH,EAAQ,CAAEoP,SAAS,GAAQ,EAC5B,WAAQvO,GACPmD,QAAQ7F,MAAM0C,GACdC,EAAO,CAAEsO,SAAS,GACnB,6CAhBuB,gEAkB3B,CAAA,MAAAvO,GAAA,OAAAd,QAAAe,OAAAD,EAAA,CAAA,EACH,EACF,EAACqO,CAAA,CA7I4B"}